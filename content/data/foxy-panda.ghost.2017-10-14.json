{"meta":{"exported_on":1508010560668,"version":"009"},"data":{"posts":[{"id":1,"uuid":"5528eb3d-2a8f-4cf2-9ffd-db057639daff","title":"Welcome to Ghost","slug":"welcome-to-ghost","markdown":"You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at `<your blog URL>/ghost/`. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!\n\n# Getting Started\n\nGhost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!\n\nWriting in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use *shortcuts* to **style** your content. For example, a list:\n\n* Item number one\n* Item number two\n    * A nested item\n* A final item\n\nor with numbers!\n\n1. Remember to buy some milk\n2. Drink the milk\n3. Tweet that I remembered to buy the milk, and drank it\n\n## Links\n\nWant to link to a source? No problem. If you paste in a URL, like http://ghost.org - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to [the Ghost website](http://ghost.org). Neat.\n\n### What about Images?\n\nImages work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:\n\n![The Ghost Logo](https://ghost.org/images/ghost.png)\n\nNot sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:\n\n![A bowl of bananas]\n\n\n### Quoting\n\nSometimes a link isn't enough, you want to quote someone on what they've said. Perhaps you've started using a new blogging platform and feel the sudden urge to share their slogan? A quote might be just the way to do it!\n\n> Ghost - Just a blogging platform\n\n### Working with Code\n\nGot a streak of geek? We've got you covered there, too. You can write inline `<code>` blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.\n\n```language-css line-numbers\n.awesome-thing {\n    display: block;\n    width: 100%;\n}\n```\n\n### Ready for a Break? \n\nThrow 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.\n\n---\n\n### Advanced Usage\n\nThere's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.\n\n<input type=\"text\" placeholder=\"I'm an input field!\" />\n\nThat should be enough to get you started. Have fun - and let us know what you think :)","mobiledoc":null,"html":"<p>You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at <code>&lt;your blog URL&gt;/ghost/</code>. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!</p>\n\n<h1 id=\"gettingstarted\">Getting Started</h1>\n\n<p>Ghost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!</p>\n\n<p>Writing in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use <em>shortcuts</em> to <strong>style</strong> your content. For example, a list:</p>\n\n<ul>\n<li>Item number one</li>\n<li>Item number two\n<ul><li>A nested item</li></ul></li>\n<li>A final item</li>\n</ul>\n\n<p>or with numbers!</p>\n\n<ol>\n<li>Remember to buy some milk  </li>\n<li>Drink the milk  </li>\n<li>Tweet that I remembered to buy the milk, and drank it</li>\n</ol>\n\n<h2 id=\"links\">Links</h2>\n\n<p>Want to link to a source? No problem. If you paste in a URL, like <a href=\"http://ghost.org\">http://ghost.org</a> - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to <a href=\"http://ghost.org\">the Ghost website</a>. Neat.</p>\n\n<h3 id=\"whataboutimages\">What about Images?</h3>\n\n<p>Images work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:</p>\n\n<p><img src=\"https://ghost.org/images/ghost.png\" alt=\"The Ghost Logo\" /></p>\n\n<p>Not sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:</p>\n\n<h3 id=\"quoting\">Quoting</h3>\n\n<p>Sometimes a link isn't enough, you want to quote someone on what they've said. Perhaps you've started using a new blogging platform and feel the sudden urge to share their slogan? A quote might be just the way to do it!</p>\n\n<blockquote>\n  <p>Ghost - Just a blogging platform</p>\n</blockquote>\n\n<h3 id=\"workingwithcode\">Working with Code</h3>\n\n<p>Got a streak of geek? We've got you covered there, too. You can write inline <code>&lt;code&gt;</code> blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.</p>\n\n<pre><code class=\"language-css line-numbers\">.awesome-thing {\n    display: block;\n    width: 100%;\n}\n</code></pre>\n\n<h3 id=\"readyforabreak\">Ready for a Break?</h3>\n\n<p>Throw 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.</p>\n\n<hr />\n\n<h3 id=\"advancedusage\">Advanced Usage</h3>\n\n<p>There's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.</p>\n\n<p><input type=\"text\" placeholder=\"I'm an input field!\" /></p>\n\n<p>That should be enough to get you started. Have fun - and let us know what you think :)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-25 22:49:24","created_by":1,"updated_at":"2016-08-28 13:04:07","updated_by":1,"published_at":"2016-08-25 22:49:24","published_by":1,"amp":null},{"id":2,"uuid":"e968ca2b-a575-44dc-b701-9ecbcccd7236","title":"Test Post #1","slug":"test-post-1","markdown":"Nulla quis lorem ut libero malesuada feugiat. Proin eget tortor risus. Donec rutrum congue leo eget malesuada. Curabitur non nulla sit amet nisl tempus convallis quis ac lectus. Curabitur non nulla sit amet nisl tempus convallis quis ac lectus.\n\nVestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Donec velit neque, auctor sit amet aliquam vel, ullamcorper sit amet ligula. Vestibulum ac diam sit amet quam vehicula elementum sed sit amet dui. Curabitur arcu erat, accumsan id imperdiet et, porttitor at sem. Cras ultricies ligula sed magna dictum porta. Vivamus magna justo, lacinia eget consectetur sed, convallis at tellus.","mobiledoc":null,"html":"<p>Nulla quis lorem ut libero malesuada feugiat. Proin eget tortor risus. Donec rutrum congue leo eget malesuada. Curabitur non nulla sit amet nisl tempus convallis quis ac lectus. Curabitur non nulla sit amet nisl tempus convallis quis ac lectus.</p>\n\n<p>Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Donec velit neque, auctor sit amet aliquam vel, ullamcorper sit amet ligula. Vestibulum ac diam sit amet quam vehicula elementum sed sit amet dui. Curabitur arcu erat, accumsan id imperdiet et, porttitor at sem. Cras ultricies ligula sed magna dictum porta. Vivamus magna justo, lacinia eget consectetur sed, convallis at tellus.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-25 23:25:31","created_by":1,"updated_at":"2016-08-25 23:25:41","updated_by":1,"published_at":"2016-08-25 23:25:41","published_by":1,"amp":null},{"id":3,"uuid":"5a7a3e6b-647c-4fe6-8aaa-58767d4a3e69","title":"Test Post #2","slug":"test-post-2","markdown":"Nulla quis lorem ut libero malesuada feugiat. Proin eget tortor risus. Donec rutrum congue leo eget malesuada. Curabitur non nulla sit amet nisl tempus convallis quis ac lectus. Curabitur non nulla sit amet nisl tempus convallis quis ac lectus. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae;\n\nDonec velit neque, auctor sit amet aliquam vel, ullamcorper sit amet ligula. Vestibulum ac diam sit amet quam vehicula elementum sed sit amet dui. Curabitur arcu erat, accumsan id imperdiet et, porttitor at sem. Cras ultricies ligula sed magna dictum porta. Vivamus magna justo, lacinia eget consectetur sed, convallis at LATEX GOODNESS $\\LaTeX$ tellus.\n\n$\\LaTeX$, pronounced lah-tekh, lah-tek or lay-tek, is a document preparation system. The core idea to understand here is that in $\\LaTeX$ editors you don't get fancy formatted text as you type, but instead, you type in plain text first and only after compilation do you get the formatted result. The best part is that you can use special markup to customise the formatting and the overall look and feel of your document however you please. For example, if you were to type then compile <code class=\"language-latex\">\\sum\\_{i=1}^{n} \\frac{2i + 5}{2^{i}}</code> you would get something like this: \n\\\\(\\sum\\_{i=1}^{n} \\frac{2i + 5}{2^{i}}\\\\). Amazing, isn't it?\n\n[New Window](#) and [~Same Window](#)","mobiledoc":null,"html":"<p>Nulla quis lorem ut libero malesuada feugiat. Proin eget tortor risus. Donec rutrum congue leo eget malesuada. Curabitur non nulla sit amet nisl tempus convallis quis ac lectus. Curabitur non nulla sit amet nisl tempus convallis quis ac lectus. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae;</p>\n\n<p>Donec velit neque, auctor sit amet aliquam vel, ullamcorper sit amet ligula. Vestibulum ac diam sit amet quam vehicula elementum sed sit amet dui. Curabitur arcu erat, accumsan id imperdiet et, porttitor at sem. Cras ultricies ligula sed magna dictum porta. Vivamus magna justo, lacinia eget consectetur sed, convallis at LATEX GOODNESS $\\LaTeX$ tellus.</p>\n\n<p>$\\LaTeX$, pronounced lah-tekh, lah-tek or lay-tek, is a document preparation system. The core idea to understand here is that in $\\LaTeX$ editors you don't get fancy formatted text as you type, but instead, you type in plain text first and only after compilation do you get the formatted result. The best part is that you can use special markup to customise the formatting and the overall look and feel of your document however you please. For example, if you were to type then compile <code class=\"language-latex\">\\sum_{i=1}^{n} \\frac{2i + 5}{2^{i}}</code> you would get something like this: \n\\(\\sum_{i=1}^{n} \\frac{2i + 5}{2^{i}}\\). Amazing, isn't it?</p>\n\n<p><a href=\"#\">New Window</a> and <a href=\"#\">~Same Window</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-25 23:25:49","created_by":1,"updated_at":"2016-08-28 14:14:44","updated_by":1,"published_at":"2016-08-25 23:25:55","published_by":1,"amp":null},{"id":4,"uuid":"62b2049f-c200-4fb6-ae6a-cc6ba8b6e6a9","title":"Lorem Ipsum","slug":"lorem-ipsum","markdown":"# Abstract\n\nIt's not a secret that for almost all people attempting to learn C pointers are a grey area. I personally was struggling quite a lot understanding them but I was saved by a huge amount of amazing guides on pointer usage you can find online. That said, I still feel like implementation of higher order functions in C deserves more exposure that it currently has and this article is my attempt to contribute to this cause.\n\n> **Note:** In this article I'm gonna assume that you have some experience with C and know what pointers are. Additionally, I will assume you know how to write and compile `.c` files.\n\n# What are higher order functions?\n\n[Higher order functions](https://en.wikipedia.org/wiki/Higher-order_function) take other functions as their arguments or return new functions when they terminate. It might sound confusing especially if you've never seen it being done before but in reality it is really quite simple. Consider the pseudocode below:\n\n```language-lua\nreverse(string)\n    -- Some code to reverse the string\n    return string\n\nuppercase(string)\n    -- Some code to convert string to uppercase\n    return string\n\napply(string, operation)\n    return operation(string)\n\nhello := \"hello\"\n\n-- Reverse the string\nhello := apply(hello, reverse)\n\n-- Convert the string to uppercase\nhello := apply(hello, uppercase)\n```\n\nTo summarise: `apply()` function above takes 2 parameters: a string and an another function. Then, as the name implies, it applies the `operation` to the supplied `string` and returns whatever comes out. This results in a very interesting form of [polymorphism](https://en.wikipedia.org/wiki/Polymorphism_(computer_science)): our `apply()` function can take any `operation` regardless of what it does as long as it accepts a string as an argument and returns the string afterwards.\n\nThe example above looks at the scenario when a function takes other functions as its arguments. Now let's take a look at functions that return new functions:\n\n```language-lua\nmultiplyOperation(coefficient)\n    -- Declare new function that multiplies the\n    -- supplied argument by the coefficient\n    operation(number)\n        return number * coefficient\n    -- Return the new function\n    return operation\n\n-- Function that multiplies everything by 5\nmultiplyBy5 := multiplyOperation(5)\n\n-- This will return 35\nmultipleBy5(7)\n```\n\nAs seen above, `multiplyOperation()` returns a new function that changes its behaviour depending on what value for the `coefficient` has been supplied to `multiplyOperation()`. Keep in mind that the examples above are just pseudocode to give you an idea of what higher order functions are about and C implementation will not necessarily look the same.\n\n# Function pointers in C\n\nTo achieve the functionality discussed in the previous section we're gonna use function pointers, which are pretty straightforward and shouldn't take you too long to wrap your head around. Before we start, remind yourself of these 2 things:\n\n* You can get the address of a variable using the `&` operator, like so: <code class=\"language-c\">int *a = &b;</code> (`a` can now be used as a pointer to `b`). That said, when referencing a function you are allowed to drop the `&` operator. If you still don't have that much experience with pointers, I recommend leaving it in.\n* Before you can access the variable a pointer is pointing to, you must dereference said pointer. Let's take integer pointer `a` from the line above - if I want to use it in a calculation, I need to dereference it using the `*` operator: <code class=\"language-c\">int c = 3 + *a;</code>.\n\n```language-c\n// Required for the `printf()` function\n#include <stdio.h>\n\n// The function we'll be pointing to\nint halve(int number) {\n    return number / 2;\n}\n\nvoid main() {\n    // Declare a pointer to the `halve` function\n    // We say that operation takes 1 int argument\n    // and returns an int when it terminates\n    int (*operation)(int) = &halve;\n\n    // Alternatively, you can drop the `&`:\n    int (*anotherOperation)(int) = halve;\n    // From here onwards, I will always drop the\n    // `&` to make the code a bit more concise\n\n    // Dereference the pointer to `halve` first,\n    // then supply relevant arguments to it\n    int halved = (*operation)(10);\n\n    // Should print `5`, try it yourself\n    printf(\"%d\", halved);\n}\n```\n\nAs you can see in the beginning of the `main()` method, pointers to functions have a rather unusual type declaration. It consists of 3 parts:\n\n1. The type before the parenthesis is the return type of the function the pointer is referencing. \n2. The middle part, is the name of the pointer. Note that you have to wrap it into parenthesis to indicate that this a pointer to a function.\n3. The last part contains the types of parameters the function is expecting.\n\nFor example, the type for a pointer to a function that accepts 2 character arrays and returns a double would look as follows: <code class=\"language-c\">double (\\*someFunction)(char\\*, char\\*)</code>. It is possible to go much deeper and, in fact, I'll show you an example in the end of this article.\n\n# Implementing the `map()` function\n\nAs an exercise, let's implement the [infamous `map()` function](https://en.wikipedia.org/wiki/Map_(higher-order_function)). This function takes 2 arguments:\n\n1. Some [unary function](https://en.wikipedia.org/wiki/Unary_function) that accepts an argument of type `A` and returns some value of type `B`.\n2. An array of type `A`. Keep in mind, type `A` can be the same as type `B`.\n\nThe return value is a new array of type `B`. This new array is generated by applying the supplied unary function to every element in the supplied array of type `A`.\n\n## `map()` for integers\n\nTo make our lives easier we will only work with integers (for now). Below you can find the implementation of the `map()` function that only works with unary operations on integers and integer arrays.  \n\n```language-c\n// Required for the `printf()` function\n#include <stdio.h>\n// Required for memory management\n// (`malloc()`, `free()`, etc.)\n#include <stdlib.h>\n\n// Multiply a number by 3\nint triple(int number) {\n    return number * 3;\n}\n\n// A rather complex function definition, read more about it below\nint* map(int (*function)(int), int* array, int size) {\n    // Allocate memory for our new array\n    int* newArray = malloc(sizeof(int) * size);\n\n    int i;\n    // Apply the function to every element of the supplied\n    // array and save the values into the new array\n    for(i = 0; i < size; i++) {\n        newArray[i] = function(array[i]);\n    }\n\n    // Return the pointer to the new array\n    // (you must free the memory after\n    // you're done working with it)\n    return newArray;\n}\n\nvoid main() {\n    // Initial array of size 4\n    int array[4] = { 1, 2, 3, 4 };\n\n    // Map the array above using the `triple()` function\n    int* tripledArray = map(triple, array, 4);\n\n    int i;\n    // Print the new values\n    for(i = 0; i < 4; i++) {\n        printf(\"%d \", tripledArray[i]);\n    }\n\n    // Don't forget to free the memory afterwards\n    free(tripledArray);\n}\n```\n\nI tried to add comments to all of the important parts but I want to discuss the `map()` function definition separtely. Let's break it down: <code class=\"language-c\">int* map(int (\\*function)(int), int\\* array, int length) {...}</code>\n\n* As in any other function, the first part (`int*`) denotes the return type of our `map()`. In this particular case it's a pointer to an integer array.\n* `map` is simply the function name, nothing fancy here.\n* Now the interesting part - function parameters. There are of them:\n    1. <code class=\"language-c\">int (\\*function)(int)</code> Defines a parameter called `function` that is a pointer to a function accepting one integer and returning an integer.\n    2. <code class=\"language-c\">int\\* array</code> A pointer to an integer array over which we'll be iterating.\n    3. <code class=\"language-c\">int size</code> Integer storing the size of said array.\n\n## Polymorphic `map()`\n\n# We need to go deeper\n\n[](http://stackoverflow.com/questions/840501/how-do-function-pointers-in-c-work)","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>It's not a secret that for almost all people attempting to learn C pointers are a grey area. I personally was struggling quite a lot understanding them but I was saved by a huge amount of amazing guides on pointer usage you can find online. That said, I still feel like implementation of higher order functions in C deserves more exposure that it currently has and this article is my attempt to contribute to this cause.</p>\n\n<blockquote>\n  <p><strong>Note:</strong> In this article I'm gonna assume that you have some experience with C and know what pointers are. Additionally, I will assume you know how to write and compile <code>.c</code> files.</p>\n</blockquote>\n\n<h1 id=\"whatarehigherorderfunctions\">What are higher order functions?</h1>\n\n<p><a href=\"https://en.wikipedia.org/wiki/Higher-order_function\">Higher order functions</a> take other functions as their arguments or return new functions when they terminate. It might sound confusing especially if you've never seen it being done before but in reality it is really quite simple. Consider the pseudocode below:</p>\n\n<pre><code class=\"language-lua\">reverse(string)  \n    -- Some code to reverse the string\n    return string\n\nuppercase(string)  \n    -- Some code to convert string to uppercase\n    return string\n\napply(string, operation)  \n    return operation(string)\n\nhello := \"hello\"\n\n-- Reverse the string\nhello := apply(hello, reverse)\n\n-- Convert the string to uppercase\nhello := apply(hello, uppercase)  \n</code></pre>\n\n<p>To summarise: <code>apply()</code> function above takes 2 parameters: a string and an another function. Then, as the name implies, it applies the <code>operation</code> to the supplied <code>string</code> and returns whatever comes out. This results in a very interesting form of <a href=\"https://en.wikipedia.org/wiki/Polymorphism_(computer_science)\">polymorphism</a>: our <code>apply()</code> function can take any <code>operation</code> regardless of what it does as long as it accepts a string as an argument and returns the string afterwards.</p>\n\n<p>The example above looks at the scenario when a function takes other functions as its arguments. Now let's take a look at functions that return new functions:</p>\n\n<pre><code class=\"language-lua\">multiplyOperation(coefficient)  \n    -- Declare new function that multiplies the\n    -- supplied argument by the coefficient\n    operation(number)\n        return number * coefficient\n    -- Return the new function\n    return operation\n\n-- Function that multiplies everything by 5\nmultiplyBy5 := multiplyOperation(5)\n\n-- This will return 35\nmultipleBy5(7)  \n</code></pre>\n\n<p>As seen above, <code>multiplyOperation()</code> returns a new function that changes its behaviour depending on what value for the <code>coefficient</code> has been supplied to <code>multiplyOperation()</code>. Keep in mind that the examples above are just pseudocode to give you an idea of what higher order functions are about and C implementation will not necessarily look the same.</p>\n\n<h1 id=\"functionpointersinc\">Function pointers in C</h1>\n\n<p>To achieve the functionality discussed in the previous section we're gonna use function pointers, which are pretty straightforward and shouldn't take you too long to wrap your head around. Before we start, remind yourself of these 2 things:</p>\n\n<ul>\n<li>You can get the address of a variable using the <code>&amp;</code> operator, like so: <code class=\"language-c\">int *a = &b;</code> (<code>a</code> can now be used as a pointer to <code>b</code>). That said, when referencing a function you are allowed to drop the <code>&amp;</code> operator. If you still don't have that much experience with pointers, I recommend leaving it in.</li>\n<li>Before you can access the variable a pointer is pointing to, you must dereference said pointer. Let's take integer pointer <code>a</code> from the line above - if I want to use it in a calculation, I need to dereference it using the <code>*</code> operator: <code class=\"language-c\">int c = 3 + *a;</code>.</li>\n</ul>\n\n<pre><code class=\"language-c\">// Required for the `printf()` function\n#include &lt;stdio.h&gt;\n\n// The function we'll be pointing to\nint halve(int number) {  \n    return number / 2;\n}\n\nvoid main() {  \n    // Declare a pointer to the `halve` function\n    // We say that operation takes 1 int argument\n    // and returns an int when it terminates\n    int (*operation)(int) = &amp;halve;\n\n    // Alternatively, you can drop the `&amp;`:\n    int (*anotherOperation)(int) = halve;\n    // From here onwards, I will always drop the\n    // `&amp;` to make the code a bit more concise\n\n    // Dereference the pointer to `halve` first,\n    // then supply relevant arguments to it\n    int halved = (*operation)(10);\n\n    // Should print `5`, try it yourself\n    printf(\"%d\", halved);\n}\n</code></pre>\n\n<p>As you can see in the beginning of the <code>main()</code> method, pointers to functions have a rather unusual type declaration. It consists of 3 parts:</p>\n\n<ol>\n<li>The type before the parenthesis is the return type of the function the pointer is referencing.  </li>\n<li>The middle part, is the name of the pointer. Note that you have to wrap it into parenthesis to indicate that this a pointer to a function.  </li>\n<li>The last part contains the types of parameters the function is expecting.</li>\n</ol>\n\n<p>For example, the type for a pointer to a function that accepts 2 character arrays and returns a double would look as follows: <code class=\"language-c\">double (*someFunction)(char*, char*)</code>. It is possible to go much deeper and, in fact, I'll show you an example in the end of this article.</p>\n\n<h1 id=\"implementingthemapfunction\">Implementing the <code>map()</code> function</h1>\n\n<p>As an exercise, let's implement the <a href=\"https://en.wikipedia.org/wiki/Map_(higher-order_function)\">infamous <code>map()</code> function</a>. This function takes 2 arguments:</p>\n\n<ol>\n<li>Some <a href=\"https://en.wikipedia.org/wiki/Unary_function\">unary function</a> that accepts an argument of type <code>A</code> and returns some value of type <code>B</code>.  </li>\n<li>An array of type <code>A</code>. Keep in mind, type <code>A</code> can be the same as type <code>B</code>.</li>\n</ol>\n\n<p>The return value is a new array of type <code>B</code>. This new array is generated by applying the supplied unary function to every element in the supplied array of type <code>A</code>.</p>\n\n<h2 id=\"mapforintegers\"><code>map()</code> for integers</h2>\n\n<p>To make our lives easier we will only work with integers (for now). Below you can find the implementation of the <code>map()</code> function that only works with unary operations on integers and integer arrays.  </p>\n\n<pre><code class=\"language-c\">// Required for the `printf()` function\n#include &lt;stdio.h&gt;\n// Required for memory management\n// (`malloc()`, `free()`, etc.)\n#include &lt;stdlib.h&gt;\n\n// Multiply a number by 3\nint triple(int number) {  \n    return number * 3;\n}\n\n// A rather complex function definition, read more about it below\nint* map(int (*function)(int), int* array, int size) {  \n    // Allocate memory for our new array\n    int* newArray = malloc(sizeof(int) * size);\n\n    int i;\n    // Apply the function to every element of the supplied\n    // array and save the values into the new array\n    for(i = 0; i &lt; size; i++) {\n        newArray[i] = function(array[i]);\n    }\n\n    // Return the pointer to the new array\n    // (you must free the memory after\n    // you're done working with it)\n    return newArray;\n}\n\nvoid main() {  \n    // Initial array of size 4\n    int array[4] = { 1, 2, 3, 4 };\n\n    // Map the array above using the `triple()` function\n    int* tripledArray = map(triple, array, 4);\n\n    int i;\n    // Print the new values\n    for(i = 0; i &lt; 4; i++) {\n        printf(\"%d \", tripledArray[i]);\n    }\n\n    // Don't forget to free the memory afterwards\n    free(tripledArray);\n}\n</code></pre>\n\n<p>I tried to add comments to all of the important parts but I want to discuss the <code>map()</code> function definition separtely. Let's break it down: <code class=\"language-c\">int* map(int (*function)(int), int* array, int length) {...}</code></p>\n\n<ul>\n<li>As in any other function, the first part (<code>int*</code>) denotes the return type of our <code>map()</code>. In this particular case it's a pointer to an integer array.</li>\n<li><code>map</code> is simply the function name, nothing fancy here.</li>\n<li>Now the interesting part - function parameters. There are of them:\n<ol><li><code class=\"language-c\">int (*function)(int)</code> Defines a parameter called <code>function</code> that is a pointer to a function accepting one integer and returning an integer.</li>\n<li><code class=\"language-c\">int* array</code> A pointer to an integer array over which we'll be iterating.</li>\n<li><code class=\"language-c\">int size</code> Integer storing the size of said array.</li></ol></li>\n</ul>\n\n<h2 id=\"polymorphicmap\">Polymorphic <code>map()</code></h2>\n\n<h1 id=\"weneedtogodeeper\">We need to go deeper</h1>\n\n<p><a href=\"http://stackoverflow.com/questions/840501/how-do-function-pointers-in-c-work\"></a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-25 23:26:01","created_by":1,"updated_at":"2016-09-02 15:07:06","updated_by":1,"published_at":"2016-08-25 23:26:07","published_by":1,"amp":null},{"id":5,"uuid":"b32960e8-cecb-4038-9b6b-f58c481db105","title":"Hello?","slug":"hello","markdown":"<div>\n\n<div class=\"icon-set Mirana\">\n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">PotM Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Mirana\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/545g3122gm7bgrw/PotM_Custom_Icons_0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/545g3122gm7bgrw/PotM_Custom_Icons_0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://blog.sina.com.cn/s/blog_56d6c0c80101l5jz.html\"\n                                                target=\"_blank\">Ji Zhang</a></div>\n    </div>\n</div>\n<div class=\"icon-set Lanaya\">\n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Lanaya Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Lanaya\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/b4p935o7n5dvy43/Lanaya_Custom_Icons_0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/b4p935o7n5dvy43/Lanaya_Custom_Icons_0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/4.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/5.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/6.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/7.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://steamcommunity.com/sharedfiles/filedetails/?id=332982547\"\n                                                target=\"_blank\">Yi</a> and <a\n                href=\"http://dota.joyreactor.cc/post/966589\" target=\"_blank\">A.Spitfire</a></div>\n    </div>\n</div>\n<div class=\"icon-set Pugna\">\n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Pugna Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Pugna\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/rcf6vuzx0d7004v/Pugna_Custom_Icons_0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/rcf6vuzx0d7004v/Pugna_Custom_Icons_0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://mrscrake.deviantart.com/art/Dota-2-Pugna-289973383\"\n                                                target=\"_blank\">MrScrake</a></div>\n    </div>\n</div>\n<div class=\"icon-set Kunkka\">\n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Kunkka Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Kunkka\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/2tidv112aauot3y/Kunkka-Custom-Icons-0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/2tidv112aauot3y/Kunkka-Custom-Icons-0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://mikeazevedo.deviantart.com/art/DOTA-2-KUNKKA-407720534\"\n                                                target=\"_blank\">Mike Azevedo</a> and <a\n                href=\"http://rosolino.deviantart.com/art/Dota2-Kunkka-Fanart-425546582\" target=\"_blank\">Rosolino</a>\n        </div>\n    </div>\n</div>\n<div class=\"icon-set Slark\">\n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Slark Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.2</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Slark\" data-version=\"0-2\">v0.2</div>\n                    <div class=\"option\" data-slug=\"Slark\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/xc6t1xdd43q58xj/Slark_Custom_Icons_0.2.zip\" class=\"download\">Download\n                v0.2</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-2 active\"\n                 data-link=\"http://www.mediafire.com/download/xc6t1xdd43q58xj/Slark_Custom_Icons_0.2.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/4.png');\"></div>\n            </div>\n            <div class=\"version version-0-1\"\n                 data-link=\"http://www.mediafire.com/download/ec9rk3b46ih7xv8/Slark_Custom_Icons_0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.1/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://swedeyart.deviantart.com/art/Slark-410729987\"\n                                                target=\"_blank\">SwedeyArt</a></div>\n    </div>\n</div>\n\n<div>\n<style>\nbody {\n  background-color: #000;\n  margin: 0;\n}\n\n#wrapper {\n  margin: 0 auto;\n  width: 960px;\n}\n\n#content {\n  padding: 0;\n}\n\n.display {\n  position: relative;\n  height: 250px;\n}\n.display .front {\n  position: absolute;\n  z-index: 888;\n  height: 100%;\n  width: 100%;\n  left: 0;\n  top: 0;\n}\n\n.info {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/background.png\");\n  border-top: solid 1px rgba(255, 255, 255, 0.1);\n  border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n  font-family: Trebuchet MS;\n  -webkit-box-shadow: #000 0 0 10px;\n  -moz-box-shadow: #000 0 0 10px;\n  box-shadow: #000 0 0 10px;\n  padding: 10px 20px 20px 20px;\n  border-radius: 5px;\n  position: relative;\n  z-index: 999;\n}\n.info .bar {\n  text-align: center;\n}\n.info .name {\n  text-shadow: #000 0 3px 0, #000 0 2px 0, #000 0 1px 0;\n  padding: 10px 10px 0 10px;\n  display: inline-block;\n  letter-spacing: 1px;\n  line-height: 30px;\n  font-size: 20px;\n  height: 30px;\n  color: #eee;\n}\n.info .version-picker, .info .download {\n  -webkit-transition: background-color 400ms ease;\n  -moz-transition: background-color 400ms ease;\n  -o-transition: background-color 400ms ease;\n  transition: background-color 400ms ease;\n  background-color: rgba(0, 0, 0, 0.2);\n  text-decoration: none;\n  display: inline-block;\n  line-height: 40px;\n  padding: 0 15px;\n  margin: 0 10px;\n  height: 40px;\n  color: #ccc;\n}\n.info .version-picker:hover, .info .download:hover {\n  background-color: rgba(0, 0, 0, 0.4);\n}\n.info .version-picker {\n  position: relative;\n  min-width: 35px;\n  cursor: pointer;\n}\n.info .version-picker:hover .options {\n  visibility: visible;\n  opacity: 1;\n}\n.info .version-picker .options {\n  -webkit-transition: opacity 400ms ease;\n  -moz-transition: opacity 400ms ease;\n  -o-transition: opacity 400ms ease;\n  transition: opacity 400ms ease;\n  text-align: center;\n  visibility: hidden;\n  position: absolute;\n  z-index: 888;\n  opacity: 0;\n  top: 100%;\n  left: 0;\n}\n.info .version-picker .options .option {\n  -webkit-transition: background-color 400ms ease;\n  -moz-transition: background-color 400ms ease;\n  -o-transition: background-color 400ms ease;\n  transition: background-color 400ms ease;\n  background-color: rgba(0, 0, 0, 0.4);\n  line-height: 40px;\n  margin: 1px 0 0 0;\n  min-width: 35px;\n  padding: 0 15px;\n  cursor: pointer;\n  height: 40px;\n}\n.info .version-picker .options .option:hover {\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.info .artists {\n  text-shadow: #000 0 2px 0, #000 0 1px 0;\n  letter-spacing: 1px;\n  text-align: center;\n  font-size: 16px;\n  color: #888;\n}\n.info .artists a {\n  text-decoration: none;\n  color: #aaa;\n}\n.info .artists a:hover {\n  text-decoration: underline;\n}\n.info .preview {\n  position: relative;\n  padding: 10px 0;\n  height: 148px;\n}\n.info .preview .version {\n  -webkit-transition: opacity 400ms ease;\n  -moz-transition: opacity 400ms ease;\n  -o-transition: opacity 400ms ease;\n  transition: opacity 400ms ease;\n  text-align: center;\n  position: absolute;\n  padding: 10px 0;\n  height: 148px;\n  width: 100%;\n  opacity: 0;\n  left: 0;\n  top: 0;\n}\n.info .preview .version.active {\n  opacity: 1;\n}\n.info .preview .version .icon {\n  -webkit-box-shadow: inset rgba(255, 255, 255, 0.2) 4px 5px 5px -5px, inset rgba(0, 0, 0, 0.6) -4px -5px 5px -5px, #000 0 5px 10px;\n  -moz-box-shadow: inset rgba(255, 255, 255, 0.2) 4px 5px 5px -5px, inset rgba(0, 0, 0, 0.6) -4px -5px 5px -5px, #000 0 5px 10px;\n  box-shadow: inset rgba(255, 255, 255, 0.2) 4px 5px 5px -5px, inset rgba(0, 0, 0, 0.6) -4px -5px 5px -5px, #000 0 5px 10px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  display: inline-block;\n  height: 128px;\n  width: 128px;\n  margin: 10px;\n}\n\n#instructions {\n  font-family: Trebuchet MS;\n  padding: 60px 0 100px 0;\n  color: #ccc;\n}\n#instructions h1 {\n  text-align: center;\n  font-size: 24px;\n}\n#instructions ol {\n  margin: 0 auto;\n  width: 500px;\n}\n#instructions ol li {\n  line-height: 26px;\n  font-size: 16px;\n  margin: 15px 0;\n}\n#instructions code {\n  background-color: #111;\n  display: inline-block;\n  padding: 0px 4px;\n  margin: 2px 2px;\n}\n\n.Mirana .display {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-back.png\");\n}\n.Mirana .display .front {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-front.png\");\n}\n.Mirana .display:before, .Mirana .display:after {\n  background-repeat: repeat-x;\n  background-size: contain;\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 777;\n  content: \"\";\n  width: 100%;\n  top: 0;\n}\n.Mirana .display:before {\n  -webkit-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  -moz-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-clouds-back.png\");\n  -webkit-animation: mirana-front 40s linear 0s infinite;\n  -moz-animation: mirana-front 40s linear 0s infinite;\n  -o-animation: mirana-front 40s linear 0s infinite;\n  animation: mirana-front 40s linear 0s infinite;\n  background-position: 0 -50px;\n}\n.Mirana .display:after {\n  -webkit-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  -moz-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-clouds-front.png\");\n  -webkit-animation: mirana-front 80s linear 0s infinite;\n  -moz-animation: mirana-front 80s linear 0s infinite;\n  -o-animation: mirana-front 80s linear 0s infinite;\n  animation: mirana-front 80s linear 0s infinite;\n  background-position: 0 -50px;\n}\n\n@-o-keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n@-moz-keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n@-webkit-keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n@keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n.Lanaya .display {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-back.png\");\n}\n.Lanaya .display .front {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-front.png\");\n  z-index: 777;\n}\n.Lanaya .display:before, .Lanaya .display:after {\n  background-repeat: no-repeat;\n  background-size: contain;\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 888;\n  content: \"\";\n  width: 100%;\n  top: 0;\n}\n.Lanaya .display:before {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-particles-front.png\");\n  -webkit-animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n  -moz-animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n  -o-animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n  animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n}\n.Lanaya .display:after {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-particles-back.png\");\n  -webkit-animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n  -moz-animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n  -o-animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n  animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n}\n.Lanaya .info .preview {\n  height: 120px;\n}\n.Lanaya .info .preview .version {\n  height: 120px;\n}\n.Lanaya .info .preview .version .icon {\n  height: 100px;\n  width: 100px;\n}\n\n@-o-keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n@-moz-keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n@-webkit-keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n@keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n.Pugna .display {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-back.png\");\n}\n.Pugna .display .front {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-front.png\");\n}\n.Pugna .display:before, .Pugna .display:after {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-dust.png\");\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 777;\n  content: \"\";\n  width: 50%;\n  top: 0;\n}\n.Pugna .display:before {\n  -webkit-animation: pugna-left 14s linear 0s infinite;\n  -moz-animation: pugna-left 14s linear 0s infinite;\n  -o-animation: pugna-left 14s linear 0s infinite;\n  animation: pugna-left 14s linear 0s infinite;\n  -webkit-box-shadow: inset #000 300px 0 250px -100px;\n  -moz-box-shadow: inset #000 300px 0 250px -100px;\n  box-shadow: inset #000 300px 0 250px -100px;\n  left: 0;\n}\n.Pugna .display:after {\n  -webkit-animation: pugna-right 14s linear 0s infinite;\n  -moz-animation: pugna-right 14s linear 0s infinite;\n  -o-animation: pugna-right 14s linear 0s infinite;\n  animation: pugna-right 14s linear 0s infinite;\n  -webkit-box-shadow: inset #000 -300px 0 250px -100px;\n  -moz-box-shadow: inset #000 -300px 0 250px -100px;\n  box-shadow: inset #000 -300px 0 250px -100px;\n  right: 0;\n}\n\n@-o-keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@-moz-keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@-webkit-keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@-o-keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n@-moz-keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n@-webkit-keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n@keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n.Kunkka .display {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-back.png\");\n  overflow: hidden;\n}\n.Kunkka .display .front {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-front.png\");\n}\n.Kunkka .display:before {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-light.png\");\n  -webkit-animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  -moz-animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  -o-animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  position: absolute;\n  display: block;\n  height: 670px;\n  width: 1024px;\n  z-index: 777;\n  content: \"\";\n  top: -200px;\n}\n.Kunkka .display:after {\n  -webkit-box-shadow: inset #000 -350px 0 200px -100px, inset #000 350px 0 200px -100px;\n  -moz-box-shadow: inset #000 -350px 0 200px -100px, inset #000 350px 0 200px -100px;\n  box-shadow: inset #000 -350px 0 200px -100px, inset #000 350px 0 200px -100px;\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 778;\n  content: \"\";\n  width: 100%;\n  top: 0;\n}\n\n@-o-keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n@-moz-keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n@-webkit-keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n@keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n.Slark .display {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Slark/slark-back.png\");\n}\n.Slark .display .front {\n  -webkit-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  -moz-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Slark/slark-rain.png\");\n  -webkit-animation: slark-front 2s linear 0s infinite;\n  -moz-animation: slark-front 2s linear 0s infinite;\n  -o-animation: slark-front 2s linear 0s infinite;\n  animation: slark-front 2s linear 0s infinite;\n}\n\n@-o-keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n@-moz-keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n@-webkit-keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n@keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n</style>\n</div>\n\n</div>","mobiledoc":null,"html":"<div>\n\n<div class=\"icon-set Mirana\">  \n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">PotM Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Mirana\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/545g3122gm7bgrw/PotM_Custom_Icons_0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/545g3122gm7bgrw/PotM_Custom_Icons_0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://blog.sina.com.cn/s/blog_56d6c0c80101l5jz.html\"\n                                                target=\"_blank\">Ji Zhang</a></div>\n    </div>\n</div>  \n\n<div class=\"icon-set Lanaya\">  \n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Lanaya Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Lanaya\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/b4p935o7n5dvy43/Lanaya_Custom_Icons_0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/b4p935o7n5dvy43/Lanaya_Custom_Icons_0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/4.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/5.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/6.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/7.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://steamcommunity.com/sharedfiles/filedetails/?id=332982547\"\n                                                target=\"_blank\">Yi</a> and <a\n                href=\"http://dota.joyreactor.cc/post/966589\" target=\"_blank\">A.Spitfire</a></div>\n    </div>\n</div>  \n\n<div class=\"icon-set Pugna\">  \n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Pugna Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Pugna\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/rcf6vuzx0d7004v/Pugna_Custom_Icons_0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/rcf6vuzx0d7004v/Pugna_Custom_Icons_0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://mrscrake.deviantart.com/art/Dota-2-Pugna-289973383\"\n                                                target=\"_blank\">MrScrake</a></div>\n    </div>\n</div>  \n\n<div class=\"icon-set Kunkka\">  \n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Kunkka Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Kunkka\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/2tidv112aauot3y/Kunkka-Custom-Icons-0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/2tidv112aauot3y/Kunkka-Custom-Icons-0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://mikeazevedo.deviantart.com/art/DOTA-2-KUNKKA-407720534\"\n                                                target=\"_blank\">Mike Azevedo</a> and <a\n                href=\"http://rosolino.deviantart.com/art/Dota2-Kunkka-Fanart-425546582\" target=\"_blank\">Rosolino</a>\n        </div>\n    </div>\n</div>  \n\n<div class=\"icon-set Slark\">  \n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Slark Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.2</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Slark\" data-version=\"0-2\">v0.2</div>\n                    <div class=\"option\" data-slug=\"Slark\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/xc6t1xdd43q58xj/Slark_Custom_Icons_0.2.zip\" class=\"download\">Download\n                v0.2</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-2 active\"\n                 data-link=\"http://www.mediafire.com/download/xc6t1xdd43q58xj/Slark_Custom_Icons_0.2.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/4.png');\"></div>\n            </div>\n            <div class=\"version version-0-1\"\n                 data-link=\"http://www.mediafire.com/download/ec9rk3b46ih7xv8/Slark_Custom_Icons_0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.1/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://swedeyart.deviantart.com/art/Slark-410729987\"\n                                                target=\"_blank\">SwedeyArt</a></div>\n    </div>\n</div>\n\n<div>  \n<style>  \nbody {  \n  background-color: #000;\n  margin: 0;\n}\n\n#wrapper {\n  margin: 0 auto;\n  width: 960px;\n}\n\n#content {\n  padding: 0;\n}\n\n.display {\n  position: relative;\n  height: 250px;\n}\n.display .front {\n  position: absolute;\n  z-index: 888;\n  height: 100%;\n  width: 100%;\n  left: 0;\n  top: 0;\n}\n\n.info {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/background.png\">http://timbo.kz/images/Dota-2-Icons/background.png</a>\");\n  border-top: solid 1px rgba(255, 255, 255, 0.1);\n  border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n  font-family: Trebuchet MS;\n  -webkit-box-shadow: #000 0 0 10px;\n  -moz-box-shadow: #000 0 0 10px;\n  box-shadow: #000 0 0 10px;\n  padding: 10px 20px 20px 20px;\n  border-radius: 5px;\n  position: relative;\n  z-index: 999;\n}\n.info .bar {\n  text-align: center;\n}\n.info .name {\n  text-shadow: #000 0 3px 0, #000 0 2px 0, #000 0 1px 0;\n  padding: 10px 10px 0 10px;\n  display: inline-block;\n  letter-spacing: 1px;\n  line-height: 30px;\n  font-size: 20px;\n  height: 30px;\n  color: #eee;\n}\n.info .version-picker, .info .download {\n  -webkit-transition: background-color 400ms ease;\n  -moz-transition: background-color 400ms ease;\n  -o-transition: background-color 400ms ease;\n  transition: background-color 400ms ease;\n  background-color: rgba(0, 0, 0, 0.2);\n  text-decoration: none;\n  display: inline-block;\n  line-height: 40px;\n  padding: 0 15px;\n  margin: 0 10px;\n  height: 40px;\n  color: #ccc;\n}\n.info .version-picker:hover, .info .download:hover {\n  background-color: rgba(0, 0, 0, 0.4);\n}\n.info .version-picker {\n  position: relative;\n  min-width: 35px;\n  cursor: pointer;\n}\n.info .version-picker:hover .options {\n  visibility: visible;\n  opacity: 1;\n}\n.info .version-picker .options {\n  -webkit-transition: opacity 400ms ease;\n  -moz-transition: opacity 400ms ease;\n  -o-transition: opacity 400ms ease;\n  transition: opacity 400ms ease;\n  text-align: center;\n  visibility: hidden;\n  position: absolute;\n  z-index: 888;\n  opacity: 0;\n  top: 100%;\n  left: 0;\n}\n.info .version-picker .options .option {\n  -webkit-transition: background-color 400ms ease;\n  -moz-transition: background-color 400ms ease;\n  -o-transition: background-color 400ms ease;\n  transition: background-color 400ms ease;\n  background-color: rgba(0, 0, 0, 0.4);\n  line-height: 40px;\n  margin: 1px 0 0 0;\n  min-width: 35px;\n  padding: 0 15px;\n  cursor: pointer;\n  height: 40px;\n}\n.info .version-picker .options .option:hover {\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.info .artists {\n  text-shadow: #000 0 2px 0, #000 0 1px 0;\n  letter-spacing: 1px;\n  text-align: center;\n  font-size: 16px;\n  color: #888;\n}\n.info .artists a {\n  text-decoration: none;\n  color: #aaa;\n}\n.info .artists a:hover {\n  text-decoration: underline;\n}\n.info .preview {\n  position: relative;\n  padding: 10px 0;\n  height: 148px;\n}\n.info .preview .version {\n  -webkit-transition: opacity 400ms ease;\n  -moz-transition: opacity 400ms ease;\n  -o-transition: opacity 400ms ease;\n  transition: opacity 400ms ease;\n  text-align: center;\n  position: absolute;\n  padding: 10px 0;\n  height: 148px;\n  width: 100%;\n  opacity: 0;\n  left: 0;\n  top: 0;\n}\n.info .preview .version.active {\n  opacity: 1;\n}\n.info .preview .version .icon {\n  -webkit-box-shadow: inset rgba(255, 255, 255, 0.2) 4px 5px 5px -5px, inset rgba(0, 0, 0, 0.6) -4px -5px 5px -5px, #000 0 5px 10px;\n  -moz-box-shadow: inset rgba(255, 255, 255, 0.2) 4px 5px 5px -5px, inset rgba(0, 0, 0, 0.6) -4px -5px 5px -5px, #000 0 5px 10px;\n  box-shadow: inset rgba(255, 255, 255, 0.2) 4px 5px 5px -5px, inset rgba(0, 0, 0, 0.6) -4px -5px 5px -5px, #000 0 5px 10px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  display: inline-block;\n  height: 128px;\n  width: 128px;\n  margin: 10px;\n}\n\n#instructions {\n  font-family: Trebuchet MS;\n  padding: 60px 0 100px 0;\n  color: #ccc;\n}\n#instructions h1 {\n  text-align: center;\n  font-size: 24px;\n}\n#instructions ol {\n  margin: 0 auto;\n  width: 500px;\n}\n#instructions ol li {\n  line-height: 26px;\n  font-size: 16px;\n  margin: 15px 0;\n}\n#instructions code {\n  background-color: #111;\n  display: inline-block;\n  padding: 0px 4px;\n  margin: 2px 2px;\n}\n\n.Mirana .display {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-back.png\">http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-back.png</a>\");\n}\n.Mirana .display .front {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-front.png\">http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-front.png</a>\");\n}\n.Mirana .display:before, .Mirana .display:after {\n  background-repeat: repeat-x;\n  background-size: contain;\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 777;\n  content: \"\";\n  width: 100%;\n  top: 0;\n}\n.Mirana .display:before {\n  -webkit-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  -moz-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-clouds-back.png\">http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-clouds-back.png</a>\");\n  -webkit-animation: mirana-front 40s linear 0s infinite;\n  -moz-animation: mirana-front 40s linear 0s infinite;\n  -o-animation: mirana-front 40s linear 0s infinite;\n  animation: mirana-front 40s linear 0s infinite;\n  background-position: 0 -50px;\n}\n.Mirana .display:after {\n  -webkit-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  -moz-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-clouds-front.png\">http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-clouds-front.png</a>\");\n  -webkit-animation: mirana-front 80s linear 0s infinite;\n  -moz-animation: mirana-front 80s linear 0s infinite;\n  -o-animation: mirana-front 80s linear 0s infinite;\n  animation: mirana-front 80s linear 0s infinite;\n  background-position: 0 -50px;\n}\n\n@-o-keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n@-moz-keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n@-webkit-keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n@keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n.Lanaya .display {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-back.png\">http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-back.png</a>\");\n}\n.Lanaya .display .front {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-front.png\">http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-front.png</a>\");\n  z-index: 777;\n}\n.Lanaya .display:before, .Lanaya .display:after {\n  background-repeat: no-repeat;\n  background-size: contain;\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 888;\n  content: \"\";\n  width: 100%;\n  top: 0;\n}\n.Lanaya .display:before {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-particles-front.png\">http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-particles-front.png</a>\");\n  -webkit-animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n  -moz-animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n  -o-animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n  animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n}\n.Lanaya .display:after {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-particles-back.png\">http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-particles-back.png</a>\");\n  -webkit-animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n  -moz-animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n  -o-animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n  animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n}\n.Lanaya .info .preview {\n  height: 120px;\n}\n.Lanaya .info .preview .version {\n  height: 120px;\n}\n.Lanaya .info .preview .version .icon {\n  height: 100px;\n  width: 100px;\n}\n\n@-o-keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n@-moz-keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n@-webkit-keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n@keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n.Pugna .display {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-back.png\">http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-back.png</a>\");\n}\n.Pugna .display .front {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-front.png\">http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-front.png</a>\");\n}\n.Pugna .display:before, .Pugna .display:after {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-dust.png\">http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-dust.png</a>\");\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 777;\n  content: \"\";\n  width: 50%;\n  top: 0;\n}\n.Pugna .display:before {\n  -webkit-animation: pugna-left 14s linear 0s infinite;\n  -moz-animation: pugna-left 14s linear 0s infinite;\n  -o-animation: pugna-left 14s linear 0s infinite;\n  animation: pugna-left 14s linear 0s infinite;\n  -webkit-box-shadow: inset #000 300px 0 250px -100px;\n  -moz-box-shadow: inset #000 300px 0 250px -100px;\n  box-shadow: inset #000 300px 0 250px -100px;\n  left: 0;\n}\n.Pugna .display:after {\n  -webkit-animation: pugna-right 14s linear 0s infinite;\n  -moz-animation: pugna-right 14s linear 0s infinite;\n  -o-animation: pugna-right 14s linear 0s infinite;\n  animation: pugna-right 14s linear 0s infinite;\n  -webkit-box-shadow: inset #000 -300px 0 250px -100px;\n  -moz-box-shadow: inset #000 -300px 0 250px -100px;\n  box-shadow: inset #000 -300px 0 250px -100px;\n  right: 0;\n}\n\n@-o-keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@-moz-keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@-webkit-keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@-o-keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n@-moz-keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n@-webkit-keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n@keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n.Kunkka .display {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-back.png\">http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-back.png</a>\");\n  overflow: hidden;\n}\n.Kunkka .display .front {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-front.png\">http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-front.png</a>\");\n}\n.Kunkka .display:before {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-light.png\">http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-light.png</a>\");\n  -webkit-animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  -moz-animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  -o-animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  position: absolute;\n  display: block;\n  height: 670px;\n  width: 1024px;\n  z-index: 777;\n  content: \"\";\n  top: -200px;\n}\n.Kunkka .display:after {\n  -webkit-box-shadow: inset #000 -350px 0 200px -100px, inset #000 350px 0 200px -100px;\n  -moz-box-shadow: inset #000 -350px 0 200px -100px, inset #000 350px 0 200px -100px;\n  box-shadow: inset #000 -350px 0 200px -100px, inset #000 350px 0 200px -100px;\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 778;\n  content: \"\";\n  width: 100%;\n  top: 0;\n}\n\n@-o-keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n@-moz-keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n@-webkit-keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n@keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n.Slark .display {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Slark/slark-back.png\">http://timbo.kz/images/Dota-2-Icons/Slark/slark-back.png</a>\");\n}\n.Slark .display .front {\n  -webkit-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  -moz-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Slark/slark-rain.png\">http://timbo.kz/images/Dota-2-Icons/Slark/slark-rain.png</a>\");\n  -webkit-animation: slark-front 2s linear 0s infinite;\n  -moz-animation: slark-front 2s linear 0s infinite;\n  -o-animation: slark-front 2s linear 0s infinite;\n  animation: slark-front 2s linear 0s infinite;\n}\n\n@-o-keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n@-moz-keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n@-webkit-keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n@keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n</style>  \n</div>\n\n<p></div></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-27 18:51:47","created_by":1,"updated_at":"2016-09-01 21:30:49","updated_by":1,"published_at":"2016-08-27 18:51:53","published_by":1,"amp":null},{"id":6,"uuid":"77d5af3f-8484-477c-82ab-4eaede7d1e78","title":"Some post!","slug":"some-post","markdown":"# Abstract\n\nIt's not a secret that for almost all people attempting to learn C pointers are a grey area. I personally was struggling quite a lot understanding them but I was saved by a huge amount of amazing guides on pointer usage you can find online. That said, I still feel like implementation of higher order functions in C deserves more exposure that it currently has and this article is my attempt to contribute to this cause.\n\n> **Note:** In this article I'm gonna assume that you have some experience with C and know what pointers are. Additionally, I will assume you know how to write and compile `.c` files.\n\n# What are higher order functions?\n\n[Higher order functions](https://en.wikipedia.org/wiki/Higher-order_function) take other functions as their arguments or return new functions when they terminate. It might sound confusing especially if you've never seen it being done before but in reality it is really quite simple. Consider the pseudocode below:\n\n```language-lua\nreverse(string)\n    -- Some code to reverse the string\n    return string\n\nuppercase(string)\n    -- Some code to convert string to uppercase\n    return string\n\napply(string, operation)\n    return operation(string)\n\nhello := \"hello\"\n\n-- Reverse the string\nhello := apply(hello, reverse)\n\n-- Convert the string to uppercase\nhello := apply(hello, uppercase)\n```\n\nTo summarise: `apply()` function above takes 2 parameters: a string and an another function. Then, as the name implies, it applies the `operation` to the supplied `string` and returns whatever comes out. This results in a very interesting form of [polymorphism](https://en.wikipedia.org/wiki/Polymorphism_(computer_science)): our `apply()` function can take any `operation` regardless of what it does as long as it accepts a string as an argument and returns the string afterwards.\n\nThe example above looks at the scenario when a function takes other functions as its arguments. Now let's take a look at functions that return new functions:\n\n```language-lua\nmultiplyOperation(coefficient)\n    -- Declare new function that multiplies the\n    -- supplied argument by the coefficient\n    operation(number)\n        return number * coefficient\n    -- Return the new function\n    return operation\n\n-- Function that multiplies everything by 5\nmultiplyBy5 := multiplyOperation(5)\n\n-- This will return 35\nmultipleBy5(7)\n```\n\nAs seen above, `multiplyOperation()` returns a new function that changes its behaviour depending on what value for the `coefficient` has been supplied to `multiplyOperation()`. Keep in mind that the examples above are just pseudocode to give you an idea of what higher order functions are about and C implementation will not necessarily look the same.\n\n# Function pointers in C\n\nTo achieve the functionality discussed in the previous section we're gonna use function pointers, which are pretty straightforward and shouldn't take you too long to wrap your head around. Before we start, remind yourself of these 2 things:\n\n* You can get the address of a variable using the `&` operator, like so: <code class=\"language-c\">int *a = &b;</code> (`a` can now be used as a pointer to `b`). That said, when referencing a function you are allowed to drop the `&` operator. If you still don't have that much experience with pointers, I recommend leaving it in.\n* Before you can access the variable a pointer is pointing to, you must dereference said pointer. Let's take integer pointer `a` from the line above - if I want to use it in a calculation, I need to dereference it using the `*` operator: <code class=\"language-c\">int c = 3 + *a;</code>.\n\n```language-c\n// The function we'll be pointing to\nint halve(int number) {\n    return number / 2;\n}\n\nvoid main() {\n    // Declare a pointer to the `halve` function\n    // We say that operation takes 1 int argument\n    // and returns an int when it terminates\n    int (*operation)(int) = &halve;\n\n    // Alternatively, you can drop the `&`:\n    int (*anotherOperation)(int) = halve;\n    // From here on onwards, I will always\n    // drop the `&` to make the code a bit\n    // more concise\n\n    // Dereference the pointer to `halve` first,\n    // then supply relevant arguments to it\n    int halved = (*operation)(10);\n\n    // Should print `5`, try it yourself\n    printf(\"%d\", halved);\n}\n```\n\nAs you can see in the beginning of the `main()` method, pointers to functions have a rather unusual type declaration. It consists of 3 parts:\n\n1. The type before the parenthesis is the return type of the function the pointer is referencing. \n2. The middle part, is the name of the pointer. Note that you have to wrap it into parenthesis to indicate that this a pointer to a function.\n3. The last part contains the types of parameters the function is expecting.\n\nFor example, the type for a pointer to a function that accepts 2 character arrays and returns a double would look as follows: <code class=\"language-c\">double (\\*someFunction)(char\\*, char\\*)</code>. It is possible to go much deeper and, in fact, I'll show you an example in the end of this article.\n\n# Implementing the `map()` function\n\nAs an exercise, let's implement the [infamous `map()` function](https://en.wikipedia.org/wiki/Map_(higher-order_function)). This function takes 2 arguments:\n\n1. Some [unary function](https://en.wikipedia.org/wiki/Unary_function) that accepts an argument of type `A` and returns some value of type `B`.\n2. An array of type `A`. Keep in mind, type `A` can be the same as type `B`.\n\nThe return value is a new array of type `B`. This new array is generated by applying the supplied unary function to every element in the supplied array of type `A`.\n\n## `map()` for integers\n\nWe'll begin by implementing a map function that only works with integers to make it easier for ourselves.\n\n```language-c\n#include <stdio.h>\n#include <stdlib.h>\n\n// Multiply a number by 3\nint triple(int number) {\n    return number * 3;\n}\n\nint* map(int (*function)(int), int* array, int length) {\n    // Allocate memory for our new array\n    int* newArray = malloc(sizeof(int) * length);\n    int i;\n    // Apply the function to every element of the supplied\n    // array and save the values into the new array\n    for(i = 0; i < length; i++) {\n        newArray[i] = function(array[i]);\n    }\n    // Return the pointer to the new array\n    // (you must `free()` the memory afterwards)\n    return newArray;\n}\n\nvoid main() {\n    // Initial array of length 4\n    int array[4] = { 1, 2, 3, 4 };\n    // Map the array above using the `triple()` function\n    int* tripledArray = map(triple, array, 4);\n    int i;\n    // Print the new values\n    for(i = 0; i < 4; i++) {\n        printf(\"%d \", tripledArray[i]);\n    }\n    // Don't forget to the free the memory afterwards\n    free(tripledArray);\n}\n```\n\n## Polymorhpic map\n\n# We need to go deeper\n\n[](http://stackoverflow.com/questions/840501/how-do-function-pointers-in-c-work)","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>It's not a secret that for almost all people attempting to learn C pointers are a grey area. I personally was struggling quite a lot understanding them but I was saved by a huge amount of amazing guides on pointer usage you can find online. That said, I still feel like implementation of higher order functions in C deserves more exposure that it currently has and this article is my attempt to contribute to this cause.</p>\n\n<blockquote>\n  <p><strong>Note:</strong> In this article I'm gonna assume that you have some experience with C and know what pointers are. Additionally, I will assume you know how to write and compile <code>.c</code> files.</p>\n</blockquote>\n\n<h1 id=\"whatarehigherorderfunctions\">What are higher order functions?</h1>\n\n<p><a href=\"https://en.wikipedia.org/wiki/Higher-order_function\">Higher order functions</a> take other functions as their arguments or return new functions when they terminate. It might sound confusing especially if you've never seen it being done before but in reality it is really quite simple. Consider the pseudocode below:</p>\n\n<pre><code class=\"language-lua\">reverse(string)  \n    -- Some code to reverse the string\n    return string\n\nuppercase(string)  \n    -- Some code to convert string to uppercase\n    return string\n\napply(string, operation)  \n    return operation(string)\n\nhello := \"hello\"\n\n-- Reverse the string\nhello := apply(hello, reverse)\n\n-- Convert the string to uppercase\nhello := apply(hello, uppercase)  \n</code></pre>\n\n<p>To summarise: <code>apply()</code> function above takes 2 parameters: a string and an another function. Then, as the name implies, it applies the <code>operation</code> to the supplied <code>string</code> and returns whatever comes out. This results in a very interesting form of <a href=\"https://en.wikipedia.org/wiki/Polymorphism_(computer_science)\">polymorphism</a>: our <code>apply()</code> function can take any <code>operation</code> regardless of what it does as long as it accepts a string as an argument and returns the string afterwards.</p>\n\n<p>The example above looks at the scenario when a function takes other functions as its arguments. Now let's take a look at functions that return new functions:</p>\n\n<pre><code class=\"language-lua\">multiplyOperation(coefficient)  \n    -- Declare new function that multiplies the\n    -- supplied argument by the coefficient\n    operation(number)\n        return number * coefficient\n    -- Return the new function\n    return operation\n\n-- Function that multiplies everything by 5\nmultiplyBy5 := multiplyOperation(5)\n\n-- This will return 35\nmultipleBy5(7)  \n</code></pre>\n\n<p>As seen above, <code>multiplyOperation()</code> returns a new function that changes its behaviour depending on what value for the <code>coefficient</code> has been supplied to <code>multiplyOperation()</code>. Keep in mind that the examples above are just pseudocode to give you an idea of what higher order functions are about and C implementation will not necessarily look the same.</p>\n\n<h1 id=\"functionpointersinc\">Function pointers in C</h1>\n\n<p>To achieve the functionality discussed in the previous section we're gonna use function pointers, which are pretty straightforward and shouldn't take you too long to wrap your head around. Before we start, remind yourself of these 2 things:</p>\n\n<ul>\n<li>You can get the address of a variable using the <code>&amp;</code> operator, like so: <code class=\"language-c\">int *a = &b;</code> (<code>a</code> can now be used as a pointer to <code>b</code>). That said, when referencing a function you are allowed to drop the <code>&amp;</code> operator. If you still don't have that much experience with pointers, I recommend leaving it in.</li>\n<li>Before you can access the variable a pointer is pointing to, you must dereference said pointer. Let's take integer pointer <code>a</code> from the line above - if I want to use it in a calculation, I need to dereference it using the <code>*</code> operator: <code class=\"language-c\">int c = 3 + *a;</code>.</li>\n</ul>\n\n<pre><code class=\"language-c\">// The function we'll be pointing to\nint halve(int number) {  \n    return number / 2;\n}\n\nvoid main() {  \n    // Declare a pointer to the `halve` function\n    // We say that operation takes 1 int argument\n    // and returns an int when it terminates\n    int (*operation)(int) = &amp;halve;\n\n    // Alternatively, you can drop the `&amp;`:\n    int (*anotherOperation)(int) = halve;\n    // From here on onwards, I will always\n    // drop the `&amp;` to make the code a bit\n    // more concise\n\n    // Dereference the pointer to `halve` first,\n    // then supply relevant arguments to it\n    int halved = (*operation)(10);\n\n    // Should print `5`, try it yourself\n    printf(\"%d\", halved);\n}\n</code></pre>\n\n<p>As you can see in the beginning of the <code>main()</code> method, pointers to functions have a rather unusual type declaration. It consists of 3 parts:</p>\n\n<ol>\n<li>The type before the parenthesis is the return type of the function the pointer is referencing.  </li>\n<li>The middle part, is the name of the pointer. Note that you have to wrap it into parenthesis to indicate that this a pointer to a function.  </li>\n<li>The last part contains the types of parameters the function is expecting.</li>\n</ol>\n\n<p>For example, the type for a pointer to a function that accepts 2 character arrays and returns a double would look as follows: <code class=\"language-c\">double (*someFunction)(char*, char*)</code>. It is possible to go much deeper and, in fact, I'll show you an example in the end of this article.</p>\n\n<h1 id=\"implementingthemapfunction\">Implementing the <code>map()</code> function</h1>\n\n<p>As an exercise, let's implement the <a href=\"https://en.wikipedia.org/wiki/Map_(higher-order_function)\">infamous <code>map()</code> function</a>. This function takes 2 arguments:</p>\n\n<ol>\n<li>Some <a href=\"https://en.wikipedia.org/wiki/Unary_function\">unary function</a> that accepts an argument of type <code>A</code> and returns some value of type <code>B</code>.  </li>\n<li>An array of type <code>A</code>. Keep in mind, type <code>A</code> can be the same as type <code>B</code>.</li>\n</ol>\n\n<p>The return value is a new array of type <code>B</code>. This new array is generated by applying the supplied unary function to every element in the supplied array of type <code>A</code>.</p>\n\n<h2 id=\"mapforintegers\"><code>map()</code> for integers</h2>\n\n<p>We'll begin by implementing a map function that only works with integers to make it easier for ourselves.</p>\n\n<pre><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n// Multiply a number by 3\nint triple(int number) {  \n    return number * 3;\n}\n\nint* map(int (*function)(int), int* array, int length) {  \n    // Allocate memory for our new array\n    int* newArray = malloc(sizeof(int) * length);\n    int i;\n    // Apply the function to every element of the supplied\n    // array and save the values into the new array\n    for(i = 0; i &lt; length; i++) {\n        newArray[i] = function(array[i]);\n    }\n    // Return the pointer to the new array\n    // (you must `free()` the memory afterwards)\n    return newArray;\n}\n\nvoid main() {  \n    // Initial array of length 4\n    int array[4] = { 1, 2, 3, 4 };\n    // Map the array above using the `triple()` function\n    int* tripledArray = map(triple, array, 4);\n    int i;\n    // Print the new values\n    for(i = 0; i &lt; 4; i++) {\n        printf(\"%d \", tripledArray[i]);\n    }\n    // Don't forget to the free the memory afterwards\n    free(tripledArray);\n}\n</code></pre>\n\n<h2 id=\"polymorhpicmap\">Polymorhpic map</h2>\n\n<h1 id=\"weneedtogodeeper\">We need to go deeper</h1>\n\n<p><a href=\"http://stackoverflow.com/questions/840501/how-do-function-pointers-in-c-work\"></a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-27 18:52:32","created_by":1,"updated_at":"2016-09-02 13:01:57","updated_by":1,"published_at":"2016-08-27 18:52:35","published_by":1,"amp":null},{"id":7,"uuid":"4ba6e0a6-920d-4346-857f-6c8c551627ea","title":"Testy Test","slug":"testy-test","markdown":"# Abstract\n\nSynlighter is a simple syntax highlighting plugin I developed a while ago. I used it primarily as an exercise to study regular expressions, so it is still far from being called a complete product and it only supports HTML, CSS and JS highlighting. Sadly, I'm no longer developing it so don't expect any updates in the future.\n\n# Demo and source code\n\nYou can find the source code on Synlighter's [GitHub page](https://github.com/TimboKZ/Synlighter). Below is a quick demo of its functionality. As said above, it was never meant to be ready for production so I apologise if it doesn't display correctly in your browser.\n\n# Highlighting CSS\n\n<div>\n<xmp class=\"synlighter\" data-language=\"css\">\n/*\n *    Syntax  ->  Code\n */\n\n.synlighter-syntax-code {\n    -webkit-box-sizing: border-box;\n     -khtml-box-sizing: border-box;\n       -moz-box-sizing: border-box;\n        -ms-box-sizing: border-box;\n         -o-box-sizing: border-box;\n            box-sizing: border-box;\n}\n.doodle input:checked ~ .animate {\n    /* We will set a delay so that the rewind effect can occur */    \n    -webkit-animation: horse-ride .5s steps(12, end) infinite 5s;\n       -moz-animation: horse-ride .5s steps(12, end) infinite 5s;\n    animation: horse-ride .5s steps(12, end) infinite 5s;\n\n    /* Imitating the Rewind effect before real animation starts */\n    -webkit-transition: all 5s cubic-bezier(0.550, 0.055, 0.675, 0.190);\n       -moz-transition: all 5s cubic-bezier(0.550, 0.055, 0.675, 0.190);\n            transition: all 5s cubic-bezier(0.550, 0.055, 0.675, 0.190);\n    background-position: -2412px 0;\n}\n.doodle div.g:after {\n    background: rgba(53, 97, 182, 0.5);\n}\n</xmp>\n\n<link href=\"https://cdn.rawgit.com/TimboKZ/Synlighter/master/synlighter/synlighter.css\" rel=\"stylesheet\" type=\"text/css\">\n<script>\nwindow.scripts.push('https://cdn.rawgit.com/TimboKZ/Synlighter/master/synlighter/jquery.synlighter.js');\nwindow.scripts.push(function($) {\n  $(document).ready(function(e) {\n    $('.synlighter').synlighter();\n    $('.synlighter-alt').synlighter({ counter: 'alt' });\n  });\n}); \n</script>\n</div>","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>Synlighter is a simple syntax highlighting plugin I developed a while ago. I used it primarily as an exercise to study regular expressions, so it is still far from being called a complete product and it only supports HTML, CSS and JS highlighting. Sadly, I'm no longer developing it so don't expect any updates in the future.</p>\n\n<h1 id=\"demoandsourcecode\">Demo and source code</h1>\n\n<p>You can find the source code on Synlighter's <a href=\"https://github.com/TimboKZ/Synlighter\">GitHub page</a>. Below is a quick demo of its functionality. As said above, it was never meant to be ready for production so I apologise if it doesn't display correctly in your browser.</p>\n\n<h1 id=\"highlightingcss\">Highlighting CSS</h1>\n\n<div>  \n<xmp class=\"synlighter\" data-language=\"css\">  \n/*\n *    Syntax  ->  Code\n */\n\n.synlighter-syntax-code {\n    -webkit-box-sizing: border-box;\n     -khtml-box-sizing: border-box;\n       -moz-box-sizing: border-box;\n        -ms-box-sizing: border-box;\n         -o-box-sizing: border-box;\n            box-sizing: border-box;\n}\n.doodle input:checked ~ .animate {\n    /* We will set a delay so that the rewind effect can occur */    \n    -webkit-animation: horse-ride .5s steps(12, end) infinite 5s;\n       -moz-animation: horse-ride .5s steps(12, end) infinite 5s;\n    animation: horse-ride .5s steps(12, end) infinite 5s;\n\n    /* Imitating the Rewind effect before real animation starts */\n    -webkit-transition: all 5s cubic-bezier(0.550, 0.055, 0.675, 0.190);\n       -moz-transition: all 5s cubic-bezier(0.550, 0.055, 0.675, 0.190);\n            transition: all 5s cubic-bezier(0.550, 0.055, 0.675, 0.190);\n    background-position: -2412px 0;\n}\n.doodle div.g:after {\n    background: rgba(53, 97, 182, 0.5);\n}\n</xmp>\n\n<link href=\"https://cdn.rawgit.com/TimboKZ/Synlighter/master/synlighter/synlighter.css\" rel=\"stylesheet\" type=\"text/css\">  \n<script>  \nwindow.scripts.push('https://cdn.rawgit.com/TimboKZ/Synlighter/master/synlighter/jquery.synlighter.js');  \nwindow.scripts.push(function($) {  \n  $(document).ready(function(e) {\n    $('.synlighter').synlighter();\n    $('.synlighter-alt').synlighter({ counter: 'alt' });\n  });\n}); \n</script>  \n</div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-27 19:08:06","created_by":1,"updated_at":"2016-08-30 15:49:59","updated_by":1,"published_at":"2016-08-27 19:08:16","published_by":1,"amp":null},{"id":8,"uuid":"d2d4ddaa-e60d-4846-a2d9-1b96f1450517","title":"Some Other Test","slug":"some-other-test","markdown":"# Abstract\n\nIn the recent years, two-way data binding has become a very popular technique among all sorts of JavaScript frameworks and other tools, and I felt like an article about the basic concepts behind it might be useful for someone who wishes to understand how exactly two-way data binding works. In this article, I'll try to cover as much of it as possible without going too deep into the mechanics of JavaScript.\n\n# What is two-way data binding?\n\nFirst of all, it is important to point out what exactly two-way data binding is before we can discuss how it works. As an example, let's consider [Model-View-Controller (MVC) design pattern](https://en.wikipedia.org/wiki/Model-view-controller). In MVC, so-called Model component represents the Model of the data in the application, while the View component determines how the data is presented to the viewer. A simple analogy would be to think of the Model as a JavaScript object and the View as an HTML page with some input forms. Take a look at the animation below.\n\n<video loop=\"\" autoplay=\"\">\n    <source src=\"https://s3.eu-central-1.amazonaws.com/foxypanda-ghost/2016/Aug/two-way-data-binding.webm\" type=\"video/webm\">\n    Your browser does not support the video tag.\n</video>\n\nAs you can see, the JavaScript object gets updated in real time as the user changes the contents of the input field. Since this is **two-way** data binding, the opposite is also true: If the application was to update the JS object the changes would appear in the input field straight away.\n\n# JavaScript implementation\n\nFirst of all, let's make a simple HTML page which we'll use to test any JS code we'll write. The code for our page can be found below and it has 3 noteworthy elements:\n\n1. `#input` field: The input field we'll use to type in new values for the JS variable. As per the concept of two-way data binding, the changes made here will affect the JS variable and vice versa.\n2. `#change` button: On click, this button will change the value of the JS variable to `Hello`. This change should also affect the `#input` and the `#value`.\n3. `#value` \n\n```language-markup line-numbers\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Two-way Data Binding</title>\n</head>\n<body>\n    <input id=\"input\" type=\"text\">\n    <button id=\"change\">Set value to \"Hello\"</button>\n    <span>Value: <strong id=\"value\"></strong></span>\n\n    <script>\n    /*\n     * Our JS will go here\n     */\n    </script>\n</body>\n</html>\n```","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>In the recent years, two-way data binding has become a very popular technique among all sorts of JavaScript frameworks and other tools, and I felt like an article about the basic concepts behind it might be useful for someone who wishes to understand how exactly two-way data binding works. In this article, I'll try to cover as much of it as possible without going too deep into the mechanics of JavaScript.</p>\n\n<h1 id=\"whatistwowaydatabinding\">What is two-way data binding?</h1>\n\n<p>First of all, it is important to point out what exactly two-way data binding is before we can discuss how it works. As an example, let's consider <a href=\"https://en.wikipedia.org/wiki/Model-view-controller\">Model-View-Controller (MVC) design pattern</a>. In MVC, so-called Model component represents the Model of the data in the application, while the View component determines how the data is presented to the viewer. A simple analogy would be to think of the Model as a JavaScript object and the View as an HTML page with some input forms. Take a look at the animation below.</p>\n\n<video loop=\"\" autoplay=\"\">  \n    <source src=\"https://s3.eu-central-1.amazonaws.com/foxypanda-ghost/2016/Aug/two-way-data-binding.webm\" type=\"video/webm\">\n    Your browser does not support the video tag.\n</video>\n\n<p>As you can see, the JavaScript object gets updated in real time as the user changes the contents of the input field. Since this is <strong>two-way</strong> data binding, the opposite is also true: If the application was to update the JS object the changes would appear in the input field straight away.</p>\n\n<h1 id=\"javascriptimplementation\">JavaScript implementation</h1>\n\n<p>First of all, let's make a simple HTML page which we'll use to test any JS code we'll write. The code for our page can be found below and it has 3 noteworthy elements:</p>\n\n<ol>\n<li><code>#input</code> field: The input field we'll use to type in new values for the JS variable. As per the concept of two-way data binding, the changes made here will affect the JS variable and vice versa.  </li>\n<li><code>#change</code> button: On click, this button will change the value of the JS variable to <code>Hello</code>. This change should also affect the <code>#input</code> and the <code>#value</code>.  </li>\n<li><code>#value</code> </li>\n</ol>\n\n<pre><code class=\"language-markup line-numbers\">&lt;!DOCTYPE html&gt;  \n&lt;html&gt;  \n&lt;head&gt;  \n    &lt;title&gt;Two-way Data Binding&lt;/title&gt;\n&lt;/head&gt;  \n&lt;body&gt;  \n    &lt;input id=\"input\" type=\"text\"&gt;\n    &lt;button id=\"change\"&gt;Set value to \"Hello\"&lt;/button&gt;\n    &lt;span&gt;Value: &lt;strong id=\"value\"&gt;&lt;/strong&gt;&lt;/span&gt;\n\n    &lt;script&gt;\n    /*\n     * Our JS will go here\n     */\n    &lt;/script&gt;\n&lt;/body&gt;  \n&lt;/html&gt;  \n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-27 19:08:32","created_by":1,"updated_at":"2016-08-28 20:00:56","updated_by":1,"published_at":"2016-08-27 19:08:41","published_by":1,"amp":null},{"id":9,"uuid":"13c9e9c4-a08b-4643-8c29-b141d0ee5e44","title":"Some reasonably long title that doesn't bear any particular meaning","slug":"some-reasonably-long-title-that-doesnt-bear-any-particular-meaning","markdown":"```language-typescript line-numbers\n/**\n * An interface used for configuration of the layer\n * @since 0.1.1 Added `degree` parameter\n * @since 0.0.6 Renamed `generateCoefficient` to `coefficientGenerator`\n * @since 0.0.5\n */\nexport interface ILayerConfiguration {\n    neuronType: INeuronTypeParameter;\n    coefficientGenerator: () => number;\n    neuronCount?: number;\n    degree?: number;\n}\n```\n\n<video loop=\"\" autoplay=\"\">\n    <source src=\"https://s3.eu-central-1.amazonaws.com/foxypanda-ghost/2016/Aug/two-way-data-binding.webm\" type=\"video/webm\">\n    Your browser does not support the video tag.\n</video>","mobiledoc":null,"html":"<pre><code class=\"language-typescript line-numbers\">/**\n * An interface used for configuration of the layer\n * @since 0.1.1 Added `degree` parameter\n * @since 0.0.6 Renamed `generateCoefficient` to `coefficientGenerator`\n * @since 0.0.5\n */\nexport interface ILayerConfiguration {  \n    neuronType: INeuronTypeParameter;\n    coefficientGenerator: () =&gt; number;\n    neuronCount?: number;\n    degree?: number;\n}\n</code></pre>\n\n<video loop=\"\" autoplay=\"\">  \n    <source src=\"https://s3.eu-central-1.amazonaws.com/foxypanda-ghost/2016/Aug/two-way-data-binding.webm\" type=\"video/webm\">\n    Your browser does not support the video tag.\n</video>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-27 19:13:53","created_by":1,"updated_at":"2016-08-28 19:14:05","updated_by":1,"published_at":"2016-08-27 19:14:04","published_by":1,"amp":null},{"id":10,"uuid":"ccc0ce9c-51be-4af5-a09c-a406e8a83868","title":"Short Title","slug":"short-title","markdown":"# A quick overview\n\nHyperBlocks is a WYSIWYG editor for sidebar content on Reddit. Its main aim is to allow moderators to easily organise the contents of sidebars in their subreddits in a neat and well-structured way without any prior knowledge of CSS or Markdown syntax. You find a video of HyperBlocks editor in action at the bottom of this page.\n\nYou can find the live demo of the editor [here](http://timbo.kz/reddit/HyperBlocks/). The source code is available on HyperBlocks' [GitHub page](https://github.com/TimboKZ/HyperBlocks). To see some discussions related to the editor you might wanna check out [this Reddit thread](https://www.reddit.com/r/reddithax/comments/30k58l/hyperblocks_editor_is_now_available_for_testing/) and [/r/HyperBlocks](https://www.reddit.com/r/HyperBlocks).\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/xedUxaGOUXw\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","mobiledoc":null,"html":"<h1 id=\"aquickoverview\">A quick overview</h1>\n\n<p>HyperBlocks is a WYSIWYG editor for sidebar content on Reddit. Its main aim is to allow moderators to easily organise the contents of sidebars in their subreddits in a neat and well-structured way without any prior knowledge of CSS or Markdown syntax. You find a video of HyperBlocks editor in action at the bottom of this page.</p>\n\n<p>You can find the live demo of the editor <a href=\"http://timbo.kz/reddit/HyperBlocks/\">here</a>. The source code is available on HyperBlocks' <a href=\"https://github.com/TimboKZ/HyperBlocks\">GitHub page</a>. To see some discussions related to the editor you might wanna check out <a href=\"https://www.reddit.com/r/reddithax/comments/30k58l/hyperblocks_editor_is_now_available_for_testing/\">this Reddit thread</a> and <a href=\"https://www.reddit.com/r/HyperBlocks\">/r/HyperBlocks</a>.</p>\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/xedUxaGOUXw\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-27 19:50:29","created_by":1,"updated_at":"2016-08-28 03:42:58","updated_by":1,"published_at":"2016-08-27 19:50:37","published_by":1,"amp":null},{"id":11,"uuid":"34522e13-a813-4b51-9cbc-87d7b7c48e11","title":"About","slug":"about","markdown":"","mobiledoc":null,"html":"","image":null,"featured":0,"page":1,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-27 20:47:40","created_by":1,"updated_at":"2016-08-27 20:47:48","updated_by":1,"published_at":"2016-08-27 20:47:48","published_by":1,"amp":null},{"id":12,"uuid":"5d625ceb-0358-4a80-bfe1-aac878f2fa92","title":"Active Visualiser","slug":"active-visualiser","markdown":"# Abstract\n\nBack in 2014 I decided to develop a music visualiser, and since I was mostly working with Java at the time my choice fell on this very language. Sadly, I couldn't find any decent tutorials or examples of music visualiser implementation in Java, so I decided to make one myself. Keep in mind, this project was made when I hardly had any experience with Java and, unfortunately, I did not make use of Maven during the development process.\n\n# Active Visualiser\n\nActive Visualiser is a pretty basic music visualiser written in Java. It uses reasonably trivial techniques to analyse the audio and then produce some visualisation using OpenGL. You can find the source code and some documentation on [its GitHub page](https://github.com/TimboKZ/ActiveVisualiser). Check out the video below for a simple demo of the visualiser.\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/OUPmbOWXMtE\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>Back in 2014 I decided to develop a music visualiser, and since I was mostly working with Java at the time my choice fell on this very language. Sadly, I couldn't find any decent tutorials or examples of music visualiser implementation in Java, so I decided to make one myself. Keep in mind, this project was made when I hardly had any experience with Java and, unfortunately, I did not make use of Maven during the development process.</p>\n\n<h1 id=\"activevisualiser\">Active Visualiser</h1>\n\n<p>Active Visualiser is a pretty basic music visualiser written in Java. It uses reasonably trivial techniques to analyse the audio and then produce some visualisation using OpenGL. You can find the source code and some documentation on <a href=\"https://github.com/TimboKZ/ActiveVisualiser\">its GitHub page</a>. Check out the video below for a simple demo of the visualiser.</p>\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/OUPmbOWXMtE\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-27 23:30:17","created_by":1,"updated_at":"2016-08-28 02:36:17","updated_by":1,"published_at":"2015-01-17 00:31:00","published_by":1,"amp":null},{"id":13,"uuid":"7ab47797-7f96-48c7-a079-dc745e2cab17","title":"HyperBlocks","slug":"hyperblocks","markdown":"# A quick overview\n\nHyperBlocks is a WYSIWYG editor for sidebar content on Reddit. Its main aim is to allow moderators to easily organise the contents of sidebars in their subreddits in a neat and well-structured way without any prior knowledge of CSS or Markdown syntax. You find a video of HyperBlocks editor in action at the bottom of this page.\n\nYou can find the live demo of the editor [here](https://hosting.kawaiidesu.me/reddit/hyper-blocks/). The source code is available on HyperBlocks' [GitHub page](https://github.com/TimboKZ/HyperBlocks). To see some discussions related to the editor you might wanna check out [this Reddit thread](https://www.reddit.com/r/reddithax/comments/30k58l/hyperblocks_editor_is_now_available_for_testing/) and [/r/HyperBlocks](https://www.reddit.com/r/HyperBlocks).\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/xedUxaGOUXw\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","mobiledoc":null,"html":"<h1 id=\"aquickoverview\">A quick overview</h1>\n\n<p>HyperBlocks is a WYSIWYG editor for sidebar content on Reddit. Its main aim is to allow moderators to easily organise the contents of sidebars in their subreddits in a neat and well-structured way without any prior knowledge of CSS or Markdown syntax. You find a video of HyperBlocks editor in action at the bottom of this page.</p>\n\n<p>You can find the live demo of the editor <a href=\"https://hosting.kawaiidesu.me/reddit/hyper-blocks/\">here</a>. The source code is available on HyperBlocks' <a href=\"https://github.com/TimboKZ/HyperBlocks\">GitHub page</a>. To see some discussions related to the editor you might wanna check out <a href=\"https://www.reddit.com/r/reddithax/comments/30k58l/hyperblocks_editor_is_now_available_for_testing/\">this Reddit thread</a> and <a href=\"https://www.reddit.com/r/HyperBlocks\">/r/HyperBlocks</a>.</p>\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/xedUxaGOUXw\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-28 02:39:14","created_by":1,"updated_at":"2016-08-30 09:56:12","updated_by":1,"published_at":"2015-03-21 03:39:00","published_by":1,"amp":null},{"id":14,"uuid":"a2658a98-e679-46a4-ab4a-294688d27d0a","title":"Getting started with Redux (+React)","slug":"getting-started-with-redux-react","markdown":"# Abstract\n\nAround a week ago I, together with my coursemate [Christoph Ulshöfer](https://github.com/culshoefer), begun developing a mail app using [ElectronJS](http://electron.atom.io/). While looking for tools to use in development I stumbled over [Redux](https://github.com/reactjs/redux) and since we were already using [React](https://facebook.github.io/react/), it seemed like a perfect option for us. In this article I will talk about resources that I found very helpful in my learning process and a small calculator app I made as an exercise to learn Redux, explaining its features and how I went about implementing them.\n\n> **Note:** I'm assuming you have worked with React before and know the basic principles behind it. Technically to use Redux you don't have to know anything about React, but in this article I'll be looking at learning to use this particular combination of React + Redux.\n\n# Useful links\n\nIf you don't yet understand what Redux is and why it is useful, I'd like to point out these 2 incredibly useful resources:\n\n1. [A brilliant article](http://www.youhavetolearncomputers.com/blog/2015/9/15/a-conceptual-overview-of-redux-or-how-i-fell-in-love-with-a-javascript-state-container) about the concepts behind Redux and how it compliments React  (~10 minutes reading time)\n2. [A talk by Dan Abramov](https://www.youtube.com/watch?v=xsSnOQynTHs), the creator of Redux, at React-Europe 2015 in which he explains why he developed Redux, how it works and how it makes developers' lives easier.\n\nI strongly suggest you check out both of them, but if you only have limited in Redux either one should give you a pretty good idea of what it is about (although the talk by Dan Abramov will be a bit more informative and, well, *impressive*).\n\n## Learning by doing\n\nAfter you've understood what Redux is about, quite naturally you would want to try it in action and learn how to use it in the process. As I was searching for good examples I found out that this quite the problematic area: A lot of boilerplates out there contain tons of (arguably) unnecessary code and are completely unsuitable for learning. I suggest you start with with the official [Redux basics guide](http://redux.js.org/docs/basics/) to grasp the core concepts behind writing Redux applications. Keep in mind that this guide uses JavaScript (EcmaScript 6 to be precise) and hence some cool features of TypeScript were not used for obvious reasons. That said, I haven't had issues following along rewriting some parts in TS.","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>Around a week ago I, together with my coursemate <a href=\"https://github.com/culshoefer\">Christoph Ulshöfer</a>, begun developing a mail app using <a href=\"http://electron.atom.io/\">ElectronJS</a>. While looking for tools to use in development I stumbled over <a href=\"https://github.com/reactjs/redux\">Redux</a> and since we were already using <a href=\"https://facebook.github.io/react/\">React</a>, it seemed like a perfect option for us. In this article I will talk about resources that I found very helpful in my learning process and a small calculator app I made as an exercise to learn Redux, explaining its features and how I went about implementing them.</p>\n\n<blockquote>\n  <p><strong>Note:</strong> I'm assuming you have worked with React before and know the basic principles behind it. Technically to use Redux you don't have to know anything about React, but in this article I'll be looking at learning to use this particular combination of React + Redux.</p>\n</blockquote>\n\n<h1 id=\"usefullinks\">Useful links</h1>\n\n<p>If you don't yet understand what Redux is and why it is useful, I'd like to point out these 2 incredibly useful resources:</p>\n\n<ol>\n<li><a href=\"http://www.youhavetolearncomputers.com/blog/2015/9/15/a-conceptual-overview-of-redux-or-how-i-fell-in-love-with-a-javascript-state-container\">A brilliant article</a> about the concepts behind Redux and how it compliments React  (~10 minutes reading time)  </li>\n<li><a href=\"https://www.youtube.com/watch?v=xsSnOQynTHs\">A talk by Dan Abramov</a>, the creator of Redux, at React-Europe 2015 in which he explains why he developed Redux, how it works and how it makes developers' lives easier.</li>\n</ol>\n\n<p>I strongly suggest you check out both of them, but if you only have limited in Redux either one should give you a pretty good idea of what it is about (although the talk by Dan Abramov will be a bit more informative and, well, <em>impressive</em>).</p>\n\n<h2 id=\"learningbydoing\">Learning by doing</h2>\n\n<p>After you've understood what Redux is about, quite naturally you would want to try it in action and learn how to use it in the process. As I was searching for good examples I found out that this quite the problematic area: A lot of boilerplates out there contain tons of (arguably) unnecessary code and are completely unsuitable for learning. I suggest you start with with the official <a href=\"http://redux.js.org/docs/basics/\">Redux basics guide</a> to grasp the core concepts behind writing Redux applications. Keep in mind that this guide uses JavaScript (EcmaScript 6 to be precise) and hence some cool features of TypeScript were not used for obvious reasons. That said, I haven't had issues following along rewriting some parts in TS.</p>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-09-11 13:05:40","created_by":1,"updated_at":"2016-09-12 19:30:10","updated_by":1,"published_at":null,"published_by":null,"amp":null},{"id":15,"uuid":"0da75c3a-2c5c-4cbf-988c-e378861f6bf3","title":"Digit recognition in JavaScript","slug":"digit-recognition-in-javascript","markdown":"# Abstract\n\nDuring the summer of 2016 I took an interest in the concepts behind neural networks and machine learning and after doing researching I decided to apply my newly acquired knowledge. Recently I've begun working with [TypeScript](https://www.typescriptlang.org/) quite a lot and decided to stick with it as my primary language of development with [Node](https://nodejs.org/) to run the app.\n\nThe final product was a reasonably complex neural network implementation with a working digit classifier, which reached the maximum accuracy of 81%. This is far from human digit recognition accuracy of 97.5% but the whole project was still a very useful exercise that helped me broaden my knowledge of machine learning. You can find the source code of the project on [this GitHub page](https://github.com/TimboKZ/js-digit-recognition). I tried to document all of the TypeScript code so if you yourself are interested in neural network you might find it useful to look through the code.\n\n# A quick demo\n\nBelow is a video of the digit classifier in action. In the video you can the output of just one of several testing scripts included in the repo, you can find more information about it by following the link above.\n\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/8lpwIMJbLHU\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>During the summer of 2016 I took an interest in the concepts behind neural networks and machine learning and after doing researching I decided to apply my newly acquired knowledge. Recently I've begun working with <a href=\"https://www.typescriptlang.org/\">TypeScript</a> quite a lot and decided to stick with it as my primary language of development with <a href=\"https://nodejs.org/\">Node</a> to run the app.</p>\n\n<p>The final product was a reasonably complex neural network implementation with a working digit classifier, which reached the maximum accuracy of 81%. This is far from human digit recognition accuracy of 97.5% but the whole project was still a very useful exercise that helped me broaden my knowledge of machine learning. You can find the source code of the project on <a href=\"https://github.com/TimboKZ/js-digit-recognition\">this GitHub page</a>. I tried to document all of the TypeScript code so if you yourself are interested in neural network you might find it useful to look through the code.</p>\n\n<h1 id=\"aquickdemo\">A quick demo</h1>\n\n<p>Below is a video of the digit classifier in action. In the video you can the output of just one of several testing scripts included in the repo, you can find more information about it by following the link above.</p>\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/8lpwIMJbLHU\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-16 23:26:54","created_by":1,"updated_at":"2016-08-28 03:41:04","updated_by":1,"published_at":"2016-08-16 23:27:07","published_by":1,"amp":null},{"id":16,"uuid":"c2c94436-41f0-4125-bc6f-c5c2ba322d17","title":"Dota 2 Icons","slug":"dota-2-icons","markdown":"# Abstract\n\nI used to make various mods for Dota 2, and as you've probably guessed some of these mods were icon mods for various heroes. In this post you can see some of the icon sets I bothered to complete. I no longer mod Dota 2 so I have no idea how one would go about installing these icon packs today, so good luck finding this out if you're interested in using them.\n\nAlso it must be said that I moved this page as-is from my [old website](http://timbo.kz) so I apologise for any issues with the formatting.\n\n---\n\n<div>\n\n<div class=\"icon-set Mirana\">\n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">PotM Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Mirana\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/545g3122gm7bgrw/PotM_Custom_Icons_0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/545g3122gm7bgrw/PotM_Custom_Icons_0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://blog.sina.com.cn/s/blog_56d6c0c80101l5jz.html\"\n                                                target=\"_blank\">Ji Zhang</a></div>\n    </div>\n</div>\n<div class=\"icon-set Lanaya\">\n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Lanaya Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Lanaya\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/b4p935o7n5dvy43/Lanaya_Custom_Icons_0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/b4p935o7n5dvy43/Lanaya_Custom_Icons_0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/4.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/5.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/6.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/7.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://steamcommunity.com/sharedfiles/filedetails/?id=332982547\"\n                                                target=\"_blank\">Yi</a> and <a\n                href=\"http://dota.joyreactor.cc/post/966589\" target=\"_blank\">A.Spitfire</a></div>\n    </div>\n</div>\n<div class=\"icon-set Pugna\">\n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Pugna Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Pugna\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/rcf6vuzx0d7004v/Pugna_Custom_Icons_0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/rcf6vuzx0d7004v/Pugna_Custom_Icons_0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://mrscrake.deviantart.com/art/Dota-2-Pugna-289973383\"\n                                                target=\"_blank\">MrScrake</a></div>\n    </div>\n</div>\n<div class=\"icon-set Kunkka\">\n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Kunkka Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Kunkka\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/2tidv112aauot3y/Kunkka-Custom-Icons-0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/2tidv112aauot3y/Kunkka-Custom-Icons-0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://mikeazevedo.deviantart.com/art/DOTA-2-KUNKKA-407720534\"\n                                                target=\"_blank\">Mike Azevedo</a> and <a\n                href=\"http://rosolino.deviantart.com/art/Dota2-Kunkka-Fanart-425546582\" target=\"_blank\">Rosolino</a>\n        </div>\n    </div>\n</div>\n<div class=\"icon-set Slark\">\n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Slark Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.2</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Slark\" data-version=\"0-2\">v0.2</div>\n                    <div class=\"option\" data-slug=\"Slark\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/xc6t1xdd43q58xj/Slark_Custom_Icons_0.2.zip\" class=\"download\">Download\n                v0.2</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-2 active\"\n                 data-link=\"http://www.mediafire.com/download/xc6t1xdd43q58xj/Slark_Custom_Icons_0.2.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://swedeyart.deviantart.com/art/Slark-410729987\"\n                                                target=\"_blank\">SwedeyArt</a></div>\n    </div>\n</div>\n\n<style id=\"dota-style\">\nbody {\n  background-color: #000;\n}\n\n.display {\n  position: relative;\n  height: 250px;\n}\n.display .front {\n  position: absolute;\n  z-index: 888;\n  height: 100%;\n  width: 100%;\n  left: 0;\n  top: 0;\n}\n\n.info {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/background.png\");\n  border-top: solid 1px rgba(255, 255, 255, 0.1);\n  border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n  font-family: Trebuchet MS;\n  -webkit-box-shadow: #000 0 0 10px;\n  -moz-box-shadow: #000 0 0 10px;\n  box-shadow: #000 0 0 10px;\n  padding: 10px 20px 20px 20px;\n  border-radius: 5px;\n  position: relative;\n  z-index: 999;\n}\n.icon-set a {\n  text-decoration: none;\n}\n.info .bar {\n  text-align: center;\n}\n.info .name {\n  text-shadow: #000 0 3px 0, #000 0 2px 0, #000 0 1px 0;\n  padding: 10px 10px 0 10px;\n  display: inline-block;\n  letter-spacing: 1px;\n  line-height: 30px;\n  font-size: 20px;\n  height: 30px;\n  color: #eee;\n}\n.info .version-picker, .info .download {\n  -webkit-transition: background-color 400ms ease;\n  -moz-transition: background-color 400ms ease;\n  -o-transition: background-color 400ms ease;\n  transition: background-color 400ms ease;\n  background-color: rgba(0, 0, 0, 0.2);\n  text-decoration: none;\n  display: inline-block;\n  line-height: 40px;\n  padding: 0 15px;\n  margin: 0 10px;\n  height: 40px;\n  color: #ccc;\n}\n.info .version-picker:hover, .info .download:hover {\n  background-color: rgba(0, 0, 0, 0.4);\n}\n.info .version-picker {\n  position: relative;\n  min-width: 35px;\n  cursor: pointer;\n}\n.info .version-picker:hover .options {\n  visibility: visible;\n  opacity: 1;\n}\n.info .version-picker .options {\n  -webkit-transition: opacity 400ms ease;\n  -moz-transition: opacity 400ms ease;\n  -o-transition: opacity 400ms ease;\n  transition: opacity 400ms ease;\n  text-align: center;\n  visibility: hidden;\n  position: absolute;\n  z-index: 888;\n  opacity: 0;\n  top: 100%;\n  left: 0;\n}\n.info .version-picker .options .option {\n  -webkit-transition: background-color 400ms ease;\n  -moz-transition: background-color 400ms ease;\n  -o-transition: background-color 400ms ease;\n  transition: background-color 400ms ease;\n  background-color: rgba(0, 0, 0, 0.4);\n  line-height: 40px;\n  margin: 1px 0 0 0;\n  min-width: 35px;\n  padding: 0 15px;\n  cursor: pointer;\n  height: 40px;\n}\n.info .version-picker .options .option:hover {\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.info .artists {\n  text-shadow: #000 0 2px 0, #000 0 1px 0;\n  letter-spacing: 1px;\n  text-align: center;\n  font-size: 16px;\n  color: #888;\n}\n.info .artists a {\n  text-decoration: none;\n  color: #aaa;\n}\n.info .artists a:hover {\n  text-decoration: underline;\n}\n.info .preview {\n  position: relative;\n  padding: 10px 0;\n}\n.info .preview .version {\n  -webkit-transition: opacity 400ms ease;\n  -moz-transition: opacity 400ms ease;\n  -o-transition: opacity 400ms ease;\n  transition: opacity 400ms ease;\n  text-align: center;\n  /*position: absolute;*/\n  padding: 10px 0;\n  width: 100%;\n  opacity: 0;\n  left: 0;\n  top: 0;\n}\n.info .preview .version.active {\n  opacity: 1;\n}\n.info .preview .version .icon {\n  -webkit-box-shadow: inset rgba(255, 255, 255, 0.2) 4px 5px 5px -5px, inset rgba(0, 0, 0, 0.6) -4px -5px 5px -5px, #000 0 5px 10px;\n  -moz-box-shadow: inset rgba(255, 255, 255, 0.2) 4px 5px 5px -5px, inset rgba(0, 0, 0, 0.6) -4px -5px 5px -5px, #000 0 5px 10px;\n  box-shadow: inset rgba(255, 255, 255, 0.2) 4px 5px 5px -5px, inset rgba(0, 0, 0, 0.6) -4px -5px 5px -5px, #000 0 5px 10px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  display: inline-block;\n  height: 128px;\n  width: 128px;\n  margin: 10px;\n}\n\n#instructions {\n  font-family: Trebuchet MS;\n  padding: 60px 0 100px 0;\n  color: #ccc;\n}\n#instructions h1 {\n  text-align: center;\n  font-size: 24px;\n}\n#instructions ol {\n  margin: 0 auto;\n  width: 500px;\n}\n#instructions ol li {\n  line-height: 26px;\n  font-size: 16px;\n  margin: 15px 0;\n}\n#instructions code {\n  background-color: #111;\n  display: inline-block;\n  padding: 0px 4px;\n  margin: 2px 2px;\n}\n.Mirana {\n  margin-top: -25px;\n}\n.Mirana .display {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-back.png\");\n}\n.Mirana .display .front {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-front.png\");\n}\n.Mirana .display:before, .Mirana .display:after {\n  background-repeat: repeat-x;\n  background-size: contain;\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 777;\n  content: \"\";\n  width: 100%;\n  top: 0;\n}\n.Mirana .display:before {\n  -webkit-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  -moz-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-clouds-back.png\");\n  -webkit-animation: mirana-front 40s linear 0s infinite;\n  -moz-animation: mirana-front 40s linear 0s infinite;\n  -o-animation: mirana-front 40s linear 0s infinite;\n  animation: mirana-front 40s linear 0s infinite;\n  background-position: 0 -50px;\n}\n.Mirana .display:after {\n  -webkit-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  -moz-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-clouds-front.png\");\n  -webkit-animation: mirana-front 80s linear 0s infinite;\n  -moz-animation: mirana-front 80s linear 0s infinite;\n  -o-animation: mirana-front 80s linear 0s infinite;\n  animation: mirana-front 80s linear 0s infinite;\n  background-position: 0 -50px;\n}\n\n@-o-keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n@-moz-keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n@-webkit-keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n@keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n.Lanaya .display {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-back.png\");\n}\n.Lanaya .display .front {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-front.png\");\n  z-index: 777;\n}\n.Lanaya .display:before, .Lanaya .display:after {\n  background-repeat: no-repeat;\n  background-size: contain;\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 888;\n  content: \"\";\n  width: 100%;\n  top: 0;\n}\n.Lanaya .display:before {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-particles-front.png\");\n  -webkit-animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n  -moz-animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n  -o-animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n  animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n}\n.Lanaya .display:after {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-particles-back.png\");\n  -webkit-animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n  -moz-animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n  -o-animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n  animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n}\n.Lanaya .info .preview .version .icon {\n  height: 100px;\n  width: 100px;\n}\n\n@-o-keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n@-moz-keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n@-webkit-keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n@keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n.Pugna .display {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-back.png\");\n}\n.Pugna .display .front {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-front.png\");\n}\n.Pugna .display:before, .Pugna .display:after {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-dust.png\");\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 777;\n  content: \"\";\n  width: 50%;\n  top: 0;\n}\n.Pugna .display:before {\n  -webkit-animation: pugna-left 14s linear 0s infinite;\n  -moz-animation: pugna-left 14s linear 0s infinite;\n  -o-animation: pugna-left 14s linear 0s infinite;\n  animation: pugna-left 14s linear 0s infinite;\n  -webkit-box-shadow: inset #000 300px 0 250px -100px;\n  -moz-box-shadow: inset #000 300px 0 250px -100px;\n  box-shadow: inset #000 300px 0 250px -100px;\n  left: 0;\n}\n.Pugna .display:after {\n  -webkit-animation: pugna-right 14s linear 0s infinite;\n  -moz-animation: pugna-right 14s linear 0s infinite;\n  -o-animation: pugna-right 14s linear 0s infinite;\n  animation: pugna-right 14s linear 0s infinite;\n  -webkit-box-shadow: inset #000 -300px 0 250px -100px;\n  -moz-box-shadow: inset #000 -300px 0 250px -100px;\n  box-shadow: inset #000 -300px 0 250px -100px;\n  right: 0;\n}\n\n@-o-keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@-moz-keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@-webkit-keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@-o-keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n@-moz-keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n@-webkit-keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n@keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n.Kunkka .display {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-back.png\");\n  overflow: hidden;\n}\n.Kunkka .display .front {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-front.png\");\n}\n.Kunkka .display:before {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-light.png\");\n  -webkit-animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  -moz-animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  -o-animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  position: absolute;\n  display: block;\n  height: 670px;\n  width: 1024px;\n  z-index: 777;\n  content: \"\";\n  top: -200px;\n}\n.Kunkka .display:after {\n  -webkit-box-shadow: inset #000 -350px 0 200px -100px, inset #000 350px 0 200px -100px;\n  -moz-box-shadow: inset #000 -350px 0 200px -100px, inset #000 350px 0 200px -100px;\n  box-shadow: inset #000 -350px 0 200px -100px, inset #000 350px 0 200px -100px;\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 778;\n  content: \"\";\n  width: 100%;\n  top: 0;\n}\n\n@-o-keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n@-moz-keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n@-webkit-keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n@keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n.Slark .display {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Slark/slark-back.png\");\n}\n.Slark .display .front {\n  -webkit-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  -moz-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Slark/slark-rain.png\");\n  -webkit-animation: slark-front 2s linear 0s infinite;\n  -moz-animation: slark-front 2s linear 0s infinite;\n  -o-animation: slark-front 2s linear 0s infinite;\n  animation: slark-front 2s linear 0s infinite;\n}\n\n@-o-keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n@-moz-keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n@-webkit-keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n@keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n</style>\n\n<script>\nwindow.scripts.push(function($) {\n  $(document).ready(function(e) {\n    var style = $('#dota-style');\n    var text = style.text();\n    text = text.replace(/<a href=\".+\">/gi, '');\n    text = text.replace(/<\\/a>/gi, '');\n    style.text(text);\n  });\n});\n</script>\n\n</div>","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>I used to make various mods for Dota 2, and as you've probably guessed some of these mods were icon mods for various heroes. In this post you can see some of the icon sets I bothered to complete. I no longer mod Dota 2 so I have no idea how one would go about installing these icon packs today, so good luck finding this out if you're interested in using them.</p>\n\n<p>Also it must be said that I moved this page as-is from my <a href=\"http://timbo.kz\">old website</a> so I apologise for any issues with the formatting.</p>\n\n<hr />\n\n<div>\n\n<div class=\"icon-set Mirana\">  \n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">PotM Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Mirana\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/545g3122gm7bgrw/PotM_Custom_Icons_0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/545g3122gm7bgrw/PotM_Custom_Icons_0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://blog.sina.com.cn/s/blog_56d6c0c80101l5jz.html\"\n                                                target=\"_blank\">Ji Zhang</a></div>\n    </div>\n</div>  \n\n<div class=\"icon-set Lanaya\">  \n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Lanaya Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Lanaya\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/b4p935o7n5dvy43/Lanaya_Custom_Icons_0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/b4p935o7n5dvy43/Lanaya_Custom_Icons_0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/4.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/5.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/6.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/7.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://steamcommunity.com/sharedfiles/filedetails/?id=332982547\"\n                                                target=\"_blank\">Yi</a> and <a\n                href=\"http://dota.joyreactor.cc/post/966589\" target=\"_blank\">A.Spitfire</a></div>\n    </div>\n</div>  \n\n<div class=\"icon-set Pugna\">  \n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Pugna Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Pugna\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/rcf6vuzx0d7004v/Pugna_Custom_Icons_0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/rcf6vuzx0d7004v/Pugna_Custom_Icons_0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://mrscrake.deviantart.com/art/Dota-2-Pugna-289973383\"\n                                                target=\"_blank\">MrScrake</a></div>\n    </div>\n</div>  \n\n<div class=\"icon-set Kunkka\">  \n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Kunkka Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Kunkka\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/2tidv112aauot3y/Kunkka-Custom-Icons-0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/2tidv112aauot3y/Kunkka-Custom-Icons-0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://mikeazevedo.deviantart.com/art/DOTA-2-KUNKKA-407720534\"\n                                                target=\"_blank\">Mike Azevedo</a> and <a\n                href=\"http://rosolino.deviantart.com/art/Dota2-Kunkka-Fanart-425546582\" target=\"_blank\">Rosolino</a>\n        </div>\n    </div>\n</div>  \n\n<div class=\"icon-set Slark\">  \n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Slark Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.2</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Slark\" data-version=\"0-2\">v0.2</div>\n                    <div class=\"option\" data-slug=\"Slark\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/xc6t1xdd43q58xj/Slark_Custom_Icons_0.2.zip\" class=\"download\">Download\n                v0.2</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-2 active\"\n                 data-link=\"http://www.mediafire.com/download/xc6t1xdd43q58xj/Slark_Custom_Icons_0.2.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://swedeyart.deviantart.com/art/Slark-410729987\"\n                                                target=\"_blank\">SwedeyArt</a></div>\n    </div>\n</div>\n\n<style id=\"dota-style\">  \nbody {  \n  background-color: #000;\n}\n\n.display {\n  position: relative;\n  height: 250px;\n}\n.display .front {\n  position: absolute;\n  z-index: 888;\n  height: 100%;\n  width: 100%;\n  left: 0;\n  top: 0;\n}\n\n.info {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/background.png\">http://timbo.kz/images/Dota-2-Icons/background.png</a>\");\n  border-top: solid 1px rgba(255, 255, 255, 0.1);\n  border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n  font-family: Trebuchet MS;\n  -webkit-box-shadow: #000 0 0 10px;\n  -moz-box-shadow: #000 0 0 10px;\n  box-shadow: #000 0 0 10px;\n  padding: 10px 20px 20px 20px;\n  border-radius: 5px;\n  position: relative;\n  z-index: 999;\n}\n.icon-set a {\n  text-decoration: none;\n}\n.info .bar {\n  text-align: center;\n}\n.info .name {\n  text-shadow: #000 0 3px 0, #000 0 2px 0, #000 0 1px 0;\n  padding: 10px 10px 0 10px;\n  display: inline-block;\n  letter-spacing: 1px;\n  line-height: 30px;\n  font-size: 20px;\n  height: 30px;\n  color: #eee;\n}\n.info .version-picker, .info .download {\n  -webkit-transition: background-color 400ms ease;\n  -moz-transition: background-color 400ms ease;\n  -o-transition: background-color 400ms ease;\n  transition: background-color 400ms ease;\n  background-color: rgba(0, 0, 0, 0.2);\n  text-decoration: none;\n  display: inline-block;\n  line-height: 40px;\n  padding: 0 15px;\n  margin: 0 10px;\n  height: 40px;\n  color: #ccc;\n}\n.info .version-picker:hover, .info .download:hover {\n  background-color: rgba(0, 0, 0, 0.4);\n}\n.info .version-picker {\n  position: relative;\n  min-width: 35px;\n  cursor: pointer;\n}\n.info .version-picker:hover .options {\n  visibility: visible;\n  opacity: 1;\n}\n.info .version-picker .options {\n  -webkit-transition: opacity 400ms ease;\n  -moz-transition: opacity 400ms ease;\n  -o-transition: opacity 400ms ease;\n  transition: opacity 400ms ease;\n  text-align: center;\n  visibility: hidden;\n  position: absolute;\n  z-index: 888;\n  opacity: 0;\n  top: 100%;\n  left: 0;\n}\n.info .version-picker .options .option {\n  -webkit-transition: background-color 400ms ease;\n  -moz-transition: background-color 400ms ease;\n  -o-transition: background-color 400ms ease;\n  transition: background-color 400ms ease;\n  background-color: rgba(0, 0, 0, 0.4);\n  line-height: 40px;\n  margin: 1px 0 0 0;\n  min-width: 35px;\n  padding: 0 15px;\n  cursor: pointer;\n  height: 40px;\n}\n.info .version-picker .options .option:hover {\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.info .artists {\n  text-shadow: #000 0 2px 0, #000 0 1px 0;\n  letter-spacing: 1px;\n  text-align: center;\n  font-size: 16px;\n  color: #888;\n}\n.info .artists a {\n  text-decoration: none;\n  color: #aaa;\n}\n.info .artists a:hover {\n  text-decoration: underline;\n}\n.info .preview {\n  position: relative;\n  padding: 10px 0;\n}\n.info .preview .version {\n  -webkit-transition: opacity 400ms ease;\n  -moz-transition: opacity 400ms ease;\n  -o-transition: opacity 400ms ease;\n  transition: opacity 400ms ease;\n  text-align: center;\n  /*position: absolute;*/\n  padding: 10px 0;\n  width: 100%;\n  opacity: 0;\n  left: 0;\n  top: 0;\n}\n.info .preview .version.active {\n  opacity: 1;\n}\n.info .preview .version .icon {\n  -webkit-box-shadow: inset rgba(255, 255, 255, 0.2) 4px 5px 5px -5px, inset rgba(0, 0, 0, 0.6) -4px -5px 5px -5px, #000 0 5px 10px;\n  -moz-box-shadow: inset rgba(255, 255, 255, 0.2) 4px 5px 5px -5px, inset rgba(0, 0, 0, 0.6) -4px -5px 5px -5px, #000 0 5px 10px;\n  box-shadow: inset rgba(255, 255, 255, 0.2) 4px 5px 5px -5px, inset rgba(0, 0, 0, 0.6) -4px -5px 5px -5px, #000 0 5px 10px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  display: inline-block;\n  height: 128px;\n  width: 128px;\n  margin: 10px;\n}\n\n#instructions {\n  font-family: Trebuchet MS;\n  padding: 60px 0 100px 0;\n  color: #ccc;\n}\n#instructions h1 {\n  text-align: center;\n  font-size: 24px;\n}\n#instructions ol {\n  margin: 0 auto;\n  width: 500px;\n}\n#instructions ol li {\n  line-height: 26px;\n  font-size: 16px;\n  margin: 15px 0;\n}\n#instructions code {\n  background-color: #111;\n  display: inline-block;\n  padding: 0px 4px;\n  margin: 2px 2px;\n}\n.Mirana {\n  margin-top: -25px;\n}\n.Mirana .display {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-back.png\">http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-back.png</a>\");\n}\n.Mirana .display .front {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-front.png\">http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-front.png</a>\");\n}\n.Mirana .display:before, .Mirana .display:after {\n  background-repeat: repeat-x;\n  background-size: contain;\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 777;\n  content: \"\";\n  width: 100%;\n  top: 0;\n}\n.Mirana .display:before {\n  -webkit-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  -moz-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-clouds-back.png\">http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-clouds-back.png</a>\");\n  -webkit-animation: mirana-front 40s linear 0s infinite;\n  -moz-animation: mirana-front 40s linear 0s infinite;\n  -o-animation: mirana-front 40s linear 0s infinite;\n  animation: mirana-front 40s linear 0s infinite;\n  background-position: 0 -50px;\n}\n.Mirana .display:after {\n  -webkit-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  -moz-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-clouds-front.png\">http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-clouds-front.png</a>\");\n  -webkit-animation: mirana-front 80s linear 0s infinite;\n  -moz-animation: mirana-front 80s linear 0s infinite;\n  -o-animation: mirana-front 80s linear 0s infinite;\n  animation: mirana-front 80s linear 0s infinite;\n  background-position: 0 -50px;\n}\n\n@-o-keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n@-moz-keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n@-webkit-keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n@keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n.Lanaya .display {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-back.png\">http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-back.png</a>\");\n}\n.Lanaya .display .front {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-front.png\">http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-front.png</a>\");\n  z-index: 777;\n}\n.Lanaya .display:before, .Lanaya .display:after {\n  background-repeat: no-repeat;\n  background-size: contain;\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 888;\n  content: \"\";\n  width: 100%;\n  top: 0;\n}\n.Lanaya .display:before {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-particles-front.png\">http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-particles-front.png</a>\");\n  -webkit-animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n  -moz-animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n  -o-animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n  animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n}\n.Lanaya .display:after {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-particles-back.png\">http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-particles-back.png</a>\");\n  -webkit-animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n  -moz-animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n  -o-animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n  animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n}\n.Lanaya .info .preview .version .icon {\n  height: 100px;\n  width: 100px;\n}\n\n@-o-keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n@-moz-keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n@-webkit-keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n@keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n.Pugna .display {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-back.png\">http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-back.png</a>\");\n}\n.Pugna .display .front {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-front.png\">http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-front.png</a>\");\n}\n.Pugna .display:before, .Pugna .display:after {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-dust.png\">http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-dust.png</a>\");\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 777;\n  content: \"\";\n  width: 50%;\n  top: 0;\n}\n.Pugna .display:before {\n  -webkit-animation: pugna-left 14s linear 0s infinite;\n  -moz-animation: pugna-left 14s linear 0s infinite;\n  -o-animation: pugna-left 14s linear 0s infinite;\n  animation: pugna-left 14s linear 0s infinite;\n  -webkit-box-shadow: inset #000 300px 0 250px -100px;\n  -moz-box-shadow: inset #000 300px 0 250px -100px;\n  box-shadow: inset #000 300px 0 250px -100px;\n  left: 0;\n}\n.Pugna .display:after {\n  -webkit-animation: pugna-right 14s linear 0s infinite;\n  -moz-animation: pugna-right 14s linear 0s infinite;\n  -o-animation: pugna-right 14s linear 0s infinite;\n  animation: pugna-right 14s linear 0s infinite;\n  -webkit-box-shadow: inset #000 -300px 0 250px -100px;\n  -moz-box-shadow: inset #000 -300px 0 250px -100px;\n  box-shadow: inset #000 -300px 0 250px -100px;\n  right: 0;\n}\n\n@-o-keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@-moz-keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@-webkit-keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@-o-keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n@-moz-keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n@-webkit-keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n@keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n.Kunkka .display {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-back.png\">http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-back.png</a>\");\n  overflow: hidden;\n}\n.Kunkka .display .front {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-front.png\">http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-front.png</a>\");\n}\n.Kunkka .display:before {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-light.png\">http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-light.png</a>\");\n  -webkit-animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  -moz-animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  -o-animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  position: absolute;\n  display: block;\n  height: 670px;\n  width: 1024px;\n  z-index: 777;\n  content: \"\";\n  top: -200px;\n}\n.Kunkka .display:after {\n  -webkit-box-shadow: inset #000 -350px 0 200px -100px, inset #000 350px 0 200px -100px;\n  -moz-box-shadow: inset #000 -350px 0 200px -100px, inset #000 350px 0 200px -100px;\n  box-shadow: inset #000 -350px 0 200px -100px, inset #000 350px 0 200px -100px;\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 778;\n  content: \"\";\n  width: 100%;\n  top: 0;\n}\n\n@-o-keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n@-moz-keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n@-webkit-keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n@keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n.Slark .display {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Slark/slark-back.png\">http://timbo.kz/images/Dota-2-Icons/Slark/slark-back.png</a>\");\n}\n.Slark .display .front {\n  -webkit-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  -moz-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Slark/slark-rain.png\">http://timbo.kz/images/Dota-2-Icons/Slark/slark-rain.png</a>\");\n  -webkit-animation: slark-front 2s linear 0s infinite;\n  -moz-animation: slark-front 2s linear 0s infinite;\n  -o-animation: slark-front 2s linear 0s infinite;\n  animation: slark-front 2s linear 0s infinite;\n}\n\n@-o-keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n@-moz-keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n@-webkit-keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n@keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n</style>\n\n<script>  \nwindow.scripts.push(function($) {  \n  $(document).ready(function(e) {\n    var style = $('#dota-style');\n    var text = style.text();\n    text = text.replace(/<a href=\".+\">/gi, '');\n    text = text.replace(/<\\/a>/gi, '');\n    style.text(text);\n  });\n});\n</script>\n\n<p></div></p>","image":"https://foxypanda-ghost.s3.amazonaws.com/2016/Sep/Mirana-1472763214979.png","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-29 22:54:32","created_by":1,"updated_at":"2016-09-01 21:45:40","updated_by":1,"published_at":"2015-01-17 21:16:00","published_by":1,"amp":null},{"id":17,"uuid":"e0f431be-154d-43f9-9389-1c8355bfdc09","title":"Envision","slug":"envision","markdown":"","mobiledoc":null,"html":"","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-29 22:54:26","created_by":1,"updated_at":"2016-08-29 22:54:26","updated_by":1,"published_at":null,"published_by":null,"amp":null},{"id":18,"uuid":"4bab5f64-af45-4470-9916-5ec669ea66be","title":"Reddit Themes","slug":"reddit-themes","markdown":"# Abstract\n\nSome time around 2014 I was an avid reddit user (I mostly lurk nowadays) and I made quite a lot of themes for various subreddits. Below you can see some of the themes I have actually released. In reality, there were a bit more but I've never gotten a chance to complete them.\n\n# Public reddit themes:\n\n<p>Egoiste, <a href=\"https://www.reddit.com/r/Egoiste\">/r/Egoiste</a></p>\n\n![Egoiste Reddit theme](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/egoiste-1472395761533.png)\n\n<p>Zireael, <a href=\"https://www.reddit.com/r/Zireael\">/r/Zireael</a></p>\n\n![Zireael Reddit theme](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/zireael-1472395766853.png)\n\n<p>Aeolus, <a href=\"https://www.reddit.com/r/Aeolus\">/r/Aeolus</a></p>\n\n![Aeolus Reddit theme](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/aeolus-1472395770034.png)\n\n<p>Quantum CSS, <a href=\"https://www.reddit.com/r/QuantumCSS\">/r/QuantumCSS</a></p>\n\n![QuantumCSS Reddit theme](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/quantum-1472395775125.png)\n\n# Theme for specific subreddits:\n\n<p>BravelyDefault, <a href=\"https://www.reddit.com/r/BravelyDefaultCSS\">/r/BravelyDefaultCSS</a></p>\n\n![Bravely Default Reddit theme](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/bravely_default-1472395780306.png)\n\n<p>Queen Elsa, <a href=\"https://www.reddit.com/r/QueenElsa\">/r/QueenElsa</a></p>\n\n![Queen Elsa Reddit theme](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/queen_elsa-1472395784764.png)\n\n<p>Get Fair Share, <a href=\"https://www.reddit.com/r/GFSCSS\">/r/GFSCSS</a></p>\n\n![Get Fair Share Reddit theme](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/gfs-1472395788453.png)","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>Some time around 2014 I was an avid reddit user (I mostly lurk nowadays) and I made quite a lot of themes for various subreddits. Below you can see some of the themes I have actually released. In reality, there were a bit more but I've never gotten a chance to complete them.</p>\n\n<h1 id=\"publicredditthemes\">Public reddit themes:</h1>\n\n<p>Egoiste, <a href=\"https://www.reddit.com/r/Egoiste\">/r/Egoiste</a></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/egoiste-1472395761533.png\" alt=\"Egoiste Reddit theme\" /></p>\n\n<p>Zireael, <a href=\"https://www.reddit.com/r/Zireael\">/r/Zireael</a></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/zireael-1472395766853.png\" alt=\"Zireael Reddit theme\" /></p>\n\n<p>Aeolus, <a href=\"https://www.reddit.com/r/Aeolus\">/r/Aeolus</a></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/aeolus-1472395770034.png\" alt=\"Aeolus Reddit theme\" /></p>\n\n<p>Quantum CSS, <a href=\"https://www.reddit.com/r/QuantumCSS\">/r/QuantumCSS</a></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/quantum-1472395775125.png\" alt=\"QuantumCSS Reddit theme\" /></p>\n\n<h1 id=\"themeforspecificsubreddits\">Theme for specific subreddits:</h1>\n\n<p>BravelyDefault, <a href=\"https://www.reddit.com/r/BravelyDefaultCSS\">/r/BravelyDefaultCSS</a></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/bravely_default-1472395780306.png\" alt=\"Bravely Default Reddit theme\" /></p>\n\n<p>Queen Elsa, <a href=\"https://www.reddit.com/r/QueenElsa\">/r/QueenElsa</a></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/queen_elsa-1472395784764.png\" alt=\"Queen Elsa Reddit theme\" /></p>\n\n<p>Get Fair Share, <a href=\"https://www.reddit.com/r/GFSCSS\">/r/GFSCSS</a></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/gfs-1472395788453.png\" alt=\"Get Fair Share Reddit theme\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-28 14:47:37","created_by":1,"updated_at":"2016-08-30 19:09:41","updated_by":1,"published_at":"2015-07-24 14:49:00","published_by":1,"amp":null},{"id":19,"uuid":"cdf58dc7-dab1-44bd-82bc-9aae4d015cdd","title":"MyAnimeTimeline and Kuristina","slug":"my-anime-timeline-and-kuristina","markdown":"# Abstract\n\nOne day I was just looking through my anime list and realised I have specified the start and finish dates for every title I watched. I immediately thought that it would be neat to map all the titles I completed on a timeline to see how my tastes changed over time, which anime I watched first, last, in which season I watched the most and so on. This is how MyAnimeTimeline was born and, as a side product, I made a small API tool called Kuristina. Find out more about both of them below.\n\n# Kuristina, or Fetching anime lists\n\n","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>One day I was just looking through my anime list and realised I have specified the start and finish dates for every title I watched. I immediately thought that it would be neat to map all the titles I completed on a timeline to see how my tastes changed over time, which anime I watched first, last, in which season I watched the most and so on. This is how MyAnimeTimeline was born and, as a side product, I made a small API tool called Kuristina. Find out more about both of them below.</p>\n\n<h1 id=\"kuristinaorfetchinganimelists\">Kuristina, or Fetching anime lists</h1>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-10-22 14:35:12","created_by":1,"updated_at":"2016-10-22 21:29:09","updated_by":1,"published_at":null,"published_by":null,"amp":null},{"id":20,"uuid":"b3a79170-a6ff-4e19-8078-af30ae37288b","title":"Reflex PHP","slug":"reflex-php","markdown":"# Abstract\n\nI was thinking about an easy way to simulate various APIs, and I was looking for a reusable solution that doesn't require much setup and if possible is platform/language independent. The primary application would be in development of apps that rely on some API that has not been made available yet and in testing how one's system would respond to delayed API responses.\n\n# Introducing Reflex\n\nReflex is an experimental tool that does exactly that: it sends back whatever POST request body it receives allowing the user to adjust the delay, content type, or alter the way the output is produced. You can find usage instructions on [its GitHub page](https://github.com/TimboKZ/reflex), and the tool itself is available at [https://hosting.kawaiidesu.me/reflex/](https://hosting.kawaiidesu.me/reflex/).","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>I was thinking about an easy way to simulate various APIs, and I was looking for a reusable solution that doesn't require much setup and if possible is platform/language independent. The primary application would be in development of apps that rely on some API that has not been made available yet and in testing how one's system would respond to delayed API responses.</p>\n\n<h1 id=\"introducingreflex\">Introducing Reflex</h1>\n\n<p>Reflex is an experimental tool that does exactly that: it sends back whatever POST request body it receives allowing the user to adjust the delay, content type, or alter the way the output is produced. You can find usage instructions on <a href=\"https://github.com/TimboKZ/reflex\">its GitHub page</a>, and the tool itself is available at <a href=\"https://hosting.kawaiidesu.me/reflex/\">https://hosting.kawaiidesu.me/reflex/</a>.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-10-30 19:07:28","created_by":1,"updated_at":"2016-10-30 19:15:51","updated_by":1,"published_at":"2016-10-30 19:15:51","published_by":1,"amp":null},{"id":21,"uuid":"a4b8add6-7a31-4c27-a26f-a29e685bbde6","title":"Panoramas from a trip to Japan","slug":"panoramas-from-a-trip-to-japan","markdown":"# Abstract\n\nIn June of 2016 I spent 2 weeks travelling around Japan with a bunch of friends. We've covered a fair bit of southern Japan, including Hiroshima, Osaka, Kobe, Nara, Kyoto, Atami and Tokyo. It was an amazing experience and since I'm no wordsmith but I still wanted to document my trip, I ended up taking around a thousand and a half pictures of various places and events in Japan. That said, sadly I'm no professional photographer either so the pictures aren't exactly masterpieces, but they do bring up some good memories and I personally find them pretty.\n\n> This post contains panoramas from the trip. Make sure to check out [pictures](https://foxypanda.me/my-trip-to-japan-in-summer-2016/) too!\n\n# Panoramas\n\nAll of these were taken on iPhone, so apologies for the quality. I wanted to post them because I think they give quite a good idea of what it the atmosphere there felt like.\n\n<style>\n    #panorama {\n        width: 600px;\n        height: 400px;\n    }\n</style>\n\n<link rel=\"stylesheet\" href=\"https://cdn.pannellum.org/2.3/pannellum.css\"/>\n<script type=\"text/javascript\" src=\"https://cdn.pannellum.org/2.3/pannellum.js\"></script>\n\n<div id=\"panorama\"></div>\n<script>\npannellum.viewer('panorama', {\n    \"type\": \"equirectangular\",\n    \"panorama\": \"https://foxypanda-ghost.s3.amazonaws.com/2017/May/6VnmYWQ-1494109789295.jpg\"\n});\n</script>\n\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/6VnmYWQ-1494109789295.jpg)","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>In June of 2016 I spent 2 weeks travelling around Japan with a bunch of friends. We've covered a fair bit of southern Japan, including Hiroshima, Osaka, Kobe, Nara, Kyoto, Atami and Tokyo. It was an amazing experience and since I'm no wordsmith but I still wanted to document my trip, I ended up taking around a thousand and a half pictures of various places and events in Japan. That said, sadly I'm no professional photographer either so the pictures aren't exactly masterpieces, but they do bring up some good memories and I personally find them pretty.</p>\n\n<blockquote>\n  <p>This post contains panoramas from the trip. Make sure to check out <a href=\"https://foxypanda.me/my-trip-to-japan-in-summer-2016/\">pictures</a> too!</p>\n</blockquote>\n\n<h1 id=\"panoramas\">Panoramas</h1>\n\n<p>All of these were taken on iPhone, so apologies for the quality. I wanted to post them because I think they give quite a good idea of what it the atmosphere there felt like.</p>\n\n<style>  \n    #panorama {\n        width: 600px;\n        height: 400px;\n    }\n</style>\n\n<p><link rel=\"stylesheet\" href=\"https://cdn.pannellum.org/2.3/pannellum.css\"/>  </p>\n\n<script type=\"text/javascript\" src=\"https://cdn.pannellum.org/2.3/pannellum.js\"></script>\n\n<div id=\"panorama\"></div>  \n<script>  \npannellum.viewer('panorama', {  \n    \"type\": \"equirectangular\",\n    \"panorama\": \"https://foxypanda-ghost.s3.amazonaws.com/2017/May/6VnmYWQ-1494109789295.jpg\"\n});\n</script>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/6VnmYWQ-1494109789295.jpg\" alt=\"\" /></p>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-05-06 22:26:13","created_by":1,"updated_at":"2017-05-06 22:41:30","updated_by":1,"published_at":null,"published_by":null,"amp":null},{"id":22,"uuid":"65895206-1fac-42ee-bd10-b80398f331b9","title":"COMP207P Compilers Guidelines Part 1: Lexing and Parsing","slug":"comp207p-compilers-coursework-guidelines","markdown":"# Abstract\n\nDuring my 2nd year as a computer scientist at UCL I got a chance to work on an amazing compilers coursework. It was a part of COMP207P Compilers module and together with 2 of my teammates I was faced with a challenge to develop the compiler front-end for a fictitious $\\tilde{Z}$ language.\n\nIn this article I'll be giving general guidelines on how to get started with this coursework. It probably won't make much sense to you if you're not a computer science student at UCL, but I do give some useful tips for using JFlex and CUP with Intellij Idea so you might wanna check that part out. Unfortunately I cannot talk about the actual implementation because of plagiarism concerns.\n\nGaps in knowledge can vary a lot from person to person so I'll cover the basics of pretty much everything that you might need in this coursework. Hopefully, if you happen to be my teammate some time in the future, you'll know all of this :^) . Keep in mind that I'm working on Linux so some of the guidelines here might not work for you, in which case I suggest you use one of the Linux machines in CS labs.\n\nFinally, keep in mind that I won't be the one marking your coursework and I take no responsibility whatsoever for whatever happens to be the outcome. That said, I've explicitly asked for [Earl Barr's](http://earlbarr.com/) permission to share these guidelines and my test runner, which you'll find below.\n\n> This article talks about the first piece of coursework in the COMP207P course, the one concerned with compiler's frontend. The article about the second part of the coursework can be found [here](https://foxypanda.me/comp207p-compilers-guidelines-part-2-java-bytecode-optimisation/).\n\n<!-- -->\n> Please feel free to comment below or let me know through other media if you have any concerns or suggestions about the guidelines on this page. I will try to fix them to the best of my ability.\n\n# Setting up the project\n\nYou'll most definitely be working in groups so you absolutely **must** use Git. I'm gonna talk about how to setup a Git repo for this coursework. In the end I'll mention continuous integration (CI) but it's up to you whether you're gonna use it or not.\n\n## Setting up Git\n\nFirst of all, setup a Git repository. You can use [GitHub](https://github.com/), [GitLab.com](https://gitlab.com/users/sign_in), or [UCL CS GitLab](https://gitlab.cs.ucl.ac.uk/users/sign_in), whichever you prefer - at the end of the day they all use Git. *That said, remember that you'll most likely have to submit your coursework through UCL CS GitLab. Knowing this, I personally went with GitHub anyway, at least for the development phase.*\n\nInstall Git and setup a repository for your project (following tutorials from the service you chose if needed) and `git clone` it to somewhere on your local machine. **I strongly suggest** you look at [this guide](http://rogerdudler.github.io/git-guide/) if you lack experience with Git, your teammates will thank me later. Additionally, if you want a nice way to manage the collaboration process, take a look [at this branching model](http://nvie.com/posts/a-successful-git-branching-model/).\n\nFrom here onward I will assume that you have `git` installed and your repository is in a folder called `comp207p` (replace with whatever name you chose). That is, if you run `git status` when inside directory `comp207p` you should see something like this:\n\n<pre class=\"command-line\" data-user=\"tim\" data-host=\"dmnt\" data-output=\"2-3\"><code class=\"language-bash\">git status\nOn branch master\nnothing to commit, working tree clean</code></pre>\n\nTo make life easier for yourself and your teammates, you'll need to add a `.gitignore` file. Unless you know how to make your own, I suggest using [the one I put on GitHub Gist](https://gist.github.com/TimboKZ/868cc0a23fdd217da2e581e59531172b). Simple create a `.gitignore` file in your repo directory (e.g. `comp207p/.gitignore`) and paste the contents of the Gist in. This will make sure you don't clutter the repository by pushing temp/generated files.\n\n## Getting the source code\n\nFirst of all, grab the `project.zip` from the [Moodle page](https://moodle.ucl.ac.uk/mod/folder/view.php?id=1864623) for this coursework (only available to UCL students). Unzip it into the folder with your Git repo (`comp207p` in my case). The structure you'll have would look something like this:\n\n```language-clike\n├── bin\n├── lib\n│   ├── java-cup-11b.jar\n│   ├── java-cup-11b-runtime.jar\n│   └── jflex-1.6.1.jar\n├── Makefile\n├── README.md\n├── runTests.sh\n├── src\n│   ├── SC.java\n│   ├── Tests.java\n│   └── UnitTests.java\n├── test_checker.py\n└── tests\n    └── open\n        ├── // Bunch of tests\n        └── ...\n```\n\nTechnically, you can begin writing everything from scratch, but to get some code to start with you can download the *Compiler demo* from [COMP207P Moodle page](https://moodle.ucl.ac.uk/course/view.php?id=10783), which will give you an archive called `tool-demo.tar.gz`. From this archive you'll only need 2 files, `Lexer.lex` and `Parser.cup`, both of which are located in the `src/` folder. Copy these 2 files into the `src/` folder of your project. \n\n> **Warning:** The `Lexer.lex` and `Parser.cup` we used accept a **different language**, so you will definitely need to change and delete some parts.\n\nTo make sure the project compiles you need to define a function called `syntax_error` and a boolean called `syntaxErrors`, as described in paragraphs 21 and 22 of `project.pdf` supplied with coursework source. Somewhere between `parser code {:` and `:}` in your `Parser.cup` add this:\n\n```language-java\npublic boolean syntaxErrors;\npublic void syntax_error(Symbol current_token) {\n    report_error(\n        \"Syntax error at line \" + (current_token.left+1) + \", column \"\n+ current_token.right, null\n    );\n}\n```\n\nFinally, on line 23 in `src/SC.java` you might want to uncomment `e.printStackTrace();` so that your parser reports Java errors (and not just Parser errors). *Remember to comment it out again before submitting.*\n\n## Preparing your IDE\n\nWhile you're free to use whatever editor/IDE you like (especially if it's Vim :>) I'd strongly suggest using [IntelliJ Idea](https://www.jetbrains.com/idea/) by JetBrains. If you're a student you get a free license for almost all JetBrains software, including IntelliJ Idea Ultimate. The steps below only apply to this IDE.\n\nI'm gonna assume you got yourself a license and installed Idea. To make working with JFlex and CUP easier you will need 2 Idea plugins - `JFlex Support` and `Cup Support`. Install them by going to `File > Settings > Plugins > Browser repositories...` and searching for an appropriate title. You'll also need `BashSupport` to run tests and `.ignore` plugin might prove useful for development in general.\n\nAfter you restart Idea the plugins will begin to work. Syntax highlighting and auto-completion for `.cup` should turn on automatically. For `.lex` files, you might have to enable it manually by right-clicking on `Lexer.lex` in Project browser, choosing *Associate with File Type* and picking *JFlex* from the list.\n\n# Testing and CI\n\nGiven you have Java 8 installed, you now can run `make` and `make test` in your repo to run the test suite provided with the source of the coursework. Unsurprisingly, most of them will fail. Technically, this is enough to get you going and you can jump straight to the development process. That said, you might find my approach to testing a bit more convenient, I'll talk more about it below.\n\n## My approach to testing\n\nI like pretty console output so I wrote a test runner which I quite modestly called `tim-test.sh`, it looks something like this:\n\n<img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/COMP207_test_runner-1487358357506.png\" alt=\"tim-test.sh\" style=\"border: solid 1px #25d7e5\">\n\nIt recursively iterates over directories you specify and runs tests, using `tests/custom/` directory as the default. It can also run a single test, I'll talk more about it below, but if you want to use it straight away you can find [the script on GitHub Gist](https://gist.github.com/TimboKZ/93cf9d247d18882b6bb6127195f72a1b).\n\nTo use the test runner, paste the contents of the Gist mentioned above into a file called `tim-test.sh` (or any other name you want, really) in the root of your project. Make sure it's executable by running `chmod +x tim-test.sh` and you're good to go. Running `./tim-test.sh` without any parameters will give you usage instructions.\n\nTo see `tim-test.sh` in action, let's create 3 very basic tests and put them into `tests/custom/`. By the way, all of this done can be done without leaving IntelliJ Idea using the Project browser. First one, `tests/custom/n-empty-main.s`:\n\n```language-clike\nmain {\n};\n```\n\nSecond, `tests/custom/p-main.s`:\n\n```language-clike\nmain { print 0; };\n```\n\nAnd finally, third, `tests/custom/i-p-main-read.s`:\n\n```language-clike\nmain { read test; };\n```\n\nNow you can run tests by executing `./tim-test.sh all`, `./tim-test.sh dir <path-to-test-dir>` or `./tim-test.sh one <path-to-test-file>`. You should get the output similar to the one seen below.\n<pre class=\"command-line\" data-user=\"tim\" data-host=\"dmnt\" data-output=\"2-100\"><code class=\"language-bash\">./tim-test.sh all\n■━━━━━━━━━━━━━■\nRebuilding project before testing...\n■━━━━━━━━━━━━━■\n\n# `make` output\n# ...\n\n■━━━━━━━━━━━━━■\nStarting tests!\n■━━━━━━━━━━━━━■\n\n┏━■ ./tests/custom/ [3 tests]\n┣━━ IGNR i-p-main-read.s\n┣━━ PASS n-empty-main.s\n┗━┓ FAIL p-main.s\n   ┗━ Error: Was supposed to succeed but failed.\n          Syntax error at line 1, column 5 # ... etc.\n\n■━━━━━━━━━━━━━■\nSome tests failed!\n1 succeeded, 1 failed, 1 ignored.\n■━━━━━━━━━━━━━■</code></pre>\n\nTest files with names beginning with `p` are expected to be parsed successfully, `n` should fail to parse and `i` will not be run but will still be displayed in output. Keep in mind that `tim-test.sh` runs `make clean` and `make` before running tests, so you don't have to manually recompile the source.\n\nIf you're using IntelliJ Idea and have the `BashSupport` plugin installed, you can automate the process by [creating a Run configuration](https://www.jetbrains.com/help/idea/2016.3/creating-and-editing-run-debug-configurations.html). Make sure you choose the Bash preset and set settings to something similar to the picture below. Once you're done, you can quickly execute tests using `Shift + F10` shortcut without ever leaving the editor.\n\n![tim-test.sh run configuration in Intellij Idea](https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/tim_test_config-1487359938614.png)\n\n## Continuous integration\n\nCI is a bit out of scope of this article so I'm not gonna talk much about it. I personally use [Travis CI](https://travis-ci.com/) with GitHub, but there are other solutions like [GitLab CI](https://about.gitlab.com/gitlab-ci/). If you're using `tim-test.sh`, here's an example `.travis.yml` config:\n\n```language-yaml\nlanguage: java\njdk:\n  - oraclejdk8\nscript:\n - \"cd $TRAVIS_BUILD_DIR\"\n - \"./tim-test.sh all\"\n```\n\nThe only dependency is the JDK, because `tim-test.sh` only uses Shell scripting. If you want to use `make` and `make test` for CI, make sure to specify Python as a dependency.\n\n# Conclusion\n\nSo by now you should have a Git project set up, proper JFlex and Java CUP highlighting in Intellij Idea and testing pipeline that uses `tim-test.sh`. Now you just have to develop a working lexer and parser for $\\tilde{Z}$, which is the easy part :>.\n\nMake sure you understand the basics of JFlex and Java CUP before you start. Also, please report any issues you find with this article are `tim-test.sh` so I can fix them before someone else gets affected.","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>During my 2nd year as a computer scientist at UCL I got a chance to work on an amazing compilers coursework. It was a part of COMP207P Compilers module and together with 2 of my teammates I was faced with a challenge to develop the compiler front-end for a fictitious $\\tilde{Z}$ language.</p>\n\n<p>In this article I'll be giving general guidelines on how to get started with this coursework. It probably won't make much sense to you if you're not a computer science student at UCL, but I do give some useful tips for using JFlex and CUP with Intellij Idea so you might wanna check that part out. Unfortunately I cannot talk about the actual implementation because of plagiarism concerns.</p>\n\n<p>Gaps in knowledge can vary a lot from person to person so I'll cover the basics of pretty much everything that you might need in this coursework. Hopefully, if you happen to be my teammate some time in the future, you'll know all of this :^) . Keep in mind that I'm working on Linux so some of the guidelines here might not work for you, in which case I suggest you use one of the Linux machines in CS labs.</p>\n\n<p>Finally, keep in mind that I won't be the one marking your coursework and I take no responsibility whatsoever for whatever happens to be the outcome. That said, I've explicitly asked for <a href=\"http://earlbarr.com/\">Earl Barr's</a> permission to share these guidelines and my test runner, which you'll find below.</p>\n\n<blockquote>\n  <p>This article talks about the first piece of coursework in the COMP207P course, the one concerned with compiler's frontend. The article about the second part of the coursework can be found <a href=\"https://foxypanda.me/comp207p-compilers-guidelines-part-2-java-bytecode-optimisation/\">here</a>.</p>\n</blockquote>\n\n<!-- -->  \n\n<blockquote>\n  <p>Please feel free to comment below or let me know through other media if you have any concerns or suggestions about the guidelines on this page. I will try to fix them to the best of my ability.</p>\n</blockquote>\n\n<h1 id=\"settinguptheproject\">Setting up the project</h1>\n\n<p>You'll most definitely be working in groups so you absolutely <strong>must</strong> use Git. I'm gonna talk about how to setup a Git repo for this coursework. In the end I'll mention continuous integration (CI) but it's up to you whether you're gonna use it or not.</p>\n\n<h2 id=\"settingupgit\">Setting up Git</h2>\n\n<p>First of all, setup a Git repository. You can use <a href=\"https://github.com/\">GitHub</a>, <a href=\"https://gitlab.com/users/sign_in\">GitLab.com</a>, or <a href=\"https://gitlab.cs.ucl.ac.uk/users/sign_in\">UCL CS GitLab</a>, whichever you prefer - at the end of the day they all use Git. <em>That said, remember that you'll most likely have to submit your coursework through UCL CS GitLab. Knowing this, I personally went with GitHub anyway, at least for the development phase.</em></p>\n\n<p>Install Git and setup a repository for your project (following tutorials from the service you chose if needed) and <code>git clone</code> it to somewhere on your local machine. <strong>I strongly suggest</strong> you look at <a href=\"http://rogerdudler.github.io/git-guide/\">this guide</a> if you lack experience with Git, your teammates will thank me later. Additionally, if you want a nice way to manage the collaboration process, take a look <a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">at this branching model</a>.</p>\n\n<p>From here onward I will assume that you have <code>git</code> installed and your repository is in a folder called <code>comp207p</code> (replace with whatever name you chose). That is, if you run <code>git status</code> when inside directory <code>comp207p</code> you should see something like this:</p>\n\n<pre class=\"command-line\" data-user=\"tim\" data-host=\"dmnt\" data-output=\"2-3\"><code class=\"language-bash\">git status  \nOn branch master  \nnothing to commit, working tree clean</code></pre>\n\n<p>To make life easier for yourself and your teammates, you'll need to add a <code>.gitignore</code> file. Unless you know how to make your own, I suggest using <a href=\"https://gist.github.com/TimboKZ/868cc0a23fdd217da2e581e59531172b\">the one I put on GitHub Gist</a>. Simple create a <code>.gitignore</code> file in your repo directory (e.g. <code>comp207p/.gitignore</code>) and paste the contents of the Gist in. This will make sure you don't clutter the repository by pushing temp/generated files.</p>\n\n<h2 id=\"gettingthesourcecode\">Getting the source code</h2>\n\n<p>First of all, grab the <code>project.zip</code> from the <a href=\"https://moodle.ucl.ac.uk/mod/folder/view.php?id=1864623\">Moodle page</a> for this coursework (only available to UCL students). Unzip it into the folder with your Git repo (<code>comp207p</code> in my case). The structure you'll have would look something like this:</p>\n\n<pre><code class=\"language-clike\">├── bin\n├── lib\n│   ├── java-cup-11b.jar\n│   ├── java-cup-11b-runtime.jar\n│   └── jflex-1.6.1.jar\n├── Makefile\n├── README.md\n├── runTests.sh\n├── src\n│   ├── SC.java\n│   ├── Tests.java\n│   └── UnitTests.java\n├── test_checker.py\n└── tests\n    └── open\n        ├── // Bunch of tests\n        └── ...\n</code></pre>\n\n<p>Technically, you can begin writing everything from scratch, but to get some code to start with you can download the <em>Compiler demo</em> from <a href=\"https://moodle.ucl.ac.uk/course/view.php?id=10783\">COMP207P Moodle page</a>, which will give you an archive called <code>tool-demo.tar.gz</code>. From this archive you'll only need 2 files, <code>Lexer.lex</code> and <code>Parser.cup</code>, both of which are located in the <code>src/</code> folder. Copy these 2 files into the <code>src/</code> folder of your project. </p>\n\n<blockquote>\n  <p><strong>Warning:</strong> The <code>Lexer.lex</code> and <code>Parser.cup</code> we used accept a <strong>different language</strong>, so you will definitely need to change and delete some parts.</p>\n</blockquote>\n\n<p>To make sure the project compiles you need to define a function called <code>syntax_error</code> and a boolean called <code>syntaxErrors</code>, as described in paragraphs 21 and 22 of <code>project.pdf</code> supplied with coursework source. Somewhere between <code>parser code {:</code> and <code>:}</code> in your <code>Parser.cup</code> add this:</p>\n\n<pre><code class=\"language-java\">public boolean syntaxErrors;  \npublic void syntax_error(Symbol current_token) {  \n    report_error(\n        \"Syntax error at line \" + (current_token.left+1) + \", column \"\n+ current_token.right, null\n    );\n}\n</code></pre>\n\n<p>Finally, on line 23 in <code>src/SC.java</code> you might want to uncomment <code>e.printStackTrace();</code> so that your parser reports Java errors (and not just Parser errors). <em>Remember to comment it out again before submitting.</em></p>\n\n<h2 id=\"preparingyouride\">Preparing your IDE</h2>\n\n<p>While you're free to use whatever editor/IDE you like (especially if it's Vim :>) I'd strongly suggest using <a href=\"https://www.jetbrains.com/idea/\">IntelliJ Idea</a> by JetBrains. If you're a student you get a free license for almost all JetBrains software, including IntelliJ Idea Ultimate. The steps below only apply to this IDE.</p>\n\n<p>I'm gonna assume you got yourself a license and installed Idea. To make working with JFlex and CUP easier you will need 2 Idea plugins - <code>JFlex Support</code> and <code>Cup Support</code>. Install them by going to <code>File &gt; Settings &gt; Plugins &gt; Browser repositories...</code> and searching for an appropriate title. You'll also need <code>BashSupport</code> to run tests and <code>.ignore</code> plugin might prove useful for development in general.</p>\n\n<p>After you restart Idea the plugins will begin to work. Syntax highlighting and auto-completion for <code>.cup</code> should turn on automatically. For <code>.lex</code> files, you might have to enable it manually by right-clicking on <code>Lexer.lex</code> in Project browser, choosing <em>Associate with File Type</em> and picking <em>JFlex</em> from the list.</p>\n\n<h1 id=\"testingandci\">Testing and CI</h1>\n\n<p>Given you have Java 8 installed, you now can run <code>make</code> and <code>make test</code> in your repo to run the test suite provided with the source of the coursework. Unsurprisingly, most of them will fail. Technically, this is enough to get you going and you can jump straight to the development process. That said, you might find my approach to testing a bit more convenient, I'll talk more about it below.</p>\n\n<h2 id=\"myapproachtotesting\">My approach to testing</h2>\n\n<p>I like pretty console output so I wrote a test runner which I quite modestly called <code>tim-test.sh</code>, it looks something like this:</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/COMP207_test_runner-1487358357506.png\" alt=\"tim-test.sh\" style=\"border: solid 1px #25d7e5\"></p>\n\n<p>It recursively iterates over directories you specify and runs tests, using <code>tests/custom/</code> directory as the default. It can also run a single test, I'll talk more about it below, but if you want to use it straight away you can find <a href=\"https://gist.github.com/TimboKZ/93cf9d247d18882b6bb6127195f72a1b\">the script on GitHub Gist</a>.</p>\n\n<p>To use the test runner, paste the contents of the Gist mentioned above into a file called <code>tim-test.sh</code> (or any other name you want, really) in the root of your project. Make sure it's executable by running <code>chmod +x tim-test.sh</code> and you're good to go. Running <code>./tim-test.sh</code> without any parameters will give you usage instructions.</p>\n\n<p>To see <code>tim-test.sh</code> in action, let's create 3 very basic tests and put them into <code>tests/custom/</code>. By the way, all of this done can be done without leaving IntelliJ Idea using the Project browser. First one, <code>tests/custom/n-empty-main.s</code>:</p>\n\n<pre><code class=\"language-clike\">main {  \n};\n</code></pre>\n\n<p>Second, <code>tests/custom/p-main.s</code>:</p>\n\n<pre><code class=\"language-clike\">main { print 0; };  \n</code></pre>\n\n<p>And finally, third, <code>tests/custom/i-p-main-read.s</code>:</p>\n\n<pre><code class=\"language-clike\">main { read test; };  \n</code></pre>\n\n<p>Now you can run tests by executing <code>./tim-test.sh all</code>, <code>./tim-test.sh dir &lt;path-to-test-dir&gt;</code> or <code>./tim-test.sh one &lt;path-to-test-file&gt;</code>. You should get the output similar to the one seen below.  </p>\n\n<pre class=\"command-line\" data-user=\"tim\" data-host=\"dmnt\" data-output=\"2-100\"><code class=\"language-bash\">./tim-test.sh all  \n■━━━━━━━━━━━━━■\nRebuilding project before testing...  \n■━━━━━━━━━━━━━■\n\n# `make` output\n# ...\n\n■━━━━━━━━━━━━━■\nStarting tests!  \n■━━━━━━━━━━━━━■\n\n┏━■ ./tests/custom/ [3 tests]\n┣━━ IGNR i-p-main-read.s\n┣━━ PASS n-empty-main.s\n┗━┓ FAIL p-main.s\n   ┗━ Error: Was supposed to succeed but failed.\n          Syntax error at line 1, column 5 # ... etc.\n\n■━━━━━━━━━━━━━■\nSome tests failed!  \n1 succeeded, 1 failed, 1 ignored.  \n■━━━━━━━━━━━━━■</code></pre>\n\n<p>Test files with names beginning with <code>p</code> are expected to be parsed successfully, <code>n</code> should fail to parse and <code>i</code> will not be run but will still be displayed in output. Keep in mind that <code>tim-test.sh</code> runs <code>make clean</code> and <code>make</code> before running tests, so you don't have to manually recompile the source.</p>\n\n<p>If you're using IntelliJ Idea and have the <code>BashSupport</code> plugin installed, you can automate the process by <a href=\"https://www.jetbrains.com/help/idea/2016.3/creating-and-editing-run-debug-configurations.html\">creating a Run configuration</a>. Make sure you choose the Bash preset and set settings to something similar to the picture below. Once you're done, you can quickly execute tests using <code>Shift + F10</code> shortcut without ever leaving the editor.</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/tim_test_config-1487359938614.png\" alt=\"tim-test.sh run configuration in Intellij Idea\" /></p>\n\n<h2 id=\"continuousintegration\">Continuous integration</h2>\n\n<p>CI is a bit out of scope of this article so I'm not gonna talk much about it. I personally use <a href=\"https://travis-ci.com/\">Travis CI</a> with GitHub, but there are other solutions like <a href=\"https://about.gitlab.com/gitlab-ci/\">GitLab CI</a>. If you're using <code>tim-test.sh</code>, here's an example <code>.travis.yml</code> config:</p>\n\n<pre><code class=\"language-yaml\">language: java  \njdk:  \n  - oraclejdk8\nscript:  \n - \"cd $TRAVIS_BUILD_DIR\"\n - \"./tim-test.sh all\"\n</code></pre>\n\n<p>The only dependency is the JDK, because <code>tim-test.sh</code> only uses Shell scripting. If you want to use <code>make</code> and <code>make test</code> for CI, make sure to specify Python as a dependency.</p>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>So by now you should have a Git project set up, proper JFlex and Java CUP highlighting in Intellij Idea and testing pipeline that uses <code>tim-test.sh</code>. Now you just have to develop a working lexer and parser for $\\tilde{Z}$, which is the easy part :>.</p>\n\n<p>Make sure you understand the basics of JFlex and Java CUP before you start. Also, please report any issues you find with this article are <code>tim-test.sh</code> so I can fix them before someone else gets affected.</p>","image":"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/comp207p_post-1487360437234.png","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":"COMP207P Compilers Coursework Guidelines - JFlex and Java CUP with Intellij Idea","meta_description":"In this article I'm giving general advice about UCL Computer Science COMP207P coursework, covering Git, CI, JFlex, Java CUP, Intellij Idea and tim-test.sh.","author_id":1,"created_at":"2017-02-17 16:50:59","created_by":1,"updated_at":"2017-04-06 21:53:06","updated_by":1,"published_at":"2017-02-17 19:38:03","published_by":1,"amp":null},{"id":23,"uuid":"d6a40d64-5a0d-4c11-b554-c4502f0b23c1","title":"Blitz Static Site Generator","slug":"blitz-static-site-generator","markdown":"# Abstract\n\n\n# Blitz\n\nBlitz is my first published NPM package.\n\n","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<h1 id=\"blitz\">Blitz</h1>\n\n<p>Blitz is my first published NPM package.</p>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-11-13 01:25:04","created_by":1,"updated_at":"2017-01-10 19:17:29","updated_by":1,"published_at":null,"published_by":null,"amp":null},{"id":24,"uuid":"c4f7260c-47b8-4366-9b3e-2be0a4663831","title":"Spark: Ambient Lighting System","slug":"spark","markdown":"# Abstract\n\nI have recently put together a new rig, and it just so happened I had several LED strips leftover from one of my previous projects. Sadly, I couldn't get my hands on a monitor with built-in ambient lighting so I decided to build my own solution. This was the core idea for Spark, an ambient lighting system built using an Arduino, Java and some LED strips.\n\n# Development\n\nInitially I was going to use C++ or C# with Visual Studio to make a Windows application, but then decided to stick with Java as a way quicker and simpler solution for this particular problem, especially considering the limited amount of time I could invest into this project. Another unfortunate outcome of this was that I did not have the time to bring both hardware and software for this project to a high enough level of quality, so I would not recommend reusing the source code for this project anywhere else. Instead, consider it to be something like a proof of concept and maybe an inspiration for similar ideas.\n\nThe whole setup essentially consists of 2 major parts: The host machine, which extracts the \"average\" colour from the current image on the screen, serialises it and sends it to Arduino over USB serial, and Arduino itself which deserialises the data and adjusts the voltages on the LED strip to change the colour and brightness of LEDs. You can see a picture of the Arduino with a bread board and some MOSFETs, a 12v battery and an LED strip below.\n\n![Arduino with a bread board, some MOSFETs, 12v battery and an LED strip.](https://foxypanda-ghost.s3.amazonaws.com/2016/Nov/IMG_2548-1478748066122.jpg)\n\nThe Java source code is pretty self explanatory. The code takes a screenshot of the screen every set interval of time using an [AWT Robot](https://docs.oracle.com/javase/8/docs/api/java/awt/Robot.html) and extracts the \"average\" colour from screenshot by averaging red, green and blue channels for every 5th or so pixel. Then, it converts the intensity of each RGB channel from 0-255 to 0-36 scale and produces a string of length 3 and format `RGB`, where `R`, `G` and `B` are intensities in base 36 (more about it below). Once the string is ready, it is sent to the Arduino over serial.\n\nTo send less characters over serial I decided to use base 36 numbers, which basically utilises all 10 digits from 0 to 9 and all lowercase letters in the English alphabet. When Arduino receives the RGB string, it converts it back to base 10 and to 0-255 scale. Once this is done, it changes the voltages on the pins corresponding to each colour to match the intensity extracted from the string. Then, using some MOSFET magic on a bread board, 12v battery powers the LED strip which lits up in our desired colour.\n\nI am aware that everything described above is far from perfect, but sadly at the time I didn't have the chance to improve anything. I will definitely be revisiting this idea in the future to come up with a better solution.\n\n# Demo and source code\n\nAll of the source code can be found in [Spark's GitHub repo](https://github.com/TimboKZ/spark). Below is a short demonstration of the system in action. Keep in mind the Ambient lighting system is only controlling the LEDs behind the monitor, everything else is controlled by other 3rd party software.\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/V-m6wq622P0\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>I have recently put together a new rig, and it just so happened I had several LED strips leftover from one of my previous projects. Sadly, I couldn't get my hands on a monitor with built-in ambient lighting so I decided to build my own solution. This was the core idea for Spark, an ambient lighting system built using an Arduino, Java and some LED strips.</p>\n\n<h1 id=\"development\">Development</h1>\n\n<p>Initially I was going to use C++ or C# with Visual Studio to make a Windows application, but then decided to stick with Java as a way quicker and simpler solution for this particular problem, especially considering the limited amount of time I could invest into this project. Another unfortunate outcome of this was that I did not have the time to bring both hardware and software for this project to a high enough level of quality, so I would not recommend reusing the source code for this project anywhere else. Instead, consider it to be something like a proof of concept and maybe an inspiration for similar ideas.</p>\n\n<p>The whole setup essentially consists of 2 major parts: The host machine, which extracts the \"average\" colour from the current image on the screen, serialises it and sends it to Arduino over USB serial, and Arduino itself which deserialises the data and adjusts the voltages on the LED strip to change the colour and brightness of LEDs. You can see a picture of the Arduino with a bread board and some MOSFETs, a 12v battery and an LED strip below.</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Nov/IMG_2548-1478748066122.jpg\" alt=\"Arduino with a bread board, some MOSFETs, 12v battery and an LED strip.\" /></p>\n\n<p>The Java source code is pretty self explanatory. The code takes a screenshot of the screen every set interval of time using an <a href=\"https://docs.oracle.com/javase/8/docs/api/java/awt/Robot.html\">AWT Robot</a> and extracts the \"average\" colour from screenshot by averaging red, green and blue channels for every 5th or so pixel. Then, it converts the intensity of each RGB channel from 0-255 to 0-36 scale and produces a string of length 3 and format <code>RGB</code>, where <code>R</code>, <code>G</code> and <code>B</code> are intensities in base 36 (more about it below). Once the string is ready, it is sent to the Arduino over serial.</p>\n\n<p>To send less characters over serial I decided to use base 36 numbers, which basically utilises all 10 digits from 0 to 9 and all lowercase letters in the English alphabet. When Arduino receives the RGB string, it converts it back to base 10 and to 0-255 scale. Once this is done, it changes the voltages on the pins corresponding to each colour to match the intensity extracted from the string. Then, using some MOSFET magic on a bread board, 12v battery powers the LED strip which lits up in our desired colour.</p>\n\n<p>I am aware that everything described above is far from perfect, but sadly at the time I didn't have the chance to improve anything. I will definitely be revisiting this idea in the future to come up with a better solution.</p>\n\n<h1 id=\"demoandsourcecode\">Demo and source code</h1>\n\n<p>All of the source code can be found in <a href=\"https://github.com/TimboKZ/spark\">Spark's GitHub repo</a>. Below is a short demonstration of the system in action. Keep in mind the Ambient lighting system is only controlling the LEDs behind the monitor, everything else is controlled by other 3rd party software.</p>\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/V-m6wq622P0\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","image":"https://foxypanda-ghost.s3.amazonaws.com/2016/Nov/ambient_lighting-1478748869882.png","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-11-10 02:26:06","created_by":1,"updated_at":"2016-11-10 03:34:43","updated_by":1,"published_at":"2016-11-10 03:21:19","published_by":1,"amp":null},{"id":25,"uuid":"f5086593-939c-4922-b320-630b97457799","title":"UCL PEACH Reality with Microsoft HoloLens","slug":"ucl-peach-reality-with-microsoft-hololens","markdown":"# Abstract\n\nAs a part of COMP204P/COMP205P System Engineering modules in my 2nd year of study in UCL I've been given a chance to work with [Microsoft HoloLens](https://www.microsoft.com/microsoft-hololens/) and I became a part of [the PEACH project](https://code4health.org/peach), namely the *Reality* group. In this article I'll be talking about PEACH Reality itself and the things I've done during my team working on it.\n\n# PEACH Reality\n\nPEACH stands for *Platform for Enhanced Analytics and Computational Healthcare*, and it's aim, quite unsurprisingly, is to bring some wonders of computer science and software engineering into healthcare. PEACH Reality, the project I was working on, has several major goals.\n\nFirst of all, we're planning to define a specification and an appropriate file format for a *holographic patient case*. Such cases will be used to store models, DICOM files and relevant meta data, such as coordinates of models in 3D space or voice recordings attached to various parts of the model (which is done using [data markers](https://youtu.be/V2mnBVkD-Rs?t=3m54s)).\n\nSecondly, we're developing a robust Microsoft HoloLens application that will be paired with a web app to make use of the specifications defined above. Using our web app, medical specialists can upload 3D models, CT scans and various other files which can the be viewed and interacted with on HoloLens. Once the user is done making changes to objects on HoloLens, all information will be serialised and can later be exported using the file format described above.\n\nLast but not least, we're working on a seamless pipeline that will automatically convert CT scans into 3D model. Thanks to PhD students from UCL Computer Science and [Innersight Labs](http://innersightlabs.com/) we have access to a neural network that can do exactly that. The resultant 3D models are not 100% accurate but the accuracy is high enough for a proof of concept. \n\nAs the leader of the team working on this project I'm responsible for supervising the whole development process. Although this project requires quite a bit of effort it's been very interesting so far and I got a chance to meet a lot of great people, ranging from experienced surgeons to the [corporate VP of Microsoft](https://foxypanda.me/presenting-peach-reality-to-steve-guggenheimer-corporate-vp-of-microsoft/). I'll be posting updated in this blog as the project progresses further.\n\n# Demos\n\nHere are some videos showing off various features I've been adding to our app prototype. The most recent videos are at the top.\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/c1W4W-ORgE4\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/V2mnBVkD-Rs\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/hNHUF8CeXh0\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>As a part of COMP204P/COMP205P System Engineering modules in my 2nd year of study in UCL I've been given a chance to work with <a href=\"https://www.microsoft.com/microsoft-hololens/\">Microsoft HoloLens</a> and I became a part of <a href=\"https://code4health.org/peach\">the PEACH project</a>, namely the <em>Reality</em> group. In this article I'll be talking about PEACH Reality itself and the things I've done during my team working on it.</p>\n\n<h1 id=\"peachreality\">PEACH Reality</h1>\n\n<p>PEACH stands for <em>Platform for Enhanced Analytics and Computational Healthcare</em>, and it's aim, quite unsurprisingly, is to bring some wonders of computer science and software engineering into healthcare. PEACH Reality, the project I was working on, has several major goals.</p>\n\n<p>First of all, we're planning to define a specification and an appropriate file format for a <em>holographic patient case</em>. Such cases will be used to store models, DICOM files and relevant meta data, such as coordinates of models in 3D space or voice recordings attached to various parts of the model (which is done using <a href=\"https://youtu.be/V2mnBVkD-Rs?t=3m54s\">data markers</a>).</p>\n\n<p>Secondly, we're developing a robust Microsoft HoloLens application that will be paired with a web app to make use of the specifications defined above. Using our web app, medical specialists can upload 3D models, CT scans and various other files which can the be viewed and interacted with on HoloLens. Once the user is done making changes to objects on HoloLens, all information will be serialised and can later be exported using the file format described above.</p>\n\n<p>Last but not least, we're working on a seamless pipeline that will automatically convert CT scans into 3D model. Thanks to PhD students from UCL Computer Science and <a href=\"http://innersightlabs.com/\">Innersight Labs</a> we have access to a neural network that can do exactly that. The resultant 3D models are not 100% accurate but the accuracy is high enough for a proof of concept. </p>\n\n<p>As the leader of the team working on this project I'm responsible for supervising the whole development process. Although this project requires quite a bit of effort it's been very interesting so far and I got a chance to meet a lot of great people, ranging from experienced surgeons to the <a href=\"https://foxypanda.me/presenting-peach-reality-to-steve-guggenheimer-corporate-vp-of-microsoft/\">corporate VP of Microsoft</a>. I'll be posting updated in this blog as the project progresses further.</p>\n\n<h1 id=\"demos\">Demos</h1>\n\n<p>Here are some videos showing off various features I've been adding to our app prototype. The most recent videos are at the top.</p>\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/c1W4W-ORgE4\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>  \n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/V2mnBVkD-Rs\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>  \n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/hNHUF8CeXh0\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","image":"https://foxypanda-ghost.s3.amazonaws.com/2016/Nov/hololens-1479676982513.jpg","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-11-20 21:07:45","created_by":1,"updated_at":"2017-02-14 01:11:08","updated_by":1,"published_at":"2016-11-20 21:14:06","published_by":1,"amp":null},{"id":26,"uuid":"641640e6-0e1c-498e-99b9-b085951cd8cf","title":"HoloLens Development: First Steps","slug":"hololens-development-first-steps","markdown":"# Abstract\n\nAs you might've found out from [other posts](https://foxypanda.me/ucl-peach-reality-with-microsoft-hololens/) in my blog, I've spent quite a lot of time developing a Microsoft HoloLens application during my 2nd year in UCL. In this post I'd like to outline several things that beginner HoloLens developers might find useful. If you have the time, I suggest you read the whole thing as it might save you some trouble in the future.\n\n> **Disclaimer:** I've first begun working with HoloLens in the end of 2016, so information here might be slightly outdated.\n\n# 1. Microsoft's Mixed Reality Academy\n\n[Mixed Reality Academy](https://developer.microsoft.com/en-us/windows/mixed-reality/academy) should be the first step of your journey into the world of HoloLens development. It will give you a basic understanding of the features that HoloLens offers to you and your users, as well as some common implementation strategies. Unfortunately, the tutorials don't really go over the code and it's more about you understanding how to setup a HoloLens project in Unity and Visual Studio, how to build your project, how to deploy it to HoloLens or emulator and so on. The second half is copying and pasting various snippets of code that have been written for you and seeing the whole HoloLens development pipeline in action.\n\nI'd recommend glancing over the code in the tutorials and trying to understand what are the basic mechanisms and libraries involved in making certain things happen - like how information about user's hand movements can be used in Holograms 211 or how Gaze can be used to interact with objects in Holograms 210.\n\nMake sure to **not** spend too much time learning different parts of code in tutorials by heart because some parts might be outdated and in fact specifics of implementation could have completely changed since the time tutorials where recorded. More about it in the next section.\n\n# 2. Unity-HoloToolkit\n\nDefinitely read more about Unity-HoloToolkit on [its GitHub page](https://github.com/Microsoft/HoloToolkit-Unity) and browse the code and examples in the repo if you have the time. If you've done the tutorials, you would've encountered the HoloToolkit in some shape or form. Unity-HoloToolkit is pretty much the same thing but optimised to play nicely with Unity game engine. Keep in mind that the version used in the tutorials is **most likely outdated**, so I suggest cloning the repository linked in the beginning of this paragraph directly. As mentioned before, scripts and their interfaces might differ from the ones used in the tutorials, so copying and pasting the code from tutorials into a Unity project with the most recent version of Unity-HoloToolkit is probably not the best idea.\n\nIt's a collection of useful scripts that cover pretty much all of the basic needs of a HoloLens app developer, such as billboard/tagalong components, spatial understanding, hologram sharing and more. I wasn't able to find too much documentation about it so for me using it was pretty much a trial-and-error process, but you might have more luck than me.\n\nA colleague and a good friend of mine, [Fraser Savage](https://savage.engineer/), wrote [this short overview](http://students.cs.ucl.ac.uk/2016/group39/experiments/1-starting.html) of setting up a Unity project for HoloLens development. The section you're interested in is `1. Initial set up of the unity project`, the rest might be a bit too specific to apply to you. Again, info there can be outdated but it should provide some basic guidance.\n\n# 3. Unity and Visual Studio\n\n**One of the most important things to remember** is that the HoloLens app you're developing in Unity is first and foremost **a Unity app**. Most of the challenges you'll be experiencing during the development process are common Unity issues, so make sure to scavenge Unity forums for solutions before blaming HoloLens developers. Don't get me wrong - I'm not saying that working with the HoloLens-specific part of the project will be easy, but from my experience 90% of the work will mostly focus on pure Unity development with little to none HoloLens aspects to it.\n\nChoosing the right Unity version for the job is a a completely different story. First of all, if you're working in a group, you should all use the same version of Unity, or you'll have to spend ages re-importing and re-configuring your projects, given they will load at all. Also, **do not** update to the most recent version of Unity unless it has a feature crucial for your development process or you know what you're doing. It can break your app, it will mean all developers in your team will have to update, and, worst case scenario, HoloLens development might not even be supported on that new version so you'll have to go back to using an older version.\n\nAnd that's not even the whole story. I'm not sure if the situation has changed since the last time I actively worked on a HoloLens project (I sure hope it has - I have an internship involving HoloLens in a month's time), but I had some issues understanding which Unity version I was actually supposed to use. This, combined with limited support for Visual Studio 2017 by the HoloLens emulator left me with a Unity project that would crash whenever I'd try to test it (funnily enough, only happened on my machine), and the only suggested solution was reinstalling my operating system, which is definitely not happening. What didn't help was that Unity-HoloToolkit GitHub readme files mentions the `Required Unity Editor Version` which breaks everything else. **So take great care when choosing which Unity version to install and make sure you read everything Microsoft has to say about it.**\n\nTo some extent, what I said above applies to Visual Studio too. To make your life easier you might want to install [ReSharper](https://www.jetbrains.com/resharper/), an amazing extension for Visual Studio that gives it some super powers of Intellij Idea. As a student, you can get a free license for a year and extend in the future, if needed.\n\n# 4. General tips and tricks\n\nI strongly suggest you read [Performance recommendations for Unity](https://developer.microsoft.com/en-us/windows/mixed-reality/performance_recommendations_for_unity) by Microsoft **before** you start working on your project. It has some very useful tips on the architecture of your application which are quite hard to implement retrospectively. \n\nTo save yourself some time developing the UI for your app, you can use the existing UnityUI framework. To make it work with HoloLens, you'll have to make some adjustments, which can be found [in this post on Unity forums](https://forum.unity3d.com/threads/unity-ui-on-the-hololens.394629/).","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>As you might've found out from <a href=\"https://foxypanda.me/ucl-peach-reality-with-microsoft-hololens/\">other posts</a> in my blog, I've spent quite a lot of time developing a Microsoft HoloLens application during my 2nd year in UCL. In this post I'd like to outline several things that beginner HoloLens developers might find useful. If you have the time, I suggest you read the whole thing as it might save you some trouble in the future.</p>\n\n<blockquote>\n  <p><strong>Disclaimer:</strong> I've first begun working with HoloLens in the end of 2016, so information here might be slightly outdated.</p>\n</blockquote>\n\n<h1 id=\"1microsoftsmixedrealityacademy\">1. Microsoft's Mixed Reality Academy</h1>\n\n<p><a href=\"https://developer.microsoft.com/en-us/windows/mixed-reality/academy\">Mixed Reality Academy</a> should be the first step of your journey into the world of HoloLens development. It will give you a basic understanding of the features that HoloLens offers to you and your users, as well as some common implementation strategies. Unfortunately, the tutorials don't really go over the code and it's more about you understanding how to setup a HoloLens project in Unity and Visual Studio, how to build your project, how to deploy it to HoloLens or emulator and so on. The second half is copying and pasting various snippets of code that have been written for you and seeing the whole HoloLens development pipeline in action.</p>\n\n<p>I'd recommend glancing over the code in the tutorials and trying to understand what are the basic mechanisms and libraries involved in making certain things happen - like how information about user's hand movements can be used in Holograms 211 or how Gaze can be used to interact with objects in Holograms 210.</p>\n\n<p>Make sure to <strong>not</strong> spend too much time learning different parts of code in tutorials by heart because some parts might be outdated and in fact specifics of implementation could have completely changed since the time tutorials where recorded. More about it in the next section.</p>\n\n<h1 id=\"2unityholotoolkit\">2. Unity-HoloToolkit</h1>\n\n<p>Definitely read more about Unity-HoloToolkit on <a href=\"https://github.com/Microsoft/HoloToolkit-Unity\">its GitHub page</a> and browse the code and examples in the repo if you have the time. If you've done the tutorials, you would've encountered the HoloToolkit in some shape or form. Unity-HoloToolkit is pretty much the same thing but optimised to play nicely with Unity game engine. Keep in mind that the version used in the tutorials is <strong>most likely outdated</strong>, so I suggest cloning the repository linked in the beginning of this paragraph directly. As mentioned before, scripts and their interfaces might differ from the ones used in the tutorials, so copying and pasting the code from tutorials into a Unity project with the most recent version of Unity-HoloToolkit is probably not the best idea.</p>\n\n<p>It's a collection of useful scripts that cover pretty much all of the basic needs of a HoloLens app developer, such as billboard/tagalong components, spatial understanding, hologram sharing and more. I wasn't able to find too much documentation about it so for me using it was pretty much a trial-and-error process, but you might have more luck than me.</p>\n\n<p>A colleague and a good friend of mine, <a href=\"https://savage.engineer/\">Fraser Savage</a>, wrote <a href=\"http://students.cs.ucl.ac.uk/2016/group39/experiments/1-starting.html\">this short overview</a> of setting up a Unity project for HoloLens development. The section you're interested in is <code>1. Initial set up of the unity project</code>, the rest might be a bit too specific to apply to you. Again, info there can be outdated but it should provide some basic guidance.</p>\n\n<h1 id=\"3unityandvisualstudio\">3. Unity and Visual Studio</h1>\n\n<p><strong>One of the most important things to remember</strong> is that the HoloLens app you're developing in Unity is first and foremost <strong>a Unity app</strong>. Most of the challenges you'll be experiencing during the development process are common Unity issues, so make sure to scavenge Unity forums for solutions before blaming HoloLens developers. Don't get me wrong - I'm not saying that working with the HoloLens-specific part of the project will be easy, but from my experience 90% of the work will mostly focus on pure Unity development with little to none HoloLens aspects to it.</p>\n\n<p>Choosing the right Unity version for the job is a a completely different story. First of all, if you're working in a group, you should all use the same version of Unity, or you'll have to spend ages re-importing and re-configuring your projects, given they will load at all. Also, <strong>do not</strong> update to the most recent version of Unity unless it has a feature crucial for your development process or you know what you're doing. It can break your app, it will mean all developers in your team will have to update, and, worst case scenario, HoloLens development might not even be supported on that new version so you'll have to go back to using an older version.</p>\n\n<p>And that's not even the whole story. I'm not sure if the situation has changed since the last time I actively worked on a HoloLens project (I sure hope it has - I have an internship involving HoloLens in a month's time), but I had some issues understanding which Unity version I was actually supposed to use. This, combined with limited support for Visual Studio 2017 by the HoloLens emulator left me with a Unity project that would crash whenever I'd try to test it (funnily enough, only happened on my machine), and the only suggested solution was reinstalling my operating system, which is definitely not happening. What didn't help was that Unity-HoloToolkit GitHub readme files mentions the <code>Required Unity Editor Version</code> which breaks everything else. <strong>So take great care when choosing which Unity version to install and make sure you read everything Microsoft has to say about it.</strong></p>\n\n<p>To some extent, what I said above applies to Visual Studio too. To make your life easier you might want to install <a href=\"https://www.jetbrains.com/resharper/\">ReSharper</a>, an amazing extension for Visual Studio that gives it some super powers of Intellij Idea. As a student, you can get a free license for a year and extend in the future, if needed.</p>\n\n<h1 id=\"4generaltipsandtricks\">4. General tips and tricks</h1>\n\n<p>I strongly suggest you read <a href=\"https://developer.microsoft.com/en-us/windows/mixed-reality/performance_recommendations_for_unity\">Performance recommendations for Unity</a> by Microsoft <strong>before</strong> you start working on your project. It has some very useful tips on the architecture of your application which are quite hard to implement retrospectively. </p>\n\n<p>To save yourself some time developing the UI for your app, you can use the existing UnityUI framework. To make it work with HoloLens, you'll have to make some adjustments, which can be found <a href=\"https://forum.unity3d.com/threads/unity-ui-on-the-hololens.394629/\">in this post on Unity forums</a>.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-06-14 17:58:21","created_by":1,"updated_at":"2017-06-14 18:53:32","updated_by":1,"published_at":"2017-06-14 18:45:32","published_by":1,"amp":null},{"id":27,"uuid":"53583662-64a5-4f8a-8c84-aea33d94c7e8","title":"Higher order functions in C","slug":"higher-order-functions-in-c","markdown":"# Abstract\n\nIt's not a secret that for almost all people attempting to learn C pointers are a grey area. I personally was struggling quite a lot understanding them but I was saved by a huge amount of amazing guides on pointer usage you can find online. That said, I still feel like implementation of higher order functions in C deserves more exposure that it currently has and this article is my attempt to contribute to this cause.\n\n> **Note:** In this article I'm gonna assume that you have some experience with C and know what pointers are. Additionally, I will assume you know how to write and compile `.c` files.\n\n# What are higher order functions?\n\n[Higher order functions](https://en.wikipedia.org/wiki/Higher-order_function) take other functions as their arguments or return new functions when they terminate. It might sound confusing especially if you've never seen it being done before but in reality it is really quite simple. Consider the pseudocode below:\n\n```language-lua\nreverse(string)\n    -- Some code to reverse the string\n    return string\n\nuppercase(string)\n    -- Some code to convert string to uppercase\n    return string\n\napply(string, operation)\n    return operation(string)\n\nhello := \"hello\"\n\n-- Reverse the string\nhello := apply(hello, reverse)\n\n-- Convert the string to uppercase\nhello := apply(hello, uppercase)\n```\n\nTo summarise: `apply()` function above takes 2 parameters: a string and an another function. Then, as the name implies, it applies the `operation` to the supplied `string` and returns whatever comes out. This results in a very interesting form of [polymorphism](https://en.wikipedia.org/wiki/Polymorphism_(computer_science)): our `apply()` function can take any `operation` regardless of what it does as long as it accepts a string as an argument and returns the string afterwards.\n\nThe example above looks at the scenario when a function takes other functions as its arguments. Now let's take a look at functions that return new functions:\n\n```language-lua\nmultiplyOperation(coefficient)\n    -- Declare new function that multiplies the\n    -- supplied argument by the coefficient\n    operation(number)\n        return number * coefficient\n    -- Return the new function\n    return operation\n\n-- Function that multiplies everything by 5\nmultiplyBy5 := multiplyOperation(5)\n\n-- This will return 35\nmultipleBy5(7)\n```\n\nAs seen above, `multiplyOperation()` returns a new function that changes its behaviour depending on what value for the `coefficient` has been supplied to `multiplyOperation()`. Keep in mind that the examples above are just pseudocode to give you an idea of what higher order functions are about and C implementation will not necessarily look the same.\n\n# Function pointers in C\n\nTo achieve the functionality discussed in the previous section we're gonna use function pointers, which are pretty straightforward and shouldn't take you too long to wrap your head around. Before we start, remind yourself of these 2 things:\n\n* You can get the address of a variable using the `&` operator, like so: <code class=\"language-c\">int *a = &b;</code> (`a` can now be used as a pointer to `b`). That said, when referencing a function you are allowed to drop the `&` operator. If you still don't have that much experience with pointers, I recommend leaving it in.\n* Before you can access the variable a pointer is pointing to, you must dereference said pointer. Let's take integer pointer `a` from the line above - if I want to use it in a calculation, I need to dereference it using the `*` operator: <code class=\"language-c\">int c = 3 + *a;</code>.\n\n```language-c\n// Required for the `printf()` function\n#include <stdio.h>\n\n// The function we'll be pointing to\nint halve(int number) {\n    return number / 2;\n}\n\nvoid main() {\n    // Declare a pointer to the `halve` function\n    // We say that operation takes 1 int argument\n    // and returns an int when it terminates\n    int (*operation)(int) = &halve;\n\n    // Alternatively, you can drop the `&`:\n    int (*anotherOperation)(int) = halve;\n    // From here onwards, I will always drop the\n    // `&` to make the code a bit more concise\n\n    // Dereference the pointer to `halve` first,\n    // then supply relevant arguments to it\n    int halved = (*operation)(10);\n\n    // Should print `5`, try it yourself\n    printf(\"%d\", halved);\n}\n```\n\nAs you can see in the beginning of the `main()` method, pointers to functions have a rather unusual type declaration. It consists of 3 parts:\n\n1. The type before the parenthesis is the return type of the function the pointer is referencing. \n2. The middle part is the name of the pointer. Note that you have to wrap it into parenthesis to indicate that this a pointer to a function.\n3. The last part contains the types of parameters the function is expecting.\n\nFor example, the type for a pointer to a function that accepts 2 character arrays and returns a double would look as follows: <code class=\"language-c\">double (\\*someFunction)(char\\*, char\\*)</code>.\n\n# Implementing the `map()` function\n\nAs an exercise, let's implement the [infamous `map()` function](https://en.wikipedia.org/wiki/Map_(higher-order_function)). This function takes 2 arguments:\n\n1. Some [unary function](https://en.wikipedia.org/wiki/Unary_function) that accepts an argument of type `A` and returns some value of type `B`.\n2. An array of type `A`. Keep in mind, type `A` can be the same as type `B`.\n\nThe return value is a new array of type `B`. This new array is generated by applying the supplied unary function to every element in the supplied array of type `A`.\n\n## `map()` for integers\n\nTo make our lives easier we will only work with integers (for now). Below you can find the implementation of the `map()` function that only works with unary operations on integers and integer arrays.  \n\n```language-c\n// Required for the `printf()` function\n#include <stdio.h>\n// Required for memory management\n// (`malloc()`, `free()`, etc.)\n#include <stdlib.h>\n\n// Multiply a number by 3\nint triple(int number) {\n    return number * 3;\n}\n\n// A rather complex function definition, read more about it below\nint *map(int (*function)(int), int *array, int size) {\n    // Allocate memory for our new array\n    int *newArray = malloc(sizeof(int) * size);\n\n    int i;\n    // Apply the function to every element of the supplied\n    // array and save the values into the new array\n    for (i = 0; i < size; i++) {\n        newArray[i] = function(array[i]);\n    }\n\n    // Return the pointer to the new array\n    // (you must free the memory after\n    // you're done working with it)\n    return newArray;\n}\n\nvoid main() {\n    // Initial array of size 4\n    int array[4] = {1, 2, 3, 4};\n\n    // Map the array above using the `triple()` function\n    int *tripledArray = map(triple, array, 4);\n\n    int i;\n    // Print the new values\n    for (i = 0; i < 4; i++) {\n        printf(\"%d \", tripledArray[i]);\n    }\n\n    // Don't forget to free the memory afterwards\n    free(tripledArray);\n}\n```\n\nI tried to add comments to all of the important parts but I want to discuss the `map()` function definition separtely. Let's break it down: <code class=\"language-c\">int\\* map(int (\\*function)(int), int\\* array, int length) {...}</code>\n\n* As in any other function, the first part (`int*`) denotes the return type of our `map()`. In this particular case it's a pointer to an integer array.\n* `map` is simply the function name, nothing fancy here.\n* Now the interesting part - function parameters. There are of them:\n    1. <code class=\"language-c\">int (\\*function)(int)</code> Defines a parameter called `function` that is a pointer to a function accepting one integer and returning an integer.\n    2. <code class=\"language-c\">int\\* array</code> A pointer to an integer array over which we'll be iterating.\n    3. <code class=\"language-c\">int size</code> Integer storing the size of the above array.\n\nNow, we can use our newly defined function to \"transform\" integer arrays using some unary function. Unfortunately we did not make it truly polymorphic, that is it only works with integers but there is a very good reason for it: polymorphism in C is quite a complicated topic and it goes beyond the scope of this article. If you're interested in an implementation of the `map()` function that supports generic types, check out [this](http://stackoverflow.com/questions/4047431/implementing-a-generical-map-function-over-arrays-in-c).\n\n# Functions returning functions\n\nThis section will look at the other type of higher order functions, namely functions that return other functions after they terminate. Below you can see the implementation of a function that does exactly that: it returns binary arithmetic operations based on the value of the `type` parameter supplied to it.\n\n```language-c\n// Required for `printf()`\n#include <stdio.h>\n\n// Binary arithmetic functions we'll be\n// returning from `getOperation()`\nint multiply(int x, int y) {\n    return x * y;\n}\nint add(int x, int y) {\n    return x + y;\n}\n\n// Function returning different binary functions\n// based on the supplied integer type.\n// Check below this code block for more info.\nint (*getOperation(int type))(int, int) {\n    switch (type) {\n        case 0:\n            // If type `0` return multiplication\n            return multiply;\n        case 1:\n            // If type `1` return addition\n            return add;\n        default:\n            // If type is not recognised\n            // return addition\n            return add;\n    }\n}\n\nvoid main() {\n    // Numbers which we'll send to our binary functions\n    int x = 4;\n    int y = 2;\n\n    // Getting pointers to binary functions using `getOperation()`\n    int (*multiplication)(int, int) = getOperation(0);\n    int (*addition)(int, int) = getOperation(1);\n\n    // Confirm that correct functions were returned\n    printf(\"Multiplication: %d\\n\", multiplication(x, y));\n    printf(\"Addition: %d\\n\", addition(x, y));\n}\n```\n\nTake a look at the function definition for `getOperation()`: Its return type is \"outside\" and the actual definition that matches the function body is \"inside\" the parentheses. Let's break it down:\n\n```language-c\n      getOperation                      // Name of the function\n      getOperation(int type)            // Parameters the function is expecting\n    (*getOperation(int type))(int, int) // Parameters of the returned function\nint (*getOperation(int type))(int, int) // Return type of the returned function\n```\n\n# Conclusion\n\nThe aim of this article is to give you a basic idea of how to define functions that accept other functions as parameters and return new functions. If after having read it you feel like you can do it, then this article has successfully fulfilled its purpose. Otherwise, feel free to comment below for help.","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>It's not a secret that for almost all people attempting to learn C pointers are a grey area. I personally was struggling quite a lot understanding them but I was saved by a huge amount of amazing guides on pointer usage you can find online. That said, I still feel like implementation of higher order functions in C deserves more exposure that it currently has and this article is my attempt to contribute to this cause.</p>\n\n<blockquote>\n  <p><strong>Note:</strong> In this article I'm gonna assume that you have some experience with C and know what pointers are. Additionally, I will assume you know how to write and compile <code>.c</code> files.</p>\n</blockquote>\n\n<h1 id=\"whatarehigherorderfunctions\">What are higher order functions?</h1>\n\n<p><a href=\"https://en.wikipedia.org/wiki/Higher-order_function\">Higher order functions</a> take other functions as their arguments or return new functions when they terminate. It might sound confusing especially if you've never seen it being done before but in reality it is really quite simple. Consider the pseudocode below:</p>\n\n<pre><code class=\"language-lua\">reverse(string)  \n    -- Some code to reverse the string\n    return string\n\nuppercase(string)  \n    -- Some code to convert string to uppercase\n    return string\n\napply(string, operation)  \n    return operation(string)\n\nhello := \"hello\"\n\n-- Reverse the string\nhello := apply(hello, reverse)\n\n-- Convert the string to uppercase\nhello := apply(hello, uppercase)  \n</code></pre>\n\n<p>To summarise: <code>apply()</code> function above takes 2 parameters: a string and an another function. Then, as the name implies, it applies the <code>operation</code> to the supplied <code>string</code> and returns whatever comes out. This results in a very interesting form of <a href=\"https://en.wikipedia.org/wiki/Polymorphism_(computer_science)\">polymorphism</a>: our <code>apply()</code> function can take any <code>operation</code> regardless of what it does as long as it accepts a string as an argument and returns the string afterwards.</p>\n\n<p>The example above looks at the scenario when a function takes other functions as its arguments. Now let's take a look at functions that return new functions:</p>\n\n<pre><code class=\"language-lua\">multiplyOperation(coefficient)  \n    -- Declare new function that multiplies the\n    -- supplied argument by the coefficient\n    operation(number)\n        return number * coefficient\n    -- Return the new function\n    return operation\n\n-- Function that multiplies everything by 5\nmultiplyBy5 := multiplyOperation(5)\n\n-- This will return 35\nmultipleBy5(7)  \n</code></pre>\n\n<p>As seen above, <code>multiplyOperation()</code> returns a new function that changes its behaviour depending on what value for the <code>coefficient</code> has been supplied to <code>multiplyOperation()</code>. Keep in mind that the examples above are just pseudocode to give you an idea of what higher order functions are about and C implementation will not necessarily look the same.</p>\n\n<h1 id=\"functionpointersinc\">Function pointers in C</h1>\n\n<p>To achieve the functionality discussed in the previous section we're gonna use function pointers, which are pretty straightforward and shouldn't take you too long to wrap your head around. Before we start, remind yourself of these 2 things:</p>\n\n<ul>\n<li>You can get the address of a variable using the <code>&amp;</code> operator, like so: <code class=\"language-c\">int *a = &b;</code> (<code>a</code> can now be used as a pointer to <code>b</code>). That said, when referencing a function you are allowed to drop the <code>&amp;</code> operator. If you still don't have that much experience with pointers, I recommend leaving it in.</li>\n<li>Before you can access the variable a pointer is pointing to, you must dereference said pointer. Let's take integer pointer <code>a</code> from the line above - if I want to use it in a calculation, I need to dereference it using the <code>*</code> operator: <code class=\"language-c\">int c = 3 + *a;</code>.</li>\n</ul>\n\n<pre><code class=\"language-c\">// Required for the `printf()` function\n#include &lt;stdio.h&gt;\n\n// The function we'll be pointing to\nint halve(int number) {  \n    return number / 2;\n}\n\nvoid main() {  \n    // Declare a pointer to the `halve` function\n    // We say that operation takes 1 int argument\n    // and returns an int when it terminates\n    int (*operation)(int) = &amp;halve;\n\n    // Alternatively, you can drop the `&amp;`:\n    int (*anotherOperation)(int) = halve;\n    // From here onwards, I will always drop the\n    // `&amp;` to make the code a bit more concise\n\n    // Dereference the pointer to `halve` first,\n    // then supply relevant arguments to it\n    int halved = (*operation)(10);\n\n    // Should print `5`, try it yourself\n    printf(\"%d\", halved);\n}\n</code></pre>\n\n<p>As you can see in the beginning of the <code>main()</code> method, pointers to functions have a rather unusual type declaration. It consists of 3 parts:</p>\n\n<ol>\n<li>The type before the parenthesis is the return type of the function the pointer is referencing.  </li>\n<li>The middle part is the name of the pointer. Note that you have to wrap it into parenthesis to indicate that this a pointer to a function.  </li>\n<li>The last part contains the types of parameters the function is expecting.</li>\n</ol>\n\n<p>For example, the type for a pointer to a function that accepts 2 character arrays and returns a double would look as follows: <code class=\"language-c\">double (*someFunction)(char*, char*)</code>.</p>\n\n<h1 id=\"implementingthemapfunction\">Implementing the <code>map()</code> function</h1>\n\n<p>As an exercise, let's implement the <a href=\"https://en.wikipedia.org/wiki/Map_(higher-order_function)\">infamous <code>map()</code> function</a>. This function takes 2 arguments:</p>\n\n<ol>\n<li>Some <a href=\"https://en.wikipedia.org/wiki/Unary_function\">unary function</a> that accepts an argument of type <code>A</code> and returns some value of type <code>B</code>.  </li>\n<li>An array of type <code>A</code>. Keep in mind, type <code>A</code> can be the same as type <code>B</code>.</li>\n</ol>\n\n<p>The return value is a new array of type <code>B</code>. This new array is generated by applying the supplied unary function to every element in the supplied array of type <code>A</code>.</p>\n\n<h2 id=\"mapforintegers\"><code>map()</code> for integers</h2>\n\n<p>To make our lives easier we will only work with integers (for now). Below you can find the implementation of the <code>map()</code> function that only works with unary operations on integers and integer arrays.  </p>\n\n<pre><code class=\"language-c\">// Required for the `printf()` function\n#include &lt;stdio.h&gt;\n// Required for memory management\n// (`malloc()`, `free()`, etc.)\n#include &lt;stdlib.h&gt;\n\n// Multiply a number by 3\nint triple(int number) {  \n    return number * 3;\n}\n\n// A rather complex function definition, read more about it below\nint *map(int (*function)(int), int *array, int size) {  \n    // Allocate memory for our new array\n    int *newArray = malloc(sizeof(int) * size);\n\n    int i;\n    // Apply the function to every element of the supplied\n    // array and save the values into the new array\n    for (i = 0; i &lt; size; i++) {\n        newArray[i] = function(array[i]);\n    }\n\n    // Return the pointer to the new array\n    // (you must free the memory after\n    // you're done working with it)\n    return newArray;\n}\n\nvoid main() {  \n    // Initial array of size 4\n    int array[4] = {1, 2, 3, 4};\n\n    // Map the array above using the `triple()` function\n    int *tripledArray = map(triple, array, 4);\n\n    int i;\n    // Print the new values\n    for (i = 0; i &lt; 4; i++) {\n        printf(\"%d \", tripledArray[i]);\n    }\n\n    // Don't forget to free the memory afterwards\n    free(tripledArray);\n}\n</code></pre>\n\n<p>I tried to add comments to all of the important parts but I want to discuss the <code>map()</code> function definition separtely. Let's break it down: <code class=\"language-c\">int* map(int (*function)(int), int* array, int length) {...}</code></p>\n\n<ul>\n<li>As in any other function, the first part (<code>int*</code>) denotes the return type of our <code>map()</code>. In this particular case it's a pointer to an integer array.</li>\n<li><code>map</code> is simply the function name, nothing fancy here.</li>\n<li>Now the interesting part - function parameters. There are of them:\n<ol><li><code class=\"language-c\">int (*function)(int)</code> Defines a parameter called <code>function</code> that is a pointer to a function accepting one integer and returning an integer.</li>\n<li><code class=\"language-c\">int* array</code> A pointer to an integer array over which we'll be iterating.</li>\n<li><code class=\"language-c\">int size</code> Integer storing the size of the above array.</li></ol></li>\n</ul>\n\n<p>Now, we can use our newly defined function to \"transform\" integer arrays using some unary function. Unfortunately we did not make it truly polymorphic, that is it only works with integers but there is a very good reason for it: polymorphism in C is quite a complicated topic and it goes beyond the scope of this article. If you're interested in an implementation of the <code>map()</code> function that supports generic types, check out <a href=\"http://stackoverflow.com/questions/4047431/implementing-a-generical-map-function-over-arrays-in-c\">this</a>.</p>\n\n<h1 id=\"functionsreturningfunctions\">Functions returning functions</h1>\n\n<p>This section will look at the other type of higher order functions, namely functions that return other functions after they terminate. Below you can see the implementation of a function that does exactly that: it returns binary arithmetic operations based on the value of the <code>type</code> parameter supplied to it.</p>\n\n<pre><code class=\"language-c\">// Required for `printf()`\n#include &lt;stdio.h&gt;\n\n// Binary arithmetic functions we'll be\n// returning from `getOperation()`\nint multiply(int x, int y) {  \n    return x * y;\n}\nint add(int x, int y) {  \n    return x + y;\n}\n\n// Function returning different binary functions\n// based on the supplied integer type.\n// Check below this code block for more info.\nint (*getOperation(int type))(int, int) {  \n    switch (type) {\n        case 0:\n            // If type `0` return multiplication\n            return multiply;\n        case 1:\n            // If type `1` return addition\n            return add;\n        default:\n            // If type is not recognised\n            // return addition\n            return add;\n    }\n}\n\nvoid main() {  \n    // Numbers which we'll send to our binary functions\n    int x = 4;\n    int y = 2;\n\n    // Getting pointers to binary functions using `getOperation()`\n    int (*multiplication)(int, int) = getOperation(0);\n    int (*addition)(int, int) = getOperation(1);\n\n    // Confirm that correct functions were returned\n    printf(\"Multiplication: %d\\n\", multiplication(x, y));\n    printf(\"Addition: %d\\n\", addition(x, y));\n}\n</code></pre>\n\n<p>Take a look at the function definition for <code>getOperation()</code>: Its return type is \"outside\" and the actual definition that matches the function body is \"inside\" the parentheses. Let's break it down:</p>\n\n<pre><code class=\"language-c\">      getOperation                      // Name of the function\n      getOperation(int type)            // Parameters the function is expecting\n    (*getOperation(int type))(int, int) // Parameters of the returned function\nint (*getOperation(int type))(int, int) // Return type of the returned function  \n</code></pre>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>The aim of this article is to give you a basic idea of how to define functions that accept other functions as parameters and return new functions. If after having read it you feel like you can do it, then this article has successfully fulfilled its purpose. Otherwise, feel free to comment below for help.</p>","image":"https://foxypanda-ghost.s3.amazonaws.com/2016/Sep/Capture-1472851050302.PNG","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-09-01 21:41:30","created_by":1,"updated_at":"2016-09-02 21:17:44","updated_by":1,"published_at":"2016-09-02 20:44:20","published_by":1,"amp":null},{"id":28,"uuid":"7b777f02-4f4f-42b9-ac79-3777f79d36be","title":"Synlighter","slug":"synlighter","markdown":"# Abstract\n\nSynlighter is a simple syntax highlighting plugin I developed a while ago. I used it primarily as an exercise to study regular expressions, so it is still far from being called a complete product and it only supports HTML, CSS and JS highlighting. Sadly, I'm no longer developing it so don't expect any updates in the future.\n\n# Demo and source code\n\nYou can find the source code on Synlighter's [GitHub page](https://github.com/TimboKZ/Synlighter). Below is a quick demo of its functionality. As said above, it was never meant to be ready for production so I apologise if it doesn't display correctly in your browser. Also, because of the vast amount of regular expressions used it might take a while to load. Just so you know, I reflected on all of the mistakes made during the development of Synlighter and although I will likely not fix them in this project, I will definitely prevent them in every project to come.\n\n# Highlighting CSS\n\n<div>\n<xmp class=\"synlighter\" data-language=\"css\">/*\n *    Syntax  ->  Code\n */\n\n.synlighter-syntax-code {\n    -webkit-box-sizing: border-box;\n     -khtml-box-sizing: border-box;\n       -moz-box-sizing: border-box;\n        -ms-box-sizing: border-box;\n         -o-box-sizing: border-box;\n            box-sizing: border-box;\n}\n.doodle input:checked ~ .animate {\n    /* We will set a delay so that the rewind effect can occur */    \n    -webkit-animation: horse-ride .5s steps(12, end) infinite 5s;\n       -moz-animation: horse-ride .5s steps(12, end) infinite 5s;\n            animation: horse-ride .5s steps(12, end) infinite 5s;\n\n    /* Imitating the Rewind effect before real animation starts */\n    -webkit-transition: all 5s cubic-bezier(0.550, 0.055, 0.675, 0.190);\n       -moz-transition: all 5s cubic-bezier(0.550, 0.055, 0.675, 0.190);\n            transition: all 5s cubic-bezier(0.550, 0.055, 0.675, 0.190);\n    background-position: -2412px 0;\n}\n.doodle div.g:after {\n    background: rgba(53, 97, 182, 0.5);\n}\n</xmp>\n</div>\n\n# Highlighting JavaScript\n\n<div>\n<xmp class=\"synlighter\" data-language=\"js\">window.onpopstate = function(event) {\n    // Why not use console?\n    alert(\"location: \" + document.location + \", state: \" + JSON.stringify(event.state));\n    if(event.state != null)\n        load_page(event.state.url);\n};\nfunction OSONG() {\n    var adjective = null;\n    var noun = null;\n    var random = null;\n    if(getRandomInt(0, 1)) {\n        random = getRandomInt(0, giesLength - 1);\n        adjective = gies[random] + \"ic\";\n    } else {\n        random = getRandomInt(0, icsLength - 1);\n        adjective = ics[random];\n    }\n    random = getRandomInt(0, giesLength - 1);\n    noun = gies[random] + \"ist\";\n    output.addClass('active');\n    output.val(adjective + \" \" + noun);\n    output.removeClass('active');\n}\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n</xmp>\n</div>\n\n# Highlighting HTML\n\n<div>\n<xmp class=\"synlighter\" data-language=\"html\"><nav class=\"foxy-navigation\" role=\"navigation\">\n   <ul>\n      <li class=\"foxy-navigation-home\" role=\"presentation\">\n         <a href=\"https://foxypanda.me/\">\n            <h1>Home</h1>\n         </a>\n      </li><!-- .foxy-navigation-home -->\n      <li class=\"foxy-navigation-about\" role=\"presentation\">\n         <a href=\"https://foxypanda.me/about/\">\n            <h1>About</h1>\n         </a>\n      </li><!-- .foxy-navigation-about -->\n      <li class=\"foxy-navigation-admin\" role=\"presentation\">\n         <a href=\"https://foxypanda.me/ghost/\">\n            <h1>Admin</h1>\n         </a>\n      </li><!-- .foxy-navigation-admin -->\n   </ul>\n</nav><!-- .foxy-navigation -->\n</xmp>\n</div>\n\n<div>\n<link href=\"https://cdn.rawgit.com/TimboKZ/Synlighter/2282e7cd5f15935b792f518aca3bcd6828204c02/synlighter/synlighter.css\" rel=\"stylesheet\" type=\"text/css\">\n<script>\nwindow.scripts.push('https://cdn.rawgit.com/TimboKZ/Synlighter/2282e7cd5f15935b792f518aca3bcd6828204c02/synlighter/jquery.synlighter.js');\nwindow.scripts.push(function($) {\n  $(document).ready(function(e) {\n    $('.synlighter').synlighter();\n    $('.synlighter-alt').synlighter({ counter: 'alt' });\n  });\n}); \n</script>\n</div>","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>Synlighter is a simple syntax highlighting plugin I developed a while ago. I used it primarily as an exercise to study regular expressions, so it is still far from being called a complete product and it only supports HTML, CSS and JS highlighting. Sadly, I'm no longer developing it so don't expect any updates in the future.</p>\n\n<h1 id=\"demoandsourcecode\">Demo and source code</h1>\n\n<p>You can find the source code on Synlighter's <a href=\"https://github.com/TimboKZ/Synlighter\">GitHub page</a>. Below is a quick demo of its functionality. As said above, it was never meant to be ready for production so I apologise if it doesn't display correctly in your browser. Also, because of the vast amount of regular expressions used it might take a while to load. Just so you know, I reflected on all of the mistakes made during the development of Synlighter and although I will likely not fix them in this project, I will definitely prevent them in every project to come.</p>\n\n<h1 id=\"highlightingcss\">Highlighting CSS</h1>\n\n<div>  \n<xmp class=\"synlighter\" data-language=\"css\">/*  \n *    Syntax  ->  Code\n */\n\n.synlighter-syntax-code {\n    -webkit-box-sizing: border-box;\n     -khtml-box-sizing: border-box;\n       -moz-box-sizing: border-box;\n        -ms-box-sizing: border-box;\n         -o-box-sizing: border-box;\n            box-sizing: border-box;\n}\n.doodle input:checked ~ .animate {\n    /* We will set a delay so that the rewind effect can occur */    \n    -webkit-animation: horse-ride .5s steps(12, end) infinite 5s;\n       -moz-animation: horse-ride .5s steps(12, end) infinite 5s;\n            animation: horse-ride .5s steps(12, end) infinite 5s;\n\n    /* Imitating the Rewind effect before real animation starts */\n    -webkit-transition: all 5s cubic-bezier(0.550, 0.055, 0.675, 0.190);\n       -moz-transition: all 5s cubic-bezier(0.550, 0.055, 0.675, 0.190);\n            transition: all 5s cubic-bezier(0.550, 0.055, 0.675, 0.190);\n    background-position: -2412px 0;\n}\n.doodle div.g:after {\n    background: rgba(53, 97, 182, 0.5);\n}\n</xmp>  \n</div>\n\n<h1 id=\"highlightingjavascript\">Highlighting JavaScript</h1>\n\n<div>  \n<xmp class=\"synlighter\" data-language=\"js\">window.onpopstate = function(event) {  \n    // Why not use console?\n    alert(\"location: \" + document.location + \", state: \" + JSON.stringify(event.state));\n    if(event.state != null)\n        load_page(event.state.url);\n};\nfunction OSONG() {  \n    var adjective = null;\n    var noun = null;\n    var random = null;\n    if(getRandomInt(0, 1)) {\n        random = getRandomInt(0, giesLength - 1);\n        adjective = gies[random] + \"ic\";\n    } else {\n        random = getRandomInt(0, icsLength - 1);\n        adjective = ics[random];\n    }\n    random = getRandomInt(0, giesLength - 1);\n    noun = gies[random] + \"ist\";\n    output.addClass('active');\n    output.val(adjective + \" \" + noun);\n    output.removeClass('active');\n}\nfunction getRandomInt(min, max) {  \n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n</xmp>  \n</div>\n\n<h1 id=\"highlightinghtml\">Highlighting HTML</h1>\n\n<div>  \n<xmp class=\"synlighter\" data-language=\"html\"><nav class=\"foxy-navigation\" role=\"navigation\">  \n   <ul>\n      <li class=\"foxy-navigation-home\" role=\"presentation\">\n         <a href=\"https://foxypanda.me/\">\n            <h1>Home</h1>\n         </a>\n      </li><!-- .foxy-navigation-home -->\n      <li class=\"foxy-navigation-about\" role=\"presentation\">\n         <a href=\"https://foxypanda.me/about/\">\n            <h1>About</h1>\n         </a>\n      </li><!-- .foxy-navigation-about -->\n      <li class=\"foxy-navigation-admin\" role=\"presentation\">\n         <a href=\"https://foxypanda.me/ghost/\">\n            <h1>Admin</h1>\n         </a>\n      </li><!-- .foxy-navigation-admin -->\n   </ul>\n</nav><!-- .foxy-navigation -->  \n</xmp>  \n</div>\n\n<div>  \n<link href=\"https://cdn.rawgit.com/TimboKZ/Synlighter/2282e7cd5f15935b792f518aca3bcd6828204c02/synlighter/synlighter.css\" rel=\"stylesheet\" type=\"text/css\">  \n<script>  \nwindow.scripts.push('https://cdn.rawgit.com/TimboKZ/Synlighter/2282e7cd5f15935b792f518aca3bcd6828204c02/synlighter/jquery.synlighter.js');  \nwindow.scripts.push(function($) {  \n  $(document).ready(function(e) {\n    $('.synlighter').synlighter();\n    $('.synlighter-alt').synlighter({ counter: 'alt' });\n  });\n}); \n</script>  \n</div>","image":"https://foxypanda-ghost.s3.amazonaws.com/2016/Sep/Synlighter-1473708131433.png","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":"Synlighter Syntax Highlighting Plugin","meta_description":null,"author_id":1,"created_at":"2016-08-29 22:54:20","created_by":1,"updated_at":"2016-09-12 19:22:42","updated_by":1,"published_at":"2014-04-10 10:09:00","published_by":1,"amp":null},{"id":29,"uuid":"b57fb664-c617-43fb-8edb-a173fa07577f","title":"Reddit: Getting the list of subreddits a user moderates","slug":"reddit-getting-the-list-of-subreddits-a-user-moderates","markdown":"# Abstract\n\nFor [a simple open source project](https://github.com/TimboKZ/github-reddit-bot) I had to retrieve the list of subreddits a specific user moderates, using their username. Unfortunately, at the time of writing Reddit doesn't provide any sane methods of fetching said list so in this article I'll be talking about my roundabout way of tackling this challenge.\n\n# Scraping user page\n\nThe obvious solution turned out to be scraping the page of the user, since it displays all of the public subreddits the user moderates:\n\n\nThe primary challenge here is that, at the time of writing, Reddit is transferring to a brand-new profile design, which means I had to adjust my scraping strategy depending on what design the page used.\n\nI won't go over the code in detail, if you're interested in basic scraping concept behind it check out [this tutorial](https://scotch.io/tutorials/scraping-the-web-with-node-js).","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>For <a href=\"https://github.com/TimboKZ/github-reddit-bot\">a simple open source project</a> I had to retrieve the list of subreddits a specific user moderates, using their username. Unfortunately, at the time of writing Reddit doesn't provide any sane methods of fetching said list so in this article I'll be talking about my roundabout way of tackling this challenge.</p>\n\n<h1 id=\"scrapinguserpage\">Scraping user page</h1>\n\n<p>The obvious solution turned out to be scraping the page of the user, since it displays all of the public subreddits the user moderates:</p>\n\n<p>The primary challenge here is that, at the time of writing, Reddit is transferring to a brand-new profile design, which means I had to adjust my scraping strategy depending on what design the page used.</p>\n\n<p>I won't go over the code in detail, if you're interested in basic scraping concept behind it check out <a href=\"https://scotch.io/tutorials/scraping-the-web-with-node-js\">this tutorial</a>.</p>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-06-15 19:04:22","created_by":1,"updated_at":"2017-06-15 19:09:19","updated_by":1,"published_at":null,"published_by":null,"amp":null},{"id":30,"uuid":"8abe326d-d3c2-4848-893f-07ae0872b26b","title":"My trip to Japan in Summer 2016 (Pictures)","slug":"my-trip-to-japan-in-summer-2016","markdown":"# Abstract\n\nIn June of 2016 I spent 2 weeks travelling around Japan with a bunch of friends. We've covered a fair bit of southern Japan, including Hiroshima, Osaka, Kobe, Nara, Kyoto, Atami and Tokyo. It was an amazing experience and since I'm no wordsmith but I still wanted to document my trip, I ended up taking around a thousand and a half pictures of various places and events in Japan. That said, sadly I'm no professional photographer either so the pictures you'll see below aren't exactly masterpieces, but they do bring up some good memories and I personally find them pretty.\n\n# Pictures from Japan\n\nThese are some of the pictures I took, in chronological order. You are free to use them as you see fit, but if you could also link this page it would be amazing. ~~You can click on the image for a high quality version.~~ (HQ links are not working atm, check back later) Enjoy!\n\n\n# Osaka\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1048-1494108077711.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1090-1494108082613.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1116-1494108088742.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1131-1494108094792.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1136-1494108098539.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1166-1494108102041.jpg)\n\n\n# Hiroshima\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1314-1494108107960.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1324-1494108110181.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1370-1494108112973.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1436-1494108120100.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1480-1494108142417.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1484-1494108149767.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1557-1494108155098.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1578-1494108160007.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1584-1494108163508.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1610-1494108171159.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1701-1494108190961.jpg)\n\n\n# Kyoto\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1754-1494108194085.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1793-1494108197220.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1874-1494108204086.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1876-1494108205825.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1881-1494108208543.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1993-1494108210467.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2055-1494108212841.jpg)\n\n\n# Atami\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2258-1494108215305.jpg)\n\n\n# Tokyo\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2329-1494108217789.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2352-1494108222780.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2387-1494108225414.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2390-1494108227876.jpg)\n\n","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>In June of 2016 I spent 2 weeks travelling around Japan with a bunch of friends. We've covered a fair bit of southern Japan, including Hiroshima, Osaka, Kobe, Nara, Kyoto, Atami and Tokyo. It was an amazing experience and since I'm no wordsmith but I still wanted to document my trip, I ended up taking around a thousand and a half pictures of various places and events in Japan. That said, sadly I'm no professional photographer either so the pictures you'll see below aren't exactly masterpieces, but they do bring up some good memories and I personally find them pretty.</p>\n\n<h1 id=\"picturesfromjapan\">Pictures from Japan</h1>\n\n<p>These are some of the pictures I took, in chronological order. You are free to use them as you see fit, but if you could also link this page it would be amazing. <del>You can click on the image for a high quality version.</del> (HQ links are not working atm, check back later) Enjoy!</p>\n\n<h1 id=\"osaka\">Osaka</h1>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1048-1494108077711.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1090-1494108082613.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1116-1494108088742.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1131-1494108094792.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1136-1494108098539.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1166-1494108102041.jpg\" alt=\"\" /></p>\n\n<h1 id=\"hiroshima\">Hiroshima</h1>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1314-1494108107960.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1324-1494108110181.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1370-1494108112973.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1436-1494108120100.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1480-1494108142417.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1484-1494108149767.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1557-1494108155098.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1578-1494108160007.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1584-1494108163508.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1610-1494108171159.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1701-1494108190961.jpg\" alt=\"\" /></p>\n\n<h1 id=\"kyoto\">Kyoto</h1>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1754-1494108194085.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1793-1494108197220.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1874-1494108204086.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1876-1494108205825.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1881-1494108208543.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1993-1494108210467.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2055-1494108212841.jpg\" alt=\"\" /></p>\n\n<h1 id=\"atami\">Atami</h1>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2258-1494108215305.jpg\" alt=\"\" /></p>\n\n<h1 id=\"tokyo\">Tokyo</h1>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2329-1494108217789.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2352-1494108222780.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2387-1494108225414.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2390-1494108227876.jpg\" alt=\"\" /></p>","image":"https://foxypanda-ghost.s3.amazonaws.com/2017/May/Hiroshima_Castle-1494812388585.png","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-01-19 18:07:15","created_by":1,"updated_at":"2017-06-14 18:49:27","updated_by":1,"published_at":"2017-05-06 22:03:56","published_by":1,"amp":null},{"id":31,"uuid":"8d3e5c45-e721-416d-9773-f2e289c82c1e","title":"My Linux dotfiles","slug":"my-linux-dotfiles","markdown":"# Abstract\n\nI've finally gotten to customising my Linux setup and [put some of my dotfiles on GitHub](https://github.com/TimboKZ/dotfiles), including a pretty handy [installation script](https://github.com/TimboKZ/dotfiles/blob/master/install.sh). Check out the `README.md` file in the repo linked above to see the description of the tools I used. As I'll keep updating that readme as I adjust my dotfiles.\n\n# Demo\n\n> Note: At the time of writing, to save some time on configuration I use Ubuntu Server 16.10 and then customise it to my liking, so below you'll mostly see Ubuntu. That said, I'm very interested in Arch Linux so at some point I'm going to migrate to it.\n\nBe warned - I like to give my machines silly names. Below you can see a screenshot from **Purity**, my Sony VAIO Pro 13 laptop.\n\n![The Linux setup for my laptop, Purity, Sony VAIO Pro 13](https://foxypanda-ghost.s3.amazonaws.com/2017/Mar/purity-1489267030679.png)","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>I've finally gotten to customising my Linux setup and <a href=\"https://github.com/TimboKZ/dotfiles\">put some of my dotfiles on GitHub</a>, including a pretty handy <a href=\"https://github.com/TimboKZ/dotfiles/blob/master/install.sh\">installation script</a>. Check out the <code>README.md</code> file in the repo linked above to see the description of the tools I used. As I'll keep updating that readme as I adjust my dotfiles.</p>\n\n<h1 id=\"demo\">Demo</h1>\n\n<blockquote>\n  <p>Note: At the time of writing, to save some time on configuration I use Ubuntu Server 16.10 and then customise it to my liking, so below you'll mostly see Ubuntu. That said, I'm very interested in Arch Linux so at some point I'm going to migrate to it.</p>\n</blockquote>\n\n<p>Be warned - I like to give my machines silly names. Below you can see a screenshot from <strong>Purity</strong>, my Sony VAIO Pro 13 laptop.</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Mar/purity-1489267030679.png\" alt=\"The Linux setup for my laptop, Purity, Sony VAIO Pro 13\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-03-10 19:34:51","created_by":1,"updated_at":"2017-03-28 04:03:20","updated_by":1,"published_at":"2017-03-10 19:46:38","published_by":1,"amp":null},{"id":32,"uuid":"e1a84a29-f134-493b-92a7-f6e80a690b95","title":"Discord Spoiler Bot","slug":"discord-spoiler-bot","markdown":"# Abstract\n\nI was elected as the treasurer of UCLU Anime Society 2016/17, and since I was a computer science student I was also responsible for IT in our society. Half way into the academic year we created a Discord chat for our society, and people begun requesting various features. One of said features was a bot that would somehow hide spoilers, which is how Discord Spoiler Bot was born.\n\n# Discord Spoiler Bot\n\nBelow you can see a quick demonstration of the bot in action. It deletes the original message and replaces it with a GIF that requires the user to hover over it to reveal content. If you haven't used Discord, to you this would sound like a very hacky way of hiding spoilers - well, it is! Sadly there aren't any other simple ways to achieve the same result.\n\n![Discord Spoiler Bot demonstration](https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/Spoiler_Bot_One_Line-1487990846207.gif)\n\nYou can find out more about about Discord Spoiler Bot on [its GitHub page](https://github.com/TimboKZ/discord-spoiler-bot). By the way, it also works with long strings and by default trims content of the spoiler if takes up more than 6 lines, but this limit can be adjusted.\n\n![Discord Spoiler Bot with spoiler content spanning over multiple lines](https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/Spoiler_Bot_Multiple_Lines-1487991244852.gif)\n\nFinally, you can mark messages from other users as spoilers given you have sufficient permissions.\n\n![Discord Spoiler Bot marking someone else's messages as spoilers](https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/Spoiler_Bot_Other_Messages-1488088171731.gif)","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>I was elected as the treasurer of UCLU Anime Society 2016/17, and since I was a computer science student I was also responsible for IT in our society. Half way into the academic year we created a Discord chat for our society, and people begun requesting various features. One of said features was a bot that would somehow hide spoilers, which is how Discord Spoiler Bot was born.</p>\n\n<h1 id=\"discordspoilerbot\">Discord Spoiler Bot</h1>\n\n<p>Below you can see a quick demonstration of the bot in action. It deletes the original message and replaces it with a GIF that requires the user to hover over it to reveal content. If you haven't used Discord, to you this would sound like a very hacky way of hiding spoilers - well, it is! Sadly there aren't any other simple ways to achieve the same result.</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/Spoiler_Bot_One_Line-1487990846207.gif\" alt=\"Discord Spoiler Bot demonstration\" /></p>\n\n<p>You can find out more about about Discord Spoiler Bot on <a href=\"https://github.com/TimboKZ/discord-spoiler-bot\">its GitHub page</a>. By the way, it also works with long strings and by default trims content of the spoiler if takes up more than 6 lines, but this limit can be adjusted.</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/Spoiler_Bot_Multiple_Lines-1487991244852.gif\" alt=\"Discord Spoiler Bot with spoiler content spanning over multiple lines\" /></p>\n\n<p>Finally, you can mark messages from other users as spoilers given you have sufficient permissions.</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/Spoiler_Bot_Other_Messages-1488088171731.gif\" alt=\"Discord Spoiler Bot marking someone else's messages as spoilers\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-02-25 01:02:56","created_by":1,"updated_at":"2017-02-26 05:49:40","updated_by":1,"published_at":"2017-02-25 01:11:04","published_by":1,"amp":null},{"id":33,"uuid":"31dd4460-78d4-4191-8f44-dfe20afed608","title":"Spotify playback and volume control using keyboard shortcuts on Linux","slug":"spotify-playback-and-volume-control-using-keyboard-shortcuts-on-linux","markdown":"# Abstract\n\nRecently I've been playing around with my new Ubuntu setup (using bspwm, seen below) and I needed to get my keyboard playback and volume controls working to use Spotify efficiently. While this topic has been covered extensively on the web, the knowledge is currently spread among multiple websites and this is my attempt to gather some parts of it in one place so it'll be easier for you to start off. Obviously the exact setups will vary greatly depending on your setup, but I have this article will be able to give you a starting point.\n\n![Tim's Ubuntu 16.10 setup using bspwm](https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/euql1n_dominator-1487433582686.png)\n\nA quick clarification: In this article I'll be talking about designated volume control keys, such as the ones below as they appear on my K70. That said, you can potentially map volume/playback controls to any key you want, e.g. `F11` or `Super + q`.\n\n![Corsair K70 volume control keys](https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/k70_audio_2-1487434271281.png)\n\n# Keyboard volume controls\n\nFirst of all, the keys you're interested in are `XF86AudioRaiseVolume`, `XF86AudioLowerVolume` and `XF86AudioMute`.\n\nTo find which commands to bind them to, you must know what you use for sound control in your system. I personally use [PulseAudio](https://wiki.archlinux.org/index.php/PulseAudio#Keyboard_volume_control) so in my case `pactl` does the job, while you might use something like [ALSA](https://wiki.archlinux.org/index.php/Advanced_Linux_Sound_Architecture#Keyboard_volume_control).\n\nI also use [sxhkd](https://github.com/baskerville/sxhkd) to handle all of the bindings, and below you can see what I had to add to my `sxhkdrc`. I set the volume increment to 5% but you can change it to whatever works for you.\n\n```language-bash\n# Structure is:\n# <keyboard-key>\n#     <command-to-bind>\nXF86AudioMute\n    pactl set-sink-mute 0 toggle\nXF86AudioRaiseVolume\n    pactl set-sink-volume 0 +5%\nXF86AudioLowerVolume\n    pactl set-sink-volume 0 -5%;\n```\n\nNote that this will adjust volume for the whole system, not just Spotify. I looked into adjusting Spotify volume using the approach described below, and sadly [it doesn't seem](https://community.spotify.com/t5/Desktop-Linux-Windows-Web-Player/Cannot-control-volume-using-MPRIS-D-bus/td-p/1458761) to be possible at the time of writing.\n\n# Keyboard Spotify controls\n\nThere are [several ways](https://wiki.archlinux.org/index.php/spotify) to get keyboard controls to work with Spotify Linux client, I went with MPRIS2 + D-Bus combination. I'm running Ubuntu 16.10 so I had to install a couple of dependencies (`sudo apt-get install mpdris2 mpris-remote`), but once this was out of the way this addition to my `sxhkdrc` did the trick:\n\n```language-bash\nXF86AudioPlay\n    dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause\nXF86AudioStop\n    dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Stop\nXF86AudioNext\n    dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Next\nXF86AudioPrev\n    dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Previous\n```\n\nYou can also use this little hacky command for `XF86AudioPlay` to launch Spotify when you press play and Spotify is not open (just don't spam it):\n\n```language-bash\nXF86AudioPlay\n    if ! dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause; then spotify; fi\n```\n\nAs I said before, these exact steps might not work for you but I hope I've pointed in the right direction.","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>Recently I've been playing around with my new Ubuntu setup (using bspwm, seen below) and I needed to get my keyboard playback and volume controls working to use Spotify efficiently. While this topic has been covered extensively on the web, the knowledge is currently spread among multiple websites and this is my attempt to gather some parts of it in one place so it'll be easier for you to start off. Obviously the exact setups will vary greatly depending on your setup, but I have this article will be able to give you a starting point.</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/euql1n_dominator-1487433582686.png\" alt=\"Tim's Ubuntu 16.10 setup using bspwm\" /></p>\n\n<p>A quick clarification: In this article I'll be talking about designated volume control keys, such as the ones below as they appear on my K70. That said, you can potentially map volume/playback controls to any key you want, e.g. <code>F11</code> or <code>Super + q</code>.</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/k70_audio_2-1487434271281.png\" alt=\"Corsair K70 volume control keys\" /></p>\n\n<h1 id=\"keyboardvolumecontrols\">Keyboard volume controls</h1>\n\n<p>First of all, the keys you're interested in are <code>XF86AudioRaiseVolume</code>, <code>XF86AudioLowerVolume</code> and <code>XF86AudioMute</code>.</p>\n\n<p>To find which commands to bind them to, you must know what you use for sound control in your system. I personally use <a href=\"https://wiki.archlinux.org/index.php/PulseAudio#Keyboard_volume_control\">PulseAudio</a> so in my case <code>pactl</code> does the job, while you might use something like <a href=\"https://wiki.archlinux.org/index.php/Advanced_Linux_Sound_Architecture#Keyboard_volume_control\">ALSA</a>.</p>\n\n<p>I also use <a href=\"https://github.com/baskerville/sxhkd\">sxhkd</a> to handle all of the bindings, and below you can see what I had to add to my <code>sxhkdrc</code>. I set the volume increment to 5% but you can change it to whatever works for you.</p>\n\n<pre><code class=\"language-bash\"># Structure is:\n# &lt;keyboard-key&gt;\n#     &lt;command-to-bind&gt;\nXF86AudioMute  \n    pactl set-sink-mute 0 toggle\nXF86AudioRaiseVolume  \n    pactl set-sink-volume 0 +5%\nXF86AudioLowerVolume  \n    pactl set-sink-volume 0 -5%;\n</code></pre>\n\n<p>Note that this will adjust volume for the whole system, not just Spotify. I looked into adjusting Spotify volume using the approach described below, and sadly <a href=\"https://community.spotify.com/t5/Desktop-Linux-Windows-Web-Player/Cannot-control-volume-using-MPRIS-D-bus/td-p/1458761\">it doesn't seem</a> to be possible at the time of writing.</p>\n\n<h1 id=\"keyboardspotifycontrols\">Keyboard Spotify controls</h1>\n\n<p>There are <a href=\"https://wiki.archlinux.org/index.php/spotify\">several ways</a> to get keyboard controls to work with Spotify Linux client, I went with MPRIS2 + D-Bus combination. I'm running Ubuntu 16.10 so I had to install a couple of dependencies (<code>sudo apt-get install mpdris2 mpris-remote</code>), but once this was out of the way this addition to my <code>sxhkdrc</code> did the trick:</p>\n\n<pre><code class=\"language-bash\">XF86AudioPlay  \n    dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause\nXF86AudioStop  \n    dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Stop\nXF86AudioNext  \n    dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Next\nXF86AudioPrev  \n    dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Previous\n</code></pre>\n\n<p>You can also use this little hacky command for <code>XF86AudioPlay</code> to launch Spotify when you press play and Spotify is not open (just don't spam it):</p>\n\n<pre><code class=\"language-bash\">XF86AudioPlay  \n    if ! dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause; then spotify; fi\n</code></pre>\n\n<p>As I said before, these exact steps might not work for you but I hope I've pointed in the right direction.</p>","image":"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/k70_audio_2-1487434138556.png","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":"Guide on how to get keyboard Spotify playback and volume controls working on Linux, using Corsair K70 and Ubuntu 16.10 as an example.","author_id":1,"created_at":"2017-02-18 15:56:18","created_by":1,"updated_at":"2017-02-18 17:08:44","updated_by":1,"published_at":"2017-02-18 16:39:40","published_by":1,"amp":null},{"id":34,"uuid":"a5d2f6a6-b2c2-4d28-9ae3-bb76cc09db3a","title":"Hiding compiled JavaScript or CSS from GitHub diff","slug":"hiding-compiled-javascript-or-css-from-github-diff","markdown":"# Abstract\n\nWhile working on [Blitz](https://github.com/TimboKZ/blitz), a static site generator I'm developing, I wanted to prevent compiled JavaScript from cluttering the diffs. I was using TypeScript which was compiled into JS, so I was really only interested in the changes to TS source code.\n\n# Solution\n\nTo avoid wasting your time, let's jump into it straight away. You have to make sure that a source map is appended to any JS (or CSS) files you want to hide from your diffs. As an example, look at the source maps appended to JS files in Blitz:\n\n```language-javascript\n        // ...\n        projectPreviewer.startServer();\n    };\n    return Blitz;\n}());\nexports.Blitz = Blitz;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,[...]\n```\n\nPay attention to the inline source map that can be seen in the very end. It is likely that tool you're using to get the compiled JS/CSS has a feature that can generate such source maps, so do a quick Google search if you need it.\n\nAs you'll find out below, minifying the file should also work but I have not personally tried it. Also, remember that this **does not** actually remove the generated files from diff, it simply prevents the changes to source code from being displayed, like so:\n\n![Hiding JS and CSS changes from GitHub diff](https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/GitHubDiff-1486236578248.png)\n\nIf you want to remove the files from the diff completely, you'd probably want to use [.gitignore](https://git-scm.com/docs/gitignore).\n\n# How it works\n\nGitHub is using a tool called [Linguist](https://github.com/github/linguist) to do all of the magic related to recognising binary files, determining the language something's written in and so on.\n\nBy adding a source map to the end of your JS/CSS files, you're forcing Linguist to recognise them as generated files. According to [the code responsible for this particular feature](https://github.com/github/linguist/blob/3719214abafb6a964f1eef65acb068659f62399b/lib/linguist/generated.rb#L97-L141), Linguist can also recognise minified CSS and JS files, but I haven't personally tested this.","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>While working on <a href=\"https://github.com/TimboKZ/blitz\">Blitz</a>, a static site generator I'm developing, I wanted to prevent compiled JavaScript from cluttering the diffs. I was using TypeScript which was compiled into JS, so I was really only interested in the changes to TS source code.</p>\n\n<h1 id=\"solution\">Solution</h1>\n\n<p>To avoid wasting your time, let's jump into it straight away. You have to make sure that a source map is appended to any JS (or CSS) files you want to hide from your diffs. As an example, look at the source maps appended to JS files in Blitz:</p>\n\n<pre><code class=\"language-javascript\">        // ...\n        projectPreviewer.startServer();\n    };\n    return Blitz;\n}());\nexports.Blitz = Blitz;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,[...]\n</code></pre>\n\n<p>Pay attention to the inline source map that can be seen in the very end. It is likely that tool you're using to get the compiled JS/CSS has a feature that can generate such source maps, so do a quick Google search if you need it.</p>\n\n<p>As you'll find out below, minifying the file should also work but I have not personally tried it. Also, remember that this <strong>does not</strong> actually remove the generated files from diff, it simply prevents the changes to source code from being displayed, like so:</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/GitHubDiff-1486236578248.png\" alt=\"Hiding JS and CSS changes from GitHub diff\" /></p>\n\n<p>If you want to remove the files from the diff completely, you'd probably want to use <a href=\"https://git-scm.com/docs/gitignore\">.gitignore</a>.</p>\n\n<h1 id=\"howitworks\">How it works</h1>\n\n<p>GitHub is using a tool called <a href=\"https://github.com/github/linguist\">Linguist</a> to do all of the magic related to recognising binary files, determining the language something's written in and so on.</p>\n\n<p>By adding a source map to the end of your JS/CSS files, you're forcing Linguist to recognise them as generated files. According to <a href=\"https://github.com/github/linguist/blob/3719214abafb6a964f1eef65acb068659f62399b/lib/linguist/generated.rb#L97-L141\">the code responsible for this particular feature</a>, Linguist can also recognise minified CSS and JS files, but I haven't personally tested this.</p>","image":"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/GitHubDiff-1486236710480.png","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":"","author_id":1,"created_at":"2017-02-04 19:03:28","created_by":1,"updated_at":"2017-02-04 19:35:02","updated_by":1,"published_at":"2017-02-04 19:31:32","published_by":1,"amp":null},{"id":35,"uuid":"7cfa4271-13a8-4f14-8fcf-f01e40f1fdd1","title":"Presenting to Steve Guggenheimer, Corporate VP of Microsoft","slug":"presenting-peach-reality-to-steve-guggenheimer-corporate-vp-of-microsoft","markdown":"# Abstract\n\nOn December 5th, 2016, I got a chance to present the [PEACH Reality project](https://foxypanda.me/ucl-peach-reality-with-microsoft-hololens/) I've been working on to [Steve Guggenheimer](https://blogs.msdn.microsoft.com/stevengu/about/), who is (at the time of writing) the Corporate Vice President & Chief Evangelist at Microsoft.\n\n# Presentation\n\nThe presentation itself lasted around 15 minutes during which my team had a chance to describe the purpose of the project, expected outcomes and deliverables and, finally, show the prototype of our app in action. The video we've shown to Steve can be found [here](https://www.youtube.com/watch?v=V2mnBVkD-Rs) and the slides (for those interested) can be seen [here](https://drive.google.com/open?id=1VA9FE6Op9Kcw7JSJ3pLuFYOWx35cpqpuRNjGVCvJuww). Sadly the quality isn't as good as I'd want it to be but we've been given very short notice about this presentation and it turned out quite well in the end.\n\nThe picture below was taken by [Mirek Janatka](https://www.linkedin.com/in/mjanatka/), who's currently doing his PhD in Surgical Robotic Vision in UCL and is supervising our project. Steve Guggenheimer can be seen sitting on the left and I'm the one holding HoloLens right in front of the screen.\n\n![Presenting PEACH Reality project to Steve Guggenheimer, who can be seen sitting on the left](https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/15390977_10100651948190242_5979156787898816030_n-1486999498401.jpg)","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>On December 5th, 2016, I got a chance to present the <a href=\"https://foxypanda.me/ucl-peach-reality-with-microsoft-hololens/\">PEACH Reality project</a> I've been working on to <a href=\"https://blogs.msdn.microsoft.com/stevengu/about/\">Steve Guggenheimer</a>, who is (at the time of writing) the Corporate Vice President &amp; Chief Evangelist at Microsoft.</p>\n\n<h1 id=\"presentation\">Presentation</h1>\n\n<p>The presentation itself lasted around 15 minutes during which my team had a chance to describe the purpose of the project, expected outcomes and deliverables and, finally, show the prototype of our app in action. The video we've shown to Steve can be found <a href=\"https://www.youtube.com/watch?v=V2mnBVkD-Rs\">here</a> and the slides (for those interested) can be seen <a href=\"https://drive.google.com/open?id=1VA9FE6Op9Kcw7JSJ3pLuFYOWx35cpqpuRNjGVCvJuww\">here</a>. Sadly the quality isn't as good as I'd want it to be but we've been given very short notice about this presentation and it turned out quite well in the end.</p>\n\n<p>The picture below was taken by <a href=\"https://www.linkedin.com/in/mjanatka/\">Mirek Janatka</a>, who's currently doing his PhD in Surgical Robotic Vision in UCL and is supervising our project. Steve Guggenheimer can be seen sitting on the left and I'm the one holding HoloLens right in front of the screen.</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/15390977_10100651948190242_5979156787898816030_n-1486999498401.jpg\" alt=\"Presenting PEACH Reality project to Steve Guggenheimer, who can be seen sitting on the left\" /></p>","image":"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/15390977_10100651948190242_5979156787898816030_n-1487000055663.jpg","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-02-13 15:06:58","created_by":1,"updated_at":"2017-02-13 16:48:21","updated_by":1,"published_at":"2017-02-13 15:33:13","published_by":1,"amp":null},{"id":36,"uuid":"f452f23c-f06c-4677-b866-464cc4e46801","title":"Life PG: Technical Challenges","slug":"life-pg-technical-challenges","markdown":"# Abstract\n\nThis article is about challenges. Refer to another one about the concept.\n\n# Secure Social Login\n\nhttp://digitalleaves.com/blog/2014/06/building-your-own-rest-api-with-oauth-2-0-ii-the-good-the-bad-and-the-ugly/","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>This article is about challenges. Refer to another one about the concept.</p>\n\n<h1 id=\"securesociallogin\">Secure Social Login</h1>\n\n<p><a href=\"http://digitalleaves.com/blog/2014/06/building-your-own-rest-api-with-oauth-2-0-ii-the-good-the-bad-and-the-ugly/\">http://digitalleaves.com/blog/2014/06/building-your-own-rest-api-with-oauth-2-0-ii-the-good-the-bad-and-the-ugly/</a></p>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-03-28 06:38:51","created_by":1,"updated_at":"2017-03-28 06:39:52","updated_by":1,"published_at":null,"published_by":null,"amp":null},{"id":37,"uuid":"8bff003e-3a00-4f86-ba7b-3640e5d9097c","title":"JS Gaussian Elimination","slug":"js-gaussian-elimination","markdown":"# Abstract\n\nWhile doing some coursework for MATH6301 module for uni I decided that it takes too damn long to write out basic gaussian elimination operations. Additionally, I felt like procrastinating and doing something that will involve using [gulp](http://gulpjs.com/) which I have only recently discovered. The result was this gaussian elimination visualiser written in JavaScript (well, technically TypeScript).\n\n# Demo and source\n\nThe interactive demo of this project can be found on [this page here](https://hosting.kawaiidesu.me/gaussian-elimination/). The interface is pretty self-explanatory, but you can find some instructions by clicking the help button. The whole thing was made using TypeScript for logic and Sass for appearance, with gulp used for compilation and real time changes preview. You can find the source code on [this GitHub page](https://github.com/TimboKZ/JS-Gaussian-Elimination). Check out the screenshot below to see what it's supposed to look like (in case you can't load the demo).\n\n![Gaussian Elimination Visualiser](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/gaussian_elimination-1472354407434.png)","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>While doing some coursework for MATH6301 module for uni I decided that it takes too damn long to write out basic gaussian elimination operations. Additionally, I felt like procrastinating and doing something that will involve using <a href=\"http://gulpjs.com/\">gulp</a> which I have only recently discovered. The result was this gaussian elimination visualiser written in JavaScript (well, technically TypeScript).</p>\n\n<h1 id=\"demoandsource\">Demo and source</h1>\n\n<p>The interactive demo of this project can be found on <a href=\"https://hosting.kawaiidesu.me/gaussian-elimination/\">this page here</a>. The interface is pretty self-explanatory, but you can find some instructions by clicking the help button. The whole thing was made using TypeScript for logic and Sass for appearance, with gulp used for compilation and real time changes preview. You can find the source code on <a href=\"https://github.com/TimboKZ/JS-Gaussian-Elimination\">this GitHub page</a>. Check out the screenshot below to see what it's supposed to look like (in case you can't load the demo).</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/gaussian_elimination-1472354407434.png\" alt=\"Gaussian Elimination Visualiser\" /></p>","image":"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/gaussian_elimination-1472354407434.png","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-27 20:41:58","created_by":1,"updated_at":"2016-08-31 11:44:09","updated_by":1,"published_at":"2016-03-12 21:42:00","published_by":1,"amp":null},{"id":38,"uuid":"8d3959bb-d881-43ce-a828-9dda854dc56c","title":"COMP207P Compilers Guidelines Part 2: Java Bytecode Optimisation","slug":"comp207p-compilers-guidelines-part-2-java-bytecode-optimisation","markdown":"# Abstract\n\nAs described in [the previous article](https://foxypanda.me/comp207p-compilers-coursework-guidelines/), during my time in UCL I had to work on several pieces of coursework related to the development of compilers. In this article I'll be expressing some thoughts and suggestions about the second coursework, the one concerned with altering Java bytecode to implement things like constant folding and constant propagation.\n\nIn contrast to the previous article, this one will be relatively short and won't have as many instructions. Instead, it will provide some food for thought that will hopefully help you wrap your head around this coursework. I'll talk a bit about Java bytecode and then will move on to [Byte Code Engineering Library](https://commons.apache.org/proper/commons-bcel/) (BCEL).\n\nFYI, I got [Federica Sarro](http://www0.cs.ucl.ac.uk/staff/F.Sarro/)'s permission to share this article. She asked me to remind everyone that these are just my own thoughts and this article was not reviewed by any lecturers.\n\n# Java bytecode\n\nUnderstanding how Java bytecode is interpreted by the Java Virtual Machine (JVM) is crucial for this coursework. A good place to start would be [Mastering Java Bytecode at the Core of the JVM](https://zeroturnaround.com/rebellabs/rebel-labs-report-mastering-java-bytecode-at-the-core-of-the-jvm/) by Anton Ahripov - it's quite a lengthy guide but it covers pretty much everything you'd want to know about bytecode at this stage. That said, you most likely won't need to read the whole thing, just the first couple of pages to get a basic idea of what you're working with.\n\nOnce you understand what Java bytecode is, I'd suggest you begin playing with the actual code provided as a part of the coursework. The process for preparing the project is extremely straightforward - Just install [Ant](http://ant.apache.org/), unzip the coursework archive somewhere and run `ant test` in the project root. You might notice that all tests will pass although you haven't done anything - that is because the tests only confirm that the alterations you made to the bytecode do not change the behaviour of the code but don't actually test how efficiently you've optimised the code.\n\n> Quick tip: IDEs like IntelliJ Idea usually have built-in features to decompile bytecode, which might be pretty useful when it comes to not only understanding how bytecode works but also confirming that your optimisations worked as intended.\n\nTo see what bytecode is produced from the example code in the project, you can add the snippet below to your `ConstantFolder.java`. Keep in mind that this is just a quick way to peek at the bytecode, I'd suggest coming up with a different abstraction for the actual implementation. In fact, the implementation I used differed significantly from what you see below.\n\n```language-java\npublic void optimize() {\n    ClassGen classGen = new ClassGen(original);\n    ConstantPoolGen constPoolGen = classGen.getConstantPool();\n    Method[] methods = classGen.getMethods();\n    for (Method method : methods) {\n        MethodGen methodGen = new MethodGen(method, classGen.getClassName(), constPoolGen);\n        System.out.println(classGen.getClassName() + \" > \" + method.getName());\n        System.out.println(methodGen.getInstructionList());\n    }\n    this.optimized = gen.getJavaClass();\n}\n```\n\nThe output this code will give you can be seen below. On the left you'll see decompiled bytecode of one of the dummy test classes and on the right is the list of instructions that BCEL has extracted for you.\n\n![Decompiled Java bytecode on the left, instruction list outputted by BCEL on the right](https://foxypanda-ghost.s3.amazonaws.com/2017/Mar/bytecode-1490671577694.png)\n\nI found [Java bytecode instruction listings on Wikipedia](https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings) extremely useful when trying to find how bytecode relates to the actual Java code. Once you get to a level where you're confident with logic that bytecode instructions follow, you shouldn't have any issues coming up with strategies for different optimisations.\n\nFor this coursework, you'll mostly be working `ConstantPushInstruction`, `StoreInstruction`, `LoadInstruction`, `ArithmeticInstruction`, `GotoInstruction` and the children of these classes. Sadly this is as far as I can go for Java bytecode without giving too much info away. In the next section I'll talk a bit about using BCEL.\n\n# BCEL\n\nFirst of all, [obligatory link to BCEL API manual](https://commons.apache.org/proper/commons-bcel/manual/bcel-api.html). Now BCEL is reasonably flexible and there are multiple ways in which you could design your solution. I'm going to talk a bit about the abstraction that worked reasonably well for me.\n\n","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>As described in <a href=\"https://foxypanda.me/comp207p-compilers-coursework-guidelines/\">the previous article</a>, during my time in UCL I had to work on several pieces of coursework related to the development of compilers. In this article I'll be expressing some thoughts and suggestions about the second coursework, the one concerned with altering Java bytecode to implement things like constant folding and constant propagation.</p>\n\n<p>In contrast to the previous article, this one will be relatively short and won't have as many instructions. Instead, it will provide some food for thought that will hopefully help you wrap your head around this coursework. I'll talk a bit about Java bytecode and then will move on to <a href=\"https://commons.apache.org/proper/commons-bcel/\">Byte Code Engineering Library</a> (BCEL).</p>\n\n<p>FYI, I got <a href=\"http://www0.cs.ucl.ac.uk/staff/F.Sarro/\">Federica Sarro</a>'s permission to share this article. She asked me to remind everyone that these are just my own thoughts and this article was not reviewed by any lecturers.</p>\n\n<h1 id=\"javabytecode\">Java bytecode</h1>\n\n<p>Understanding how Java bytecode is interpreted by the Java Virtual Machine (JVM) is crucial for this coursework. A good place to start would be <a href=\"https://zeroturnaround.com/rebellabs/rebel-labs-report-mastering-java-bytecode-at-the-core-of-the-jvm/\">Mastering Java Bytecode at the Core of the JVM</a> by Anton Ahripov - it's quite a lengthy guide but it covers pretty much everything you'd want to know about bytecode at this stage. That said, you most likely won't need to read the whole thing, just the first couple of pages to get a basic idea of what you're working with.</p>\n\n<p>Once you understand what Java bytecode is, I'd suggest you begin playing with the actual code provided as a part of the coursework. The process for preparing the project is extremely straightforward - Just install <a href=\"http://ant.apache.org/\">Ant</a>, unzip the coursework archive somewhere and run <code>ant test</code> in the project root. You might notice that all tests will pass although you haven't done anything - that is because the tests only confirm that the alterations you made to the bytecode do not change the behaviour of the code but don't actually test how efficiently you've optimised the code.</p>\n\n<blockquote>\n  <p>Quick tip: IDEs like IntelliJ Idea usually have built-in features to decompile bytecode, which might be pretty useful when it comes to not only understanding how bytecode works but also confirming that your optimisations worked as intended.</p>\n</blockquote>\n\n<p>To see what bytecode is produced from the example code in the project, you can add the snippet below to your <code>ConstantFolder.java</code>. Keep in mind that this is just a quick way to peek at the bytecode, I'd suggest coming up with a different abstraction for the actual implementation. In fact, the implementation I used differed significantly from what you see below.</p>\n\n<pre><code class=\"language-java\">public void optimize() {  \n    ClassGen classGen = new ClassGen(original);\n    ConstantPoolGen constPoolGen = classGen.getConstantPool();\n    Method[] methods = classGen.getMethods();\n    for (Method method : methods) {\n        MethodGen methodGen = new MethodGen(method, classGen.getClassName(), constPoolGen);\n        System.out.println(classGen.getClassName() + \" &gt; \" + method.getName());\n        System.out.println(methodGen.getInstructionList());\n    }\n    this.optimized = gen.getJavaClass();\n}\n</code></pre>\n\n<p>The output this code will give you can be seen below. On the left you'll see decompiled bytecode of one of the dummy test classes and on the right is the list of instructions that BCEL has extracted for you.</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Mar/bytecode-1490671577694.png\" alt=\"Decompiled Java bytecode on the left, instruction list outputted by BCEL on the right\" /></p>\n\n<p>I found <a href=\"https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings\">Java bytecode instruction listings on Wikipedia</a> extremely useful when trying to find how bytecode relates to the actual Java code. Once you get to a level where you're confident with logic that bytecode instructions follow, you shouldn't have any issues coming up with strategies for different optimisations.</p>\n\n<p>For this coursework, you'll mostly be working <code>ConstantPushInstruction</code>, <code>StoreInstruction</code>, <code>LoadInstruction</code>, <code>ArithmeticInstruction</code>, <code>GotoInstruction</code> and the children of these classes. Sadly this is as far as I can go for Java bytecode without giving too much info away. In the next section I'll talk a bit about using BCEL.</p>\n\n<h1 id=\"bcel\">BCEL</h1>\n\n<p>First of all, <a href=\"https://commons.apache.org/proper/commons-bcel/manual/bcel-api.html\">obligatory link to BCEL API manual</a>. Now BCEL is reasonably flexible and there are multiple ways in which you could design your solution. I'm going to talk a bit about the abstraction that worked reasonably well for me.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-03-28 02:42:28","created_by":1,"updated_at":"2017-04-06 21:52:25","updated_by":1,"published_at":"2017-04-06 21:52:25","published_by":1,"amp":null},{"id":39,"uuid":"d5eca594-03e9-4cd2-b3cf-6d0f0c9e2081","title":"Useful Links","slug":"useful-links","markdown":"# Abstract\n\nI tend to go through quite a lot of various programming articles every day and once in a while I find something that I really want to share with the world, or at least save it for future reference. This page will serve said purpose by storing the links to materials I personally find useful.\n\nEach link is accompanied by a brief summary of the contents and why you might be interested in checking it out. Additionally, I tried to group some links together to produce short \"series\" of related articles that might help you get started with some technology or just get a better understanding of a specific topic. ~~You might have also noticed that some links have a \"Difficulty\" level associated with them - this is my personal subjective opinion so please don't be offended and in fact feel free to comment in the bottom of this page with any complaints or suggestions.~~ I decided to drop the difficulty for now as it is too subjective, instead I marked some articles which I considered to be *must-read*.\n\n# Git\n\nHere are a series of articles to help you Git right. They can cover pretty much anything related to Git and range from super basic to reasonably advanced.\n\n* [git - the simple guide](http://rogerdudler.github.io/git-guide/). **Must read** if you know nothing about Git or don't feel quite confident about its basic functionality. Very beginner-friendly.\n* [How to Write a Git Commit Message](https://chris.beams.io/posts/git-commit/). A lengthy article about how to write descriptive commit messages that will actually help other developers understand your intent. It could arguably be considered **must read** but the article is quite long, and for most people shorter things [like this post](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html) might suffice.\n* [A successful Git branching model](http://nvie.com/posts/a-successful-git-branching-model/). This posts talks about a Git branching strategy that seems to work quite well. Even if you're not going to use this particular model, it's a useful read that will show you some of the techniques that can be used.\n\n# Machine Learning and AI\n\n* [Fueling the Gold Rush: The Greatest Public Datasets for AI](https://medium.com/startup-grind/fueling-the-ai-gold-rush-7ae438505bc2). As the title suggests, a collection of datasets that can be used to train or test your neural nets.\n\n# UI, UX and Accessibility\n\n* [125 Easy Tweaks to Optimize Your Website’s UX/UI Today](https://www.nickkolenda.com/user-experience/). A reasonably long post covering different UX practices. Some are very straightforward, some are way less trivial than you would expect. Can be useful for general knowledge.\n\n","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>I tend to go through quite a lot of various programming articles every day and once in a while I find something that I really want to share with the world, or at least save it for future reference. This page will serve said purpose by storing the links to materials I personally find useful.</p>\n\n<p>Each link is accompanied by a brief summary of the contents and why you might be interested in checking it out. Additionally, I tried to group some links together to produce short \"series\" of related articles that might help you get started with some technology or just get a better understanding of a specific topic. <del>You might have also noticed that some links have a \"Difficulty\" level associated with them - this is my personal subjective opinion so please don't be offended and in fact feel free to comment in the bottom of this page with any complaints or suggestions.</del> I decided to drop the difficulty for now as it is too subjective, instead I marked some articles which I considered to be <em>must-read</em>.</p>\n\n<h1 id=\"git\">Git</h1>\n\n<p>Here are a series of articles to help you Git right. They can cover pretty much anything related to Git and range from super basic to reasonably advanced.</p>\n\n<ul>\n<li><a href=\"http://rogerdudler.github.io/git-guide/\">git - the simple guide</a>. <strong>Must read</strong> if you know nothing about Git or don't feel quite confident about its basic functionality. Very beginner-friendly.</li>\n<li><a href=\"https://chris.beams.io/posts/git-commit/\">How to Write a Git Commit Message</a>. A lengthy article about how to write descriptive commit messages that will actually help other developers understand your intent. It could arguably be considered <strong>must read</strong> but the article is quite long, and for most people shorter things <a href=\"http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\">like this post</a> might suffice.</li>\n<li><a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">A successful Git branching model</a>. This posts talks about a Git branching strategy that seems to work quite well. Even if you're not going to use this particular model, it's a useful read that will show you some of the techniques that can be used.</li>\n</ul>\n\n<h1 id=\"machinelearningandai\">Machine Learning and AI</h1>\n\n<ul>\n<li><a href=\"https://medium.com/startup-grind/fueling-the-ai-gold-rush-7ae438505bc2\">Fueling the Gold Rush: The Greatest Public Datasets for AI</a>. As the title suggests, a collection of datasets that can be used to train or test your neural nets.</li>\n</ul>\n\n<h1 id=\"uiuxandaccessibility\">UI, UX and Accessibility</h1>\n\n<ul>\n<li><a href=\"https://www.nickkolenda.com/user-experience/\">125 Easy Tweaks to Optimize Your Website’s UX/UI Today</a>. A reasonably long post covering different UX practices. Some are very straightforward, some are way less trivial than you would expect. Can be useful for general knowledge.</li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-29 22:54:13","created_by":1,"updated_at":"2017-02-14 01:04:54","updated_by":1,"published_at":"2017-02-13 16:57:22","published_by":1,"amp":null},{"id":40,"uuid":"cce6b127-a9d5-4b85-81e9-e6d7eeae9f75","title":"Foxy Panda Source","slug":"foxy-panda-source","markdown":"# Source code\n\nFirst of all, you can find Foxy Panda source code on [its GitHub page](https://github.com/TimboKZ/foxy-panda-ghost). If you're interested, there is also [a repo](https://github.com/TimboKZ/FoxyPanda) of an older version of Foxy Panda written on Angular 2. Below you can find some more information about the history and the purpose of this website, as well as an overview of the tools used to build it.\n\n# Foxy Panda\n\nAfter years of rewriting the source code of this blog from scratch, a handful of domain name changes ([kuzhagaliyev.kz](http://kuzhagaliyev.kz/), [timbo.kz](http://timbo.kz/), etc.) and numerous attempts of implementing something that would even remotely resemble a decent content management system I've finally overcome my [NIH syndrome](https://en.wikipedia.org/wiki/Not_invented_here) and decided to stick with [Ghost](https://ghost.org/) as my CMS and hosted the whole thing on [Heroku](https://www.heroku.com/). I couldn't help but make some significant modifications to it (which might have or might have not harmed its performance) and I hope you'll find this website unique and not just yet another Ghost blog.\n\nThe main purpose of this blog is to serve as a storage for my projects, ideas and thoughts which tend to come up at a very random rate so I cannot guarantee I will be updating this blog often. That said, I am still going to try to note down everything noteworthy so you might wanna come back once in a while and see if anything new has been posted (given you are actually interested, of course).\n\nAs for the tools and technologies used: I said a couple of words about Ghost and Heroku above, so now I will mostly focus on libraries and tools I used to customise Ghost. First of all, I used [Sass](http://sass-lang.com/) with [Compass](http://compass-style.org/) to style the pages. I came up with a simple colour palette with 5 colours and I must say it turned out quite nicely, and was a charm to use thanks to Sass variables. I found the headings and text fonts on [Google Fonts](https://fonts.google.com/), their names are Rajdhani and Assistant respectively. The fancy animation and grid on the index page were done using a tool called [Isotope](http://isotope.metafizzy.co/). For syntax highlighting, I use an amazing JS plugin called [Prism](http://prismjs.com/). Last but not least, I used [MathJax](https://www.mathjax.org/) for some $\\LaTeX$ goodness.","mobiledoc":null,"html":"<h1 id=\"sourcecode\">Source code</h1>\n\n<p>First of all, you can find Foxy Panda source code on <a href=\"https://github.com/TimboKZ/foxy-panda-ghost\">its GitHub page</a>. If you're interested, there is also <a href=\"https://github.com/TimboKZ/FoxyPanda\">a repo</a> of an older version of Foxy Panda written on Angular 2. Below you can find some more information about the history and the purpose of this website, as well as an overview of the tools used to build it.</p>\n\n<h1 id=\"foxypanda\">Foxy Panda</h1>\n\n<p>After years of rewriting the source code of this blog from scratch, a handful of domain name changes (<a href=\"http://kuzhagaliyev.kz/\">kuzhagaliyev.kz</a>, <a href=\"http://timbo.kz/\">timbo.kz</a>, etc.) and numerous attempts of implementing something that would even remotely resemble a decent content management system I've finally overcome my <a href=\"https://en.wikipedia.org/wiki/Not_invented_here\">NIH syndrome</a> and decided to stick with <a href=\"https://ghost.org/\">Ghost</a> as my CMS and hosted the whole thing on <a href=\"https://www.heroku.com/\">Heroku</a>. I couldn't help but make some significant modifications to it (which might have or might have not harmed its performance) and I hope you'll find this website unique and not just yet another Ghost blog.</p>\n\n<p>The main purpose of this blog is to serve as a storage for my projects, ideas and thoughts which tend to come up at a very random rate so I cannot guarantee I will be updating this blog often. That said, I am still going to try to note down everything noteworthy so you might wanna come back once in a while and see if anything new has been posted (given you are actually interested, of course).</p>\n\n<p>As for the tools and technologies used: I said a couple of words about Ghost and Heroku above, so now I will mostly focus on libraries and tools I used to customise Ghost. First of all, I used <a href=\"http://sass-lang.com/\">Sass</a> with <a href=\"http://compass-style.org/\">Compass</a> to style the pages. I came up with a simple colour palette with 5 colours and I must say it turned out quite nicely, and was a charm to use thanks to Sass variables. I found the headings and text fonts on <a href=\"https://fonts.google.com/\">Google Fonts</a>, their names are Rajdhani and Assistant respectively. The fancy animation and grid on the index page were done using a tool called <a href=\"http://isotope.metafizzy.co/\">Isotope</a>. For syntax highlighting, I use an amazing JS plugin called <a href=\"http://prismjs.com/\">Prism</a>. Last but not least, I used <a href=\"https://www.mathjax.org/\">MathJax</a> for some $\\LaTeX$ goodness.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-21 17:50:00","created_by":1,"updated_at":"2016-08-28 12:45:52","updated_by":1,"published_at":"2016-08-21 18:57:50","published_by":1,"amp":null},{"id":41,"uuid":"747691cf-ed9f-4588-ba7f-ac2c8cfad70e","title":"LaTeX Bootcamp","slug":"latex-bootcamp","markdown":"# Abstract\n\nDuring my first year as a computer scientist at UCL I found myself using $\\LaTeX$ quite a bit, and I have to be honest here - for someone with absolutely no prior knowledge in that area it wasn't an easy road and the learning curve was quite steep. Naturally, after some practice you begin to understand everything better but in case of $\\LaTeX$, you'll be confused as hell reading through the first couple of tutorials (and probably for several more tutorials after that). The aim of this guide is to help you understand what it actually is and where is the best place to start learning it.\n\n# Introduction\n\nI personally usually skip the introduction part and jump straight to the interesting stuff but doing so in this case would completely defeat the purpose of reading this guide. That said, keep in mind this guide was meant to be super basic so don't be surprised if you see stuff you already know.\n\n## So what the hell is $\\LaTeX$?\n\n$\\LaTeX$, pronounced lah-tekh, lah-tek or lay-tek, is a document preparation system. The core idea to understand here is that in $\\LaTeX$ editors you don't get fancy formatted text as you type, but instead, you type in plain text first and only after compilation do you get the formatted result. The best part is that you can use special markup to customise the formatting and the overall look and feel of your document however you please. For example, if you were to type then compile <code class=\"language-latex\">\\sum\\_{i=1}^{n} \\frac{2i + 5}{2^{i}}</code> you would get something like this: \n$\\sum\\_{i=1}^{n} \\frac{2i + 5}{2^{i}}$. Amazing, isn't it?\n\n## Why would I ever want to use it?\n\n$\\LaTeX$ is arguably the best tool out there when it comes to producing any kind of scientific documentation and many other things, such as journal articles or books. Personally, I love it for how well-structured the final document is and how consistent markup can ensure the professional and extremely neat look of your documents. Moreover, I like how easy it is to load additional packages, such as those for pseudocode formatting or simple UML diagrams. As a quick example, consider this piece of coursework I had to write not so long ago:\n\n![COMP104P Algorithm Complexity Coursework](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_example-1472389145110.png)\n\nI won't lie, the markup is much more complicated than that in your average word processor, but this complexity really pays off later when you get a beautifully formatted compiled result.\n\n#How does it work?\n\nAs I said above, $\\LaTeX$ markup has to be compiled before you can see the pretty formatted result. Which means, you need some kind of software that would do all of the compiling for you. This is where I can't really give you much advice because I've only used such software on Windows up until now, so I'd suggest you do a quick Google search. Out of the things I've tried so far I would recommend [Overleaf](https://www.overleaf.com/), an online collaborative $\\LaTeX$ editor with real time previews, as well as [TeXstudio](http://www.texstudio.org/) for Windows for pretty much the same reason, minus the collaborative writing feature.\n\nThe usual \"development\" pipeline with $\\LaTeX$ is pretty straight-forward: You type up your document, format it using the appropriate markup, compile it, check out the result, fix any formatting issues and compile it again. I personally prefer compiling a bit more often than that to admire the progress I've made, but I guess that excitement will fade over time. Either way, the most efficient technique of writing is not the main focus of this guide.\n\n# Your first document\n\nFrom here onwards I will assume you have installed a decent editor and you already know how to compile the document in the editor of your choice. Well, let's begin with a super simple $\\LaTeX$ document. If you already have some other markup in your editor, remove it. Otherwise, try typing in the code you see below and then compiling. If nothing went wrong in the process, you should get the output similar to the one on the screenshot.\n\n```language-latex\n\\documentclass{article}\n\\begin{document}\n\n\\section{A Section}\nSome dummy text for a paragraph.\n\n\\end{document}\n```\n\n![Your first LaTeX document](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_first_document_1-1472391920247.png)\n\n## Breakdown\n\nThe first line, <code class=\"language-latex\">\\documentclass{...}</code> is one of the most important parts of your document. It tells your editor what kind of document you are writing and allows you to specify various options, such as the font size or whether you want a title page to be present or not. It is recommended to insert this tag in the very beginning of your document, and the format is <code class=\"language-latex\">\\documentclass[options]{class}</code> (note that square brackets denote optional parameters while curly brackets are compulsory). For the sake of this guide I'm going to stick to a simple article class, but if you'd want to you could customise the document class heavily and end up with something like <code class=\"language-latex\">\\documentclass[twoside, openright, 11pt]{report}</code> (read [this](http://texblog.org/2013/02/13/latex-documentclass-options-illustrated/) for more information).\n\n<p>Lines 2 and 7, containing <code class=\"language-latex\">\\begin{document}</code> and <code class=\"language-latex\">\\end{document}</code>\n    respectively, define the boundaries of your document. All of the content you want to be present in the compiled\n    result goes between these 2 tags. In our case we only have one section title and a single sentence. Note how plain\n    text doesn't require any formatting, while something not as ordinary, say, heading, needs to be wrapped in a special\n    tag.\n</p>\n\n<h1>Basic content formatting</h1>\n\n<p>The formatting options available to you differ depending on the type of document class you've chosen so make sure to\n    look up additional formatting tips for the document you are writing. In the examples below I will omit some tags\n    necessary to compile the document (described above) so don't forget to add them before compiling.\n</p>\n\n<h2>Chapters, sections and subsections</h2>\n\n<p>To present your document in a neat, well-structured way you will definitely be using a lot of sections and\n    subsections. Consider the example below.\n</p>\n\n```language-latex\n\\section{Section}\nPellentesque laoreet, ex ut dapibus volutpat, leo nisl sagittis ex, non hendrerit.\n\n\\subsection{Subsection}\nMorbi vitae ipsum eu leo porta ultrices sed nec libero.\n\n\\subsubsection{Subsubsection}\nAliquam pellentesque fermentum felis id luctus.\n```\n\n![LaTeX sections](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_sections-1472395360070.png)\n\n<p>Note how $\\LaTeX$ automatically enumerates the section headings for you. You can insert any amount of sections,\n    subsections or subsubsections wherever you want and during compilation time your editor will automatically resolve\n    any changes in the structure of the document. An amazing outcome of using sections in document is that you can\n    easily generate a table of contents by simply inserting the <code class=\"language-latex\">\\tableofcontents</code> tag\n    anywhere in your document:\n</p>\n\n![Table of contents](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_toc-1472395377437.png)\n\n<h2>Enumeration, bullet points and lists</h2>\n\n<p>Making lists is pretty straightforward. You have to use the familiar <code class=\"language-latex\">\\begin{...}</code>\n    and <code class=\"language-latex\">\\end{...}</code> and place some <code class=\"language-latex\">\\item</code> elements\n    in between. Replace <code>...</code> with the list type, which can either be <code>enumerate</code>,\n    <code>itemize</code> or <code>description</code>.\n</p>\n\n```language-latex\n\\section{Enumerated list}\n\n\\begin{enumerate}\n\\item Item 1\n\\item Item 2\n\\end{enumerate}\n\n\\section{Bullet point list}\n\n\\begin{itemize}\n\\item Item 1\n\\item Item 2\n\\end{itemize}\n\n\\section{Descriptive list}\n\n\\begin{description}\n\\item [Item 1] Description 1\n\\item [Item 2] Description 2\n\\end{description}\n```\n\n![Enumerations](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_enum-1472395399518.png)\n\n<p>Nesting lists is as easy as placing on list inside another, as shown below. Note that the indentation is there purely\n    for decorative purposes and is not actually required for your editor to render the list correctly.\n</p>\n\n```language-latex\n\\begin{enumerate}\n    \\item Item 1\n    \\item Item 2\n    \\begin{itemize}\n        \\item Item 1\n        \\item Item 2\n        \\begin{enumerate}\n            \\item Item 1\n            \\item Item 2\n        \\end{enumerate}\n    \\end{itemize}\n\\end{enumerate}\n```\n\n![Nested lists](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_nested-1472395418425.png)\n\n<h2>Page- and line-breaks</h2>\n\n<p>So, line-breaks. Line-breaks are pretty self-explanatory, you insert them when you want to explicitly your editor you\n    want to jump to a new line. You can use <code class=\"language-latex\">\\\\</code> or <code class=\"language-latex\">\\newline</code>\n    which have the same effect. Note how in the example below, there is no explicit line break between the 2 paragraphs,\n    while there are two between paragraphs 2 and 3 and one between 3 and 4. I omitted the actual paragraph text to make\n    the example clearer.\n</p>\n\n```language-latex\nParagraph 1 text . . .\n\nParagraph 2 text . . .\n\\\\\n\\\\\nParagraph 3 text . . .\n\\\\\nParagraph 4 text . . .\n```\n\n![LaTeX linebreaks](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_line_breaks-1472395504345.png)\n\n<p>Page-breaks push all of the content below them to a new page. Simply insert <code\n        class=\"language-latex\">\\pagebreak</code> wherever you need it and you will achieve the effect similar to the one\n    shown below. There I inserted a <code class=\"language-latex\">\\pagebreak</code> right before the second section.\n</p>\n\n![LaTeX pagebreaks](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_page_break-1472395508874.png)\n\n<h1>Labels and references</h1>\n\n<p>Referencing various parts of your document becomes super easy with $\\LaTeX$. The basic concept is that if you want to\n    reference something, you label it using the <code class=\"language-latex\">\\label{label-name}</code> tag, and then\n    reference it elsewhere using <code class=\"language-latex\">\\ref{label-name}</code>. Additionally, you can reference\n    the number of the page the label is on using <code class=\"language-latex\">\\pageref{label-name}</code>, as shown in\n    the example below.\n</p>\n\n```language-latex\n\\section{A Section}\nFor more information, refer to section \\ref{subsection-2} on page \\pageref{subsection-2}.\n\n\\section{Another Section}\n\\subsection{A subsection}\n\\subsection{Another subsection}\\label{subsection-2}\n```\n\n![References](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_ref-1472395452426.png)\n\n<h1>Packages and comments</h1>\n\n<p>First of all, you can add text that will not be compiled by your editor using the <code>%</code> symbol. Simply\n    insert it in the beginning of the line you want the editor to ignore and add whatever comments you want to the text.\n    Now, moving on to packages - $\\LaTeX$ relies heavily on additional packages which you can use if you need some\n    additional functionality, such as some weird mathematical symbols or pseudocode highlighting, which makes $\\LaTeX$\n    absolutely amazing. To load a package during compilation, you have to insert <code class=\"language-latex\">\\usepackage{package-name}[optional-settings]</code>\n    right after the <code>\\documentclass{...}</code> tag. Check out the example below for both comment and package\n    usage.\n</p>\n\n```language-latex\n\\documentclass{article}\n\n% Package for coloured text\n\\usepackage{color}\n\n% Package for inserting graphics\n\\usepackage{graphicx}\n\n\\begin{document}\n\n% Our content goes here\n\n\\end{document}\n```\n\n<h1>Mathematical expressions</h1>\n\n<p>This is a huge topic and there is just too much to mention for this guide to give you a good idea of how to compose\n    mathematical equations in $\\LaTeX$. If you're looking for some advanced tips, consider looking through <a\n            href=\"https://en.wikibooks.org/wiki/LaTeX/Mathematics\" target=\"_blank\">this page</a>. What I will do is give\n    you several basic tips which you can find below.\n</p>\n\n<p>First of all, tell your editor to use the <code>amsmath</code> package by inserting <code class=\"language-latex\">\\usepackage{amsmath}</code>\n    in the beginning of the document. Now you can insert inline expressions using <code>\\( ... \\)</code> and block\n    expressions using <code>\\[ ... \\]</code>, as seen in the example. As I said, there is just too much different tags\n    to cover so I suggest you read the link in the above paragraph to find out more.\n</p>\n\n```language-latex\n\\documentclass{article}\n\\usepackage{amsmath}\n\\begin{document}\n\nSome text containing an inline \\( \\forall x \\in X, \\exists y \\leq \\epsilon \\) expression.\n\n\\[ \\sqrt[n]{1+x+x^2+x^3+\\ldots}\\quad or \\quad\\int_0^\\infty \\mathrm{e}^{-x}\\,\\mathrm{d}x \\]\n\n\\end{document}\n```\n\n![Mathematical expressions in LaTeX](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_expr-1472395478016.png)\n\n<h1>Code and pseudocode</h1>\n\n<p>While this is something you're very unlikely to use (unless you study computer science) I feel the need to elaborate\n    a bit more on this topic, because I study computer science. First of all, I must say that including code and/or\n    pseudocode in your documents is a real pain in the ass and so far I wasn't able to do it in a way I'd like it.\n</p>\n\n<p>I won't include any examples here to avoid confusing you even further, but I would suggest you start your search <a\n        href=\"http://tex.stackexchange.com/questions/1375/what-is-a-good-package-for-displaying-algorithms\"\n        target=\"_blank\">here for pseudocode</a> and <a href=\"https://en.wikibooks.org/wiki/LaTeX/Source_Code_Listings\"\n                                                       target=\"_blank\">here for actual code</a>.\n</p>\n\n<h1>Conclusion</h1>\n\n<p>Unfortunately this article only focuses on the very core principles behind $\\LaTeX$ and I wasn't able to cover such\n    major topics as bibliography or figures, but it must be mentioned that the very purpose of this guide was to give\n    you a gentle introduction as opposed to being a complete $\\LaTeX$ reference. If you have any suggestions or\n    complaints feel free to comment below.\n</p>","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>During my first year as a computer scientist at UCL I found myself using $\\LaTeX$ quite a bit, and I have to be honest here - for someone with absolutely no prior knowledge in that area it wasn't an easy road and the learning curve was quite steep. Naturally, after some practice you begin to understand everything better but in case of $\\LaTeX$, you'll be confused as hell reading through the first couple of tutorials (and probably for several more tutorials after that). The aim of this guide is to help you understand what it actually is and where is the best place to start learning it.</p>\n\n<h1 id=\"introduction\">Introduction</h1>\n\n<p>I personally usually skip the introduction part and jump straight to the interesting stuff but doing so in this case would completely defeat the purpose of reading this guide. That said, keep in mind this guide was meant to be super basic so don't be surprised if you see stuff you already know.</p>\n\n<h2 id=\"sowhatthehellisdlatexd\">So what the hell is $\\LaTeX$?</h2>\n\n<p>$\\LaTeX$, pronounced lah-tekh, lah-tek or lay-tek, is a document preparation system. The core idea to understand here is that in $\\LaTeX$ editors you don't get fancy formatted text as you type, but instead, you type in plain text first and only after compilation do you get the formatted result. The best part is that you can use special markup to customise the formatting and the overall look and feel of your document however you please. For example, if you were to type then compile <code class=\"language-latex\">\\sum_{i=1}^{n} \\frac{2i + 5}{2^{i}}</code> you would get something like this: \n$\\sum_{i=1}^{n} \\frac{2i + 5}{2^{i}}$. Amazing, isn't it?</p>\n\n<h2 id=\"whywouldieverwanttouseit\">Why would I ever want to use it?</h2>\n\n<p>$\\LaTeX$ is arguably the best tool out there when it comes to producing any kind of scientific documentation and many other things, such as journal articles or books. Personally, I love it for how well-structured the final document is and how consistent markup can ensure the professional and extremely neat look of your documents. Moreover, I like how easy it is to load additional packages, such as those for pseudocode formatting or simple UML diagrams. As a quick example, consider this piece of coursework I had to write not so long ago:</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_example-1472389145110.png\" alt=\"COMP104P Algorithm Complexity Coursework\" /></p>\n\n<p>I won't lie, the markup is much more complicated than that in your average word processor, but this complexity really pays off later when you get a beautifully formatted compiled result.</p>\n\n<h1 id=\"howdoesitwork\">How does it work?</h1>\n\n<p>As I said above, $\\LaTeX$ markup has to be compiled before you can see the pretty formatted result. Which means, you need some kind of software that would do all of the compiling for you. This is where I can't really give you much advice because I've only used such software on Windows up until now, so I'd suggest you do a quick Google search. Out of the things I've tried so far I would recommend <a href=\"https://www.overleaf.com/\">Overleaf</a>, an online collaborative $\\LaTeX$ editor with real time previews, as well as <a href=\"http://www.texstudio.org/\">TeXstudio</a> for Windows for pretty much the same reason, minus the collaborative writing feature.</p>\n\n<p>The usual \"development\" pipeline with $\\LaTeX$ is pretty straight-forward: You type up your document, format it using the appropriate markup, compile it, check out the result, fix any formatting issues and compile it again. I personally prefer compiling a bit more often than that to admire the progress I've made, but I guess that excitement will fade over time. Either way, the most efficient technique of writing is not the main focus of this guide.</p>\n\n<h1 id=\"yourfirstdocument\">Your first document</h1>\n\n<p>From here onwards I will assume you have installed a decent editor and you already know how to compile the document in the editor of your choice. Well, let's begin with a super simple $\\LaTeX$ document. If you already have some other markup in your editor, remove it. Otherwise, try typing in the code you see below and then compiling. If nothing went wrong in the process, you should get the output similar to the one on the screenshot.</p>\n\n<pre><code class=\"language-latex\">\\documentclass{article}\n\\begin{document}\n\n\\section{A Section}\nSome dummy text for a paragraph.\n\n\\end{document}\n</code></pre>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_first_document_1-1472391920247.png\" alt=\"Your first LaTeX document\" /></p>\n\n<h2 id=\"breakdown\">Breakdown</h2>\n\n<p>The first line, <code class=\"language-latex\">\\documentclass{...}</code> is one of the most important parts of your document. It tells your editor what kind of document you are writing and allows you to specify various options, such as the font size or whether you want a title page to be present or not. It is recommended to insert this tag in the very beginning of your document, and the format is <code class=\"language-latex\">\\documentclass[options]{class}</code> (note that square brackets denote optional parameters while curly brackets are compulsory). For the sake of this guide I'm going to stick to a simple article class, but if you'd want to you could customise the document class heavily and end up with something like <code class=\"language-latex\">\\documentclass[twoside, openright, 11pt]{report}</code> (read <a href=\"http://texblog.org/2013/02/13/latex-documentclass-options-illustrated/\">this</a> for more information).</p>\n\n<p>Lines 2 and 7, containing <code class=\"language-latex\">\\begin{document}</code> and <code class=\"language-latex\">\\end{document}</code>  \n    respectively, define the boundaries of your document. All of the content you want to be present in the compiled\n    result goes between these 2 tags. In our case we only have one section title and a single sentence. Note how plain\n    text doesn't require any formatting, while something not as ordinary, say, heading, needs to be wrapped in a special\n    tag.\n</p>\n\n<h1>Basic content formatting</h1>\n\n<p>The formatting options available to you differ depending on the type of document class you've chosen so make sure to  \n    look up additional formatting tips for the document you are writing. In the examples below I will omit some tags\n    necessary to compile the document (described above) so don't forget to add them before compiling.\n</p>\n\n<h2>Chapters, sections and subsections</h2>\n\n<p>To present your document in a neat, well-structured way you will definitely be using a lot of sections and  \n    subsections. Consider the example below.\n</p>\n\n<pre><code class=\"language-latex\">\\section{Section}\nPellentesque laoreet, ex ut dapibus volutpat, leo nisl sagittis ex, non hendrerit.\n\n\\subsection{Subsection}\nMorbi vitae ipsum eu leo porta ultrices sed nec libero.\n\n\\subsubsection{Subsubsection}\nAliquam pellentesque fermentum felis id luctus.  \n</code></pre>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_sections-1472395360070.png\" alt=\"LaTeX sections\" /></p>\n\n<p>Note how $\\LaTeX$ automatically enumerates the section headings for you. You can insert any amount of sections,  \n    subsections or subsubsections wherever you want and during compilation time your editor will automatically resolve\n    any changes in the structure of the document. An amazing outcome of using sections in document is that you can\n    easily generate a table of contents by simply inserting the <code class=\"language-latex\">\\tableofcontents</code> tag\n    anywhere in your document:\n</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_toc-1472395377437.png\" alt=\"Table of contents\" /></p>\n\n<h2>Enumeration, bullet points and lists</h2>\n\n<p>Making lists is pretty straightforward. You have to use the familiar <code class=\"language-latex\">\\begin{...}</code>  \n    and <code class=\"language-latex\">\\end{...}</code> and place some <code class=\"language-latex\">\\item</code> elements\n    in between. Replace <code>...</code> with the list type, which can either be <code>enumerate</code>,\n    <code>itemize</code> or <code>description</code>.\n</p>\n\n<pre><code class=\"language-latex\">\\section{Enumerated list}\n\n\\begin{enumerate}\n\\item Item 1\n\\item Item 2\n\\end{enumerate}\n\n\\section{Bullet point list}\n\n\\begin{itemize}\n\\item Item 1\n\\item Item 2\n\\end{itemize}\n\n\\section{Descriptive list}\n\n\\begin{description}\n\\item [Item 1] Description 1\n\\item [Item 2] Description 2\n\\end{description}\n</code></pre>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_enum-1472395399518.png\" alt=\"Enumerations\" /></p>\n\n<p>Nesting lists is as easy as placing on list inside another, as shown below. Note that the indentation is there purely  \n    for decorative purposes and is not actually required for your editor to render the list correctly.\n</p>\n\n<pre><code class=\"language-latex\">\\begin{enumerate}\n    \\item Item 1\n    \\item Item 2\n    \\begin{itemize}\n        \\item Item 1\n        \\item Item 2\n        \\begin{enumerate}\n            \\item Item 1\n            \\item Item 2\n        \\end{enumerate}\n    \\end{itemize}\n\\end{enumerate}\n</code></pre>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_nested-1472395418425.png\" alt=\"Nested lists\" /></p>\n\n<h2>Page- and line-breaks</h2>\n\n<p>So, line-breaks. Line-breaks are pretty self-explanatory, you insert them when you want to explicitly your editor you  \n    want to jump to a new line. You can use <code class=\"language-latex\">\\\\</code> or <code class=\"language-latex\">\\newline</code>\n    which have the same effect. Note how in the example below, there is no explicit line break between the 2 paragraphs,\n    while there are two between paragraphs 2 and 3 and one between 3 and 4. I omitted the actual paragraph text to make\n    the example clearer.\n</p>\n\n<pre><code class=\"language-latex\">Paragraph 1 text . . .\n\nParagraph 2 text . . .  \n\\\\\n\\\\\nParagraph 3 text . . .  \n\\\\\nParagraph 4 text . . .  \n</code></pre>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_line_breaks-1472395504345.png\" alt=\"LaTeX linebreaks\" /></p>\n\n<p>Page-breaks push all of the content below them to a new page. Simply insert <code  \n        class=\"language-latex\">\\pagebreak</code> wherever you need it and you will achieve the effect similar to the one\n    shown below. There I inserted a <code class=\"language-latex\">\\pagebreak</code> right before the second section.\n</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_page_break-1472395508874.png\" alt=\"LaTeX pagebreaks\" /></p>\n\n<h1>Labels and references</h1>\n\n<p>Referencing various parts of your document becomes super easy with $\\LaTeX$. The basic concept is that if you want to  \n    reference something, you label it using the <code class=\"language-latex\">\\label{label-name}</code> tag, and then\n    reference it elsewhere using <code class=\"language-latex\">\\ref{label-name}</code>. Additionally, you can reference\n    the number of the page the label is on using <code class=\"language-latex\">\\pageref{label-name}</code>, as shown in\n    the example below.\n</p>\n\n<pre><code class=\"language-latex\">\\section{A Section}\nFor more information, refer to section \\ref{subsection-2} on page \\pageref{subsection-2}.\n\n\\section{Another Section}\n\\subsection{A subsection}\n\\subsection{Another subsection}\\label{subsection-2}\n</code></pre>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_ref-1472395452426.png\" alt=\"References\" /></p>\n\n<h1>Packages and comments</h1>\n\n<p>First of all, you can add text that will not be compiled by your editor using the <code>%</code> symbol. Simply  \n    insert it in the beginning of the line you want the editor to ignore and add whatever comments you want to the text.\n    Now, moving on to packages - $\\LaTeX$ relies heavily on additional packages which you can use if you need some\n    additional functionality, such as some weird mathematical symbols or pseudocode highlighting, which makes $\\LaTeX$\n    absolutely amazing. To load a package during compilation, you have to insert <code class=\"language-latex\">\\usepackage{package-name}[optional-settings]</code>\n    right after the <code>\\documentclass{...}</code> tag. Check out the example below for both comment and package\n    usage.\n</p>\n\n<pre><code class=\"language-latex\">\\documentclass{article}\n\n% Package for coloured text\n\\usepackage{color}\n\n% Package for inserting graphics\n\\usepackage{graphicx}\n\n\\begin{document}\n\n% Our content goes here\n\n\\end{document}\n</code></pre>\n\n<h1>Mathematical expressions</h1>\n\n<p>This is a huge topic and there is just too much to mention for this guide to give you a good idea of how to compose  \n    mathematical equations in $\\LaTeX$. If you're looking for some advanced tips, consider looking through <a\n            href=\"https://en.wikibooks.org/wiki/LaTeX/Mathematics\" target=\"_blank\">this page</a>. What I will do is give\n    you several basic tips which you can find below.\n</p>\n\n<p>First of all, tell your editor to use the <code>amsmath</code> package by inserting <code class=\"language-latex\">\\usepackage{amsmath}</code>  \n    in the beginning of the document. Now you can insert inline expressions using <code>\\( ... \\)</code> and block\n    expressions using <code>\\[ ... \\]</code>, as seen in the example. As I said, there is just too much different tags\n    to cover so I suggest you read the link in the above paragraph to find out more.\n</p>\n\n<pre><code class=\"language-latex\">\\documentclass{article}\n\\usepackage{amsmath}\n\\begin{document}\n\nSome text containing an inline \\( \\forall x \\in X, \\exists y \\leq \\epsilon \\) expression.\n\n\\[ \\sqrt[n]{1+x+x^2+x^3+\\ldots}\\quad or \\quad\\int_0^\\infty \\mathrm{e}^{-x}\\,\\mathrm{d}x \\]\n\n\\end{document}\n</code></pre>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_expr-1472395478016.png\" alt=\"Mathematical expressions in LaTeX\" /></p>\n\n<h1>Code and pseudocode</h1>\n\n<p>While this is something you're very unlikely to use (unless you study computer science) I feel the need to elaborate  \n    a bit more on this topic, because I study computer science. First of all, I must say that including code and/or\n    pseudocode in your documents is a real pain in the ass and so far I wasn't able to do it in a way I'd like it.\n</p>\n\n<p>I won't include any examples here to avoid confusing you even further, but I would suggest you start your search <a  \n        href=\"http://tex.stackexchange.com/questions/1375/what-is-a-good-package-for-displaying-algorithms\"\n        target=\"_blank\">here for pseudocode</a> and <a href=\"https://en.wikibooks.org/wiki/LaTeX/Source_Code_Listings\"\n                                                       target=\"_blank\">here for actual code</a>.\n</p>\n\n<h1>Conclusion</h1>\n\n<p>Unfortunately this article only focuses on the very core principles behind $\\LaTeX$ and I wasn't able to cover such  \n    major topics as bibliography or figures, but it must be mentioned that the very purpose of this guide was to give\n    you a gentle introduction as opposed to being a complete $\\LaTeX$ reference. If you have any suggestions or\n    complaints feel free to comment below.\n</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-28 03:38:46","created_by":1,"updated_at":"2016-08-30 15:43:23","updated_by":1,"published_at":"2016-04-30 12:47:00","published_by":1,"amp":null},{"id":42,"uuid":"5ea6ad60-6799-48a3-a334-01fef648b739","title":"Understanding two-way data binding in JS","slug":"understanding-two-way-data-binding-in-js","markdown":"# Abstract\n\nIn the recent years, two-way data binding has become a very popular technique among all sorts of JavaScript frameworks and other tools, and I felt like an article about the basic concepts behind it might be useful for someone who wishes to understand how exactly two-way data binding works. In this article, I'll try to cover as much of it as possible without going too deep into the mechanics of JavaScript.\n\n# What is two-way data binding?\n\nFirst of all, it is important to point out what exactly two-way data binding is before we can discuss how it works. As an example, let's consider [Model-View-Controller (MVC) design pattern](https://en.wikipedia.org/wiki/Model-view-controller). In MVC, so-called Model component represents the Model of the data in the application, while the View component determines how the data is presented to the user. A simple analogy would be to think of the Model as a JavaScript object and the View as an HTML page with some input forms. Take a look at the animation below.\n\n<video loop=\"\" autoplay=\"\">\n    <source src=\"https://s3.eu-central-1.amazonaws.com/foxypanda-ghost/pages/two-way-data-binding.webm\" type=\"video/webm\">\n    Your browser does not support the video tag.\n</video>\n\nAs you can see, the JavaScript object gets updated in real time as the user changes the contents of the input field. Since this is **two-way** data binding, the opposite is also true: If the application was to update the JS object the changes would appear in the input field straight away.\n\n# JavaScript implementation\n\nFirst of all, let's make a simple HTML page which we'll use to test any JS code we'll write. The code for our page can be found below and it has 3 noteworthy elements:\n\n1. `#input` field: The input field we'll use to type in new values for the JS variable. As per the concept of two-way data binding, the changes made here will affect the JS variable and vice versa.\n2. `#button` button: On click, this button will change the value of the JS variable to `Hello`. This change should also affect the `#input` and the `#value`.\n3. `#value` field: The value of the JS variable will appear here in plain text. All of the changes made to the variable will reflect in this field in real time.\n\n```language-markup\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Two-way Data Binding</title>\n</head>\n<body>\n    <input id=\"input\" type=\"text\">\n    <button id=\"button\">Set value to \"Hello\"</button>\n    <span>Value: <strong id=\"value\"></strong></span>\n\n    <script>\n    /*\n     * Our JS will go here\n     */\n    </script>\n</body>\n</html>\n```\n\n## View to Model binding\n\nLet's write some JS! We'll start with the easy part: tracking changes made to the `#input` field. If you have some experience with web design you probably already know that we're gonna use [event listeners](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener). The specific event we'll make use of is the [`input` event](https://developer.mozilla.org/en-US/docs/Web/Events/input). When used on an HTML `input` tag with `type` attribute set to `text`, it's fired when the value of the input is changed. It's significantly different from the `keyup` event, since `keyup` is fired whenever **any** key is released, even if you simply spam the shift key without actually changing the contents of the input field.\n\nThe code below does the trick in 3 steps:\n\n1. It initialises the object that will store the value of our field.\n2. It creates references to the 3 main elements on the page: the input field, the button and the text field that holds the text value of our object.\n3. It sets up an event listener that updates the text value of our object and then logs the new value to the console.\n\n```language-javascript\n// 1. The object we'll be changing\nvar data = {\n  variable: ''\n};\n\n// 2. References to 3 elements listed above\nvar inputField = document.getElementById('input');\nvar button = document.getElementById('input');\nvar valueField = document.getElementById('value');\n\n// 3. Event listener setup\ninputField.addEventListener('input', function() {\n    // Update the object\n    data.variable = inputField.value;\n\n    // Log the new value to console\n    console.log(object.variable);\n});\n```\n\nYou can see it in action in the demo below. Make sure to open the developer console (usually accessible using `F12` key) and type something into the field to confirm that the code works as intended. When you're done, move on to the next section where we'll discuss the implementation of the reverse mechanism.\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"rLXvgX\" data-default-tab=\"js,result\" data-user=\"TimboKZ\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/TimboKZ/pen/rLXvgX/\">Two-way data binding in JS</a> by Tim K (<a href=\"http://codepen.io/TimboKZ\">@TimboKZ</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n## Model to View binding\n\nThis part is a bit trickier than what we've done so far - now we somehow have to \"spy\" on the object holding our data. Then, whenever said object undergoes any change we have to update the input field with the most recent info.\n\n### The `watch()` method\n\nTurns out [Gecko](https://developer.mozilla.org/docs/Mozilla/Gecko), the engine behind Firefox has a [very useful `watch()` method](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/watch) defined on all JS objects, which does exactly what we want: It tracks all changes made to a property of some object and notifies us about them.\n\nSince this method only exists in Gecko, to use it in browsers you'd have to implement a so-called [polyfill](https://en.wikipedia.org/wiki/Polyfill) for the `watch()` method, which simply means defining a method that would mirror its functionality. Luckily, this has been done before and [this snippet](https://gist.github.com/eligrey/384583) by a fellow named Eli Grey seems to do the trick.\n\nTo keep this article short, I will only make use of a small part of the polyfill linked above that is responsible for doing exactly what we're trying to achieve, that is, tracking changes on the properties of the object holding our data. This will make it much easier to understand and even if you want to study the whole thing, understanding this small part first will help you a lot. Keep in mind, the code below is not identical to that in the snippet since I have removed some parts and rewrote the others to make it less ambiguous.\n\n### `defineProperty()` method\n\nAs you've probably noticed if you've taken a look at the snippet linked above, its author relied heavily on [the `defineProperty()` method](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty). It is vital to understand why it was used and how it works before we can proceed. I'll briefly talk about that below but I suggest you check the MDN link in this paragraph for a more in-depth description.\n\nAs the name implies, `definePropery()` is a very fancy way of defining a property on a JS object. Consider the example below where we define a method on some object.\n\n```language-javascript\nvar cat1 = {};\ncat1.meow = function() {\n    console.log('Meow!');\n}\ncat1.meow(); // Output: Meow!\n\n// ... is equivalent to ...\n\nvar cat2 = {};\nObject.defineProperty(cat2, 'meow', {\n    configurable: false,\n    enumerable: false,\n    writable: false,\n    value: function() {\n        console.log('Meow!');\n    }\n});\ncat2.meow(); // Output: Meow!\n\n```\n\nAs seen in the above example, `defineProperty()` gives much more control over how you define a property as opposed to doing it using the assignment (`=`) operator. Another powerful feature it gives us is configuring the getter and setter functions for a property explicitly. It might sound confusing but the example below should make it less ambiguous.\n\n```language-javascript\n// Simple object property\nvar person1 = {\n    height: 120\n};\nperson1.height; // Returns 120\nperson1.height = 100; // person1.height is now 100\n\n\n// ... as opposed to ...\n\n\n// Using defineProperty() `get` and `set`\nvar person2 = {};\nvar height2 = 100;\nObject.defineProperty(person2, 'height', {\n    configurable: false,\n    enumerable: false,\n    get: function() {\n        // Multiply value by 2\n        // before returning\n        return height2 * 2;\n    },\n    set: function(value) {\n        // Divide the supplied value\n        // by 4 before assignment\n        height2 = value / 4;\n    }\n});\n\nperson2.height; // Returns 200\n// Think of the line above as person2.height.get()\n\nperson2.height = 100; // height2 is now 25\n// Think of the line above as person2.height.set(100)\n\nperson2.height; // Returns 50\n```\n\nIt's a lengthy piece of code but it really shows how powerful `defineProperty()`  is. Notice how for `person1.height` JavaScript engine simply returns and updates the value as we tell it to. At the same time, for `person2.height`, we have setup all sorts of manipulations that are performed on the value before it is actually returned or is updated. Now consider the fact that the methods `get` and `set` can contain any logic we want. Can you see how we can use this to our advantage?\n\n## Adding Model to View binding to our page\n\nNow, we're gonna connect all of the small pieces into something greater. Let's start by taking our code from the \"View to Model binding\" section and make several modifications to it: \n\n1. Define a function called `watch()`, That takes 3 arguments: An object, name of  the property that exists on said object and a callback, that will be called every time the property changes.\n2. Use the above function on the property `variable` from the `object`. The callback we'll use will update our `#input` and `#value` with the most recent value of our `variable`.\n3. Setup the `click` event on our `#button` to change the value of the `variable` to `Hello`.\n\nWell, shall we start? Read through the code below and locate the changes described above. I added some comments to the new additions.\n\n```language-javascript\n// Definitions from the first version of the code\nvar data = {\n  variable: ''\n};\nvar inputField = document.getElementById('input');\nvar button = document.getElementById('button');\nvar valueField = document.getElementById('value');\n\n// 1. The watch() function described above\nvar watch = function(object, property, callback) {\n  // Store the initial value for future use\n  var value = object[property];\n  \n  // Remove the original property since\n  // now we want to \"spy\" on it\n  delete object[property];\n  \n  // Define the property again,\n  // now using `get` and `set`\n  Object.defineProperty(object, property, {\n    configurable: false,\n    enumerable: false,\n    get: function() {\n      // Simply return the value,\n      // nothing special here\n      return value;\n    },\n    set: function(newValue) {\n      // Update the value\n      value = newValue;\n      // Call the callback with\n      // the new value\n      callback(newValue);\n    }\n  });\n};\n\n// 2. Watch our `data` object for changes using our\n// newly defined `watch()` function\nwatch(data, 'variable', function(newValue) {\n  // Update the input field value\n  inputField.value = newValue;\n  \n  // Update the text field\n  valueField.textContent = newValue;\n});\n\n// 3. Setup the `click` event for the button\nbutton.addEventListener('click', function() {\n  // Simply set the value to `Hello`\n  data.variable = 'Hello';\n});\n\n// Adding View to Model binding. This should come\n// after our `watch()` function because `set` would\n// not be available before that.\ninputField.addEventListener('input', function() {\n  data.variable = inputField.value;\n});\n```\n\n## The final product\n\nBelow you can find the demo of the final product. Although it took quite a while to get here, the end result seems to be working exactly as we expected.\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"mENjXd\" data-default-tab=\"js,result\" data-user=\"TimboKZ\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/TimboKZ/pen/mENjXd/\">Two-way data binding in JS</a> by Tim K (<a href=\"http://codepen.io/TimboKZ\">@TimboKZ</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n# Conclusion\n\nWe've gone through quite a lot things in this article and I do realise that the amount of code to comprehend is quite big especially for someone with little prior JavaScript experience, but I hope this article help you understand, even remotely, how two-way data binding works. If you find any mistakes in my code or explanations, please feel free to comment below.","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>In the recent years, two-way data binding has become a very popular technique among all sorts of JavaScript frameworks and other tools, and I felt like an article about the basic concepts behind it might be useful for someone who wishes to understand how exactly two-way data binding works. In this article, I'll try to cover as much of it as possible without going too deep into the mechanics of JavaScript.</p>\n\n<h1 id=\"whatistwowaydatabinding\">What is two-way data binding?</h1>\n\n<p>First of all, it is important to point out what exactly two-way data binding is before we can discuss how it works. As an example, let's consider <a href=\"https://en.wikipedia.org/wiki/Model-view-controller\">Model-View-Controller (MVC) design pattern</a>. In MVC, so-called Model component represents the Model of the data in the application, while the View component determines how the data is presented to the user. A simple analogy would be to think of the Model as a JavaScript object and the View as an HTML page with some input forms. Take a look at the animation below.</p>\n\n<video loop=\"\" autoplay=\"\">  \n    <source src=\"https://s3.eu-central-1.amazonaws.com/foxypanda-ghost/pages/two-way-data-binding.webm\" type=\"video/webm\">\n    Your browser does not support the video tag.\n</video>\n\n<p>As you can see, the JavaScript object gets updated in real time as the user changes the contents of the input field. Since this is <strong>two-way</strong> data binding, the opposite is also true: If the application was to update the JS object the changes would appear in the input field straight away.</p>\n\n<h1 id=\"javascriptimplementation\">JavaScript implementation</h1>\n\n<p>First of all, let's make a simple HTML page which we'll use to test any JS code we'll write. The code for our page can be found below and it has 3 noteworthy elements:</p>\n\n<ol>\n<li><code>#input</code> field: The input field we'll use to type in new values for the JS variable. As per the concept of two-way data binding, the changes made here will affect the JS variable and vice versa.  </li>\n<li><code>#button</code> button: On click, this button will change the value of the JS variable to <code>Hello</code>. This change should also affect the <code>#input</code> and the <code>#value</code>.  </li>\n<li><code>#value</code> field: The value of the JS variable will appear here in plain text. All of the changes made to the variable will reflect in this field in real time.</li>\n</ol>\n\n<pre><code class=\"language-markup\">&lt;!DOCTYPE html&gt;  \n&lt;html&gt;  \n&lt;head&gt;  \n    &lt;title&gt;Two-way Data Binding&lt;/title&gt;\n&lt;/head&gt;  \n&lt;body&gt;  \n    &lt;input id=\"input\" type=\"text\"&gt;\n    &lt;button id=\"button\"&gt;Set value to \"Hello\"&lt;/button&gt;\n    &lt;span&gt;Value: &lt;strong id=\"value\"&gt;&lt;/strong&gt;&lt;/span&gt;\n\n    &lt;script&gt;\n    /*\n     * Our JS will go here\n     */\n    &lt;/script&gt;\n&lt;/body&gt;  \n&lt;/html&gt;  \n</code></pre>\n\n<h2 id=\"viewtomodelbinding\">View to Model binding</h2>\n\n<p>Let's write some JS! We'll start with the easy part: tracking changes made to the <code>#input</code> field. If you have some experience with web design you probably already know that we're gonna use <a href=\"https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener\">event listeners</a>. The specific event we'll make use of is the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/input\"><code>input</code> event</a>. When used on an HTML <code>input</code> tag with <code>type</code> attribute set to <code>text</code>, it's fired when the value of the input is changed. It's significantly different from the <code>keyup</code> event, since <code>keyup</code> is fired whenever <strong>any</strong> key is released, even if you simply spam the shift key without actually changing the contents of the input field.</p>\n\n<p>The code below does the trick in 3 steps:</p>\n\n<ol>\n<li>It initialises the object that will store the value of our field.  </li>\n<li>It creates references to the 3 main elements on the page: the input field, the button and the text field that holds the text value of our object.  </li>\n<li>It sets up an event listener that updates the text value of our object and then logs the new value to the console.</li>\n</ol>\n\n<pre><code class=\"language-javascript\">// 1. The object we'll be changing\nvar data = {  \n  variable: ''\n};\n\n// 2. References to 3 elements listed above\nvar inputField = document.getElementById('input');  \nvar button = document.getElementById('input');  \nvar valueField = document.getElementById('value');\n\n// 3. Event listener setup\ninputField.addEventListener('input', function() {  \n    // Update the object\n    data.variable = inputField.value;\n\n    // Log the new value to console\n    console.log(object.variable);\n});\n</code></pre>\n\n<p>You can see it in action in the demo below. Make sure to open the developer console (usually accessible using <code>F12</code> key) and type something into the field to confirm that the code works as intended. When you're done, move on to the next section where we'll discuss the implementation of the reverse mechanism.</p>\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"rLXvgX\" data-default-tab=\"js,result\" data-user=\"TimboKZ\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/TimboKZ/pen/rLXvgX/\">Two-way data binding in JS</a> by Tim K (<a href=\"http://codepen.io/TimboKZ\">@TimboKZ</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>  \n\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"modeltoviewbinding\">Model to View binding</h2>\n\n<p>This part is a bit trickier than what we've done so far - now we somehow have to \"spy\" on the object holding our data. Then, whenever said object undergoes any change we have to update the input field with the most recent info.</p>\n\n<h3 id=\"thewatchmethod\">The <code>watch()</code> method</h3>\n\n<p>Turns out <a href=\"https://developer.mozilla.org/docs/Mozilla/Gecko\">Gecko</a>, the engine behind Firefox has a <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/watch\">very useful <code>watch()</code> method</a> defined on all JS objects, which does exactly what we want: It tracks all changes made to a property of some object and notifies us about them.</p>\n\n<p>Since this method only exists in Gecko, to use it in browsers you'd have to implement a so-called <a href=\"https://en.wikipedia.org/wiki/Polyfill\">polyfill</a> for the <code>watch()</code> method, which simply means defining a method that would mirror its functionality. Luckily, this has been done before and <a href=\"https://gist.github.com/eligrey/384583\">this snippet</a> by a fellow named Eli Grey seems to do the trick.</p>\n\n<p>To keep this article short, I will only make use of a small part of the polyfill linked above that is responsible for doing exactly what we're trying to achieve, that is, tracking changes on the properties of the object holding our data. This will make it much easier to understand and even if you want to study the whole thing, understanding this small part first will help you a lot. Keep in mind, the code below is not identical to that in the snippet since I have removed some parts and rewrote the others to make it less ambiguous.</p>\n\n<h3 id=\"definepropertymethod\"><code>defineProperty()</code> method</h3>\n\n<p>As you've probably noticed if you've taken a look at the snippet linked above, its author relied heavily on <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">the <code>defineProperty()</code> method</a>. It is vital to understand why it was used and how it works before we can proceed. I'll briefly talk about that below but I suggest you check the MDN link in this paragraph for a more in-depth description.</p>\n\n<p>As the name implies, <code>definePropery()</code> is a very fancy way of defining a property on a JS object. Consider the example below where we define a method on some object.</p>\n\n<pre><code class=\"language-javascript\">var cat1 = {};  \ncat1.meow = function() {  \n    console.log('Meow!');\n}\ncat1.meow(); // Output: Meow!\n\n// ... is equivalent to ...\n\nvar cat2 = {};  \nObject.defineProperty(cat2, 'meow', {  \n    configurable: false,\n    enumerable: false,\n    writable: false,\n    value: function() {\n        console.log('Meow!');\n    }\n});\ncat2.meow(); // Output: Meow!\n</code></pre>\n\n<p>As seen in the above example, <code>defineProperty()</code> gives much more control over how you define a property as opposed to doing it using the assignment (<code>=</code>) operator. Another powerful feature it gives us is configuring the getter and setter functions for a property explicitly. It might sound confusing but the example below should make it less ambiguous.</p>\n\n<pre><code class=\"language-javascript\">// Simple object property\nvar person1 = {  \n    height: 120\n};\nperson1.height; // Returns 120  \nperson1.height = 100; // person1.height is now 100\n\n\n// ... as opposed to ...\n\n\n// Using defineProperty() `get` and `set`\nvar person2 = {};  \nvar height2 = 100;  \nObject.defineProperty(person2, 'height', {  \n    configurable: false,\n    enumerable: false,\n    get: function() {\n        // Multiply value by 2\n        // before returning\n        return height2 * 2;\n    },\n    set: function(value) {\n        // Divide the supplied value\n        // by 4 before assignment\n        height2 = value / 4;\n    }\n});\n\nperson2.height; // Returns 200  \n// Think of the line above as person2.height.get()\n\nperson2.height = 100; // height2 is now 25  \n// Think of the line above as person2.height.set(100)\n\nperson2.height; // Returns 50  \n</code></pre>\n\n<p>It's a lengthy piece of code but it really shows how powerful <code>defineProperty()</code>  is. Notice how for <code>person1.height</code> JavaScript engine simply returns and updates the value as we tell it to. At the same time, for <code>person2.height</code>, we have setup all sorts of manipulations that are performed on the value before it is actually returned or is updated. Now consider the fact that the methods <code>get</code> and <code>set</code> can contain any logic we want. Can you see how we can use this to our advantage?</p>\n\n<h2 id=\"addingmodeltoviewbindingtoourpage\">Adding Model to View binding to our page</h2>\n\n<p>Now, we're gonna connect all of the small pieces into something greater. Let's start by taking our code from the \"View to Model binding\" section and make several modifications to it: </p>\n\n<ol>\n<li>Define a function called <code>watch()</code>, That takes 3 arguments: An object, name of  the property that exists on said object and a callback, that will be called every time the property changes.  </li>\n<li>Use the above function on the property <code>variable</code> from the <code>object</code>. The callback we'll use will update our <code>#input</code> and <code>#value</code> with the most recent value of our <code>variable</code>.  </li>\n<li>Setup the <code>click</code> event on our <code>#button</code> to change the value of the <code>variable</code> to <code>Hello</code>.</li>\n</ol>\n\n<p>Well, shall we start? Read through the code below and locate the changes described above. I added some comments to the new additions.</p>\n\n<pre><code class=\"language-javascript\">// Definitions from the first version of the code\nvar data = {  \n  variable: ''\n};\nvar inputField = document.getElementById('input');  \nvar button = document.getElementById('button');  \nvar valueField = document.getElementById('value');\n\n// 1. The watch() function described above\nvar watch = function(object, property, callback) {  \n  // Store the initial value for future use\n  var value = object[property];\n\n  // Remove the original property since\n  // now we want to \"spy\" on it\n  delete object[property];\n\n  // Define the property again,\n  // now using `get` and `set`\n  Object.defineProperty(object, property, {\n    configurable: false,\n    enumerable: false,\n    get: function() {\n      // Simply return the value,\n      // nothing special here\n      return value;\n    },\n    set: function(newValue) {\n      // Update the value\n      value = newValue;\n      // Call the callback with\n      // the new value\n      callback(newValue);\n    }\n  });\n};\n\n// 2. Watch our `data` object for changes using our\n// newly defined `watch()` function\nwatch(data, 'variable', function(newValue) {  \n  // Update the input field value\n  inputField.value = newValue;\n\n  // Update the text field\n  valueField.textContent = newValue;\n});\n\n// 3. Setup the `click` event for the button\nbutton.addEventListener('click', function() {  \n  // Simply set the value to `Hello`\n  data.variable = 'Hello';\n});\n\n// Adding View to Model binding. This should come\n// after our `watch()` function because `set` would\n// not be available before that.\ninputField.addEventListener('input', function() {  \n  data.variable = inputField.value;\n});\n</code></pre>\n\n<h2 id=\"thefinalproduct\">The final product</h2>\n\n<p>Below you can find the demo of the final product. Although it took quite a while to get here, the end result seems to be working exactly as we expected.</p>\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"mENjXd\" data-default-tab=\"js,result\" data-user=\"TimboKZ\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/TimboKZ/pen/mENjXd/\">Two-way data binding in JS</a> by Tim K (<a href=\"http://codepen.io/TimboKZ\">@TimboKZ</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>  \n\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>We've gone through quite a lot things in this article and I do realise that the amount of code to comprehend is quite big especially for someone with little prior JavaScript experience, but I hope this article help you understand, even remotely, how two-way data binding works. If you find any mistakes in my code or explanations, please feel free to comment below.</p>","image":"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/two_way_data_binding-1472643783384.jpg","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-28 11:51:34","created_by":1,"updated_at":"2016-09-01 20:22:17","updated_by":1,"published_at":"2016-08-29 01:08:59","published_by":1,"amp":null},{"id":43,"uuid":"9bcfa4a1-2730-4947-8628-e265a2e24dd2","title":"About","slug":"about-2","markdown":"# Welcome to Foxy Panda ^_~\n\n> To get the important stuff out of the way: [Here's a copy of my CV](https://drive.google.com/open?id=0B0xy7FWLvrrsc1poczRESFAzMlU) if you'll need it for any reason.\n\nHello there, I'm Tim and this is my personal website. Here I post some of my projects and share my thoughts about various things, as well as write some guides and tutorials on topics I feel confident about. I try to stay away from fields where I only have limited knowledge so I would say most of the content on this website is scientifically accurate but you never know, so I kindly ask you to point out any mistakes I made in the comments.\n\nIn a desperate attempt to make this page a bit more informative I decided to include a couple of generic facts about me, which you can find below. Enjoy:\n\n* I originally come from Almaty, Kazakhstan\n* I study [MEng Computer Science](http://www.cs.ucl.ac.uk/degrees/meng_computer_science/) at [UCL](http://www.ucl.ac.uk/)\n* Surprisingly enough I code quite a bit, and most of my projects can be found on my [GitHub](https://github.com/TimboKZ)\n* I currently reside in London, United Kingdom\n* Last but not least, I love [TypeScript](https://www.typescriptlang.org/) and [Node](https://nodejs.org/) (among other things)\n\nIf you want to contact me, feel free to leave a comment on this page or, alternatively, drop me an email at `tim.kuzh (at) gmail.com`. Oh yes and I almost forgot, if you want to read more about the development of this blog check out [~this post here](https://foxypanda.me/foxy-panda-source/).","mobiledoc":null,"html":"<h1 id=\"welcometofoxypanda_t\">Welcome to Foxy Panda ^_~</h1>\n\n<blockquote>\n  <p>To get the important stuff out of the way: <a href=\"https://drive.google.com/open?id=0B0xy7FWLvrrsc1poczRESFAzMlU\">Here's a copy of my CV</a> if you'll need it for any reason.</p>\n</blockquote>\n\n<p>Hello there, I'm Tim and this is my personal website. Here I post some of my projects and share my thoughts about various things, as well as write some guides and tutorials on topics I feel confident about. I try to stay away from fields where I only have limited knowledge so I would say most of the content on this website is scientifically accurate but you never know, so I kindly ask you to point out any mistakes I made in the comments.</p>\n\n<p>In a desperate attempt to make this page a bit more informative I decided to include a couple of generic facts about me, which you can find below. Enjoy:</p>\n\n<ul>\n<li>I originally come from Almaty, Kazakhstan</li>\n<li>I study <a href=\"http://www.cs.ucl.ac.uk/degrees/meng_computer_science/\">MEng Computer Science</a> at <a href=\"http://www.ucl.ac.uk/\">UCL</a></li>\n<li>Surprisingly enough I code quite a bit, and most of my projects can be found on my <a href=\"https://github.com/TimboKZ\">GitHub</a></li>\n<li>I currently reside in London, United Kingdom</li>\n<li>Last but not least, I love <a href=\"https://www.typescriptlang.org/\">TypeScript</a> and <a href=\"https://nodejs.org/\">Node</a> (among other things)</li>\n</ul>\n\n<p>If you want to contact me, feel free to leave a comment on this page or, alternatively, drop me an email at <code>tim.kuzh (at) gmail.com</code>. Oh yes and I almost forgot, if you want to read more about the development of this blog check out <a href=\"https://foxypanda.me/foxy-panda-source/\">~this post here</a>.</p>","image":null,"featured":0,"page":1,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-16 22:14:20","created_by":1,"updated_at":"2016-11-19 19:14:12","updated_by":1,"published_at":"2016-08-16 22:22:07","published_by":1,"amp":null},{"id":44,"uuid":"1bf466fb-6dcd-4350-a8e2-3c15afaefee9","title":"Returning an array of JSON objects in PostgreSQL","slug":"returning-an-array-of-json-objects-in-postgresql","markdown":"# Abstract\n\nFor my internship with Microsoft and UCL Institute of Child Health I had to work with PostgreSQL. My back-end was running on Node.js, so naturally I was interested in getting JSON formatted data out of Postgres whenever possible. Alternative solution was to handle all the logic using JavaScript and make multiple SQL queries, but that would harm performance. \n\n>**Note:** Example below was tested with PostgreSQL 9.6, if you have a different version your experience might differ.\n\n# Example database\n\nImagine a database where you store some records. Each record has an ID, and there are several fields associated with this record. Each field has multiple options, and each option has its own ID, name and order. Essentially, there are two main tables in our database - the `fields` tables:\n\n```language-clike\n| record_id | field_id |\n|-----------|----------|\n| abc       | xyz      |\n| abc       | qwe      |\n```\n\nAnd the `options` table:\n\n```language-clike\n| field_id | option_id | name   | order |\n|----------|-----------|--------|-------|\n| xyz      | 123       | Age    | 1     |\n| xyz      | 456       | Height | 2     |\n```\n\nAs seen above, we have a single record `abc`, which has fields `xyz` and `qwe`. Field `xyz` has two options, `123` (Age) and `456` (Height) while `qwe` has no options at all. Option Age should appear before option Height due to the values in the `order` column.\n\n# Fetching an array of JSON objects\n\nFor the sake of this tutorial, let's assume we know the ID of the record (e.g. `abc`), and we want to fetch all fields associated with it. We also want to fetch all options for these fields in the same query, without having any duplicate data. Below you can see the query that does exactly what we want, and underneath it is an explanation of the signficant parts.\n\n```language-sql line-numbers\nSELECT\n  f.*,\n  CASE WHEN count(o) = 0 THEN ARRAY[]::json[] ELSE array_agg(o.option) END AS options\nFROM field f\n  LEFT OUTER JOIN\n  (\n    SELECT o1.field_id, json_build_object('id', o1.option_id, 'name', o1.name) as option\n    FROM options o1\n    ORDER BY o1.order\n  ) o\n    ON f.field_id = o.field_id\nWHERE f.record_id = 'abc'\nGROUP BY f.field_id\n```\n\n1. First, we have to create subquery which will convert the rows from our `options` table into their JSON representation. This happens on **lines 7-9**. We're using Postgres function `json_build_object` which allows you to build JSON objects using the pattern `json_build_object('key1', value1, 'key2', value2, ...)` and order everything using the `order` column.\n2. We perform a left outer join of the `fields` and `options` tables, as see on **line 5**. This will make sure all rows from the `fields` table end up in our final result, regardless of whether they have any options or not.\n3. As we don't want any duplicates in our data, we group everything by `field_id` on **line 13**.\n4. On **line 3**, we generate our array from the JSON objects we created in our subquery. `array_agg` function grabs all options that were grouped and places them into an array, essentially creating an array of JSON objects we were after. To avoid any issues, we use `CASE WHEN ... THEN ... ELSE ... END` construct to return an empty array (`ARRAY[]::json[]`) if there are no options. If we wouldn't do this, we could either get a NULL object instead of an empty array or some Postgres error.\n\nIf you run this query through some JavaScript Postgres framework like [pg-promise](https://github.com/vitaly-t/pg-promise) your output will be an object like the one shown below. Note how the `options` property on each row contains an array of JSON objects we specified.\n\n```language-json\n[\n  {\n    \"record_id\": \"abc\",\n    \"field_id\": \"xyz\",\n    \"options\": [\n      {\n        \"id\": \"123\",\n        \"name\": \"Age\"\n      },\n      {\n        \"id\": \"456\",\n        \"name\": \"Height\"\n      }\n    ]\n  },\n  {\n    \"record_id\": \"abc\",\n    \"field_id\": \"qwe\",\n    \"options\": []\n  }\n]\n```","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>For my internship with Microsoft and UCL Institute of Child Health I had to work with PostgreSQL. My back-end was running on Node.js, so naturally I was interested in getting JSON formatted data out of Postgres whenever possible. Alternative solution was to handle all the logic using JavaScript and make multiple SQL queries, but that would harm performance. </p>\n\n<blockquote>\n  <p><strong>Note:</strong> Example below was tested with PostgreSQL 9.6, if you have a different version your experience might differ.</p>\n</blockquote>\n\n<h1 id=\"exampledatabase\">Example database</h1>\n\n<p>Imagine a database where you store some records. Each record has an ID, and there are several fields associated with this record. Each field has multiple options, and each option has its own ID, name and order. Essentially, there are two main tables in our database - the <code>fields</code> tables:</p>\n\n<pre><code class=\"language-clike\">| record_id | field_id |\n|-----------|----------|\n| abc       | xyz      |\n| abc       | qwe      |\n</code></pre>\n\n<p>And the <code>options</code> table:</p>\n\n<pre><code class=\"language-clike\">| field_id | option_id | name   | order |\n|----------|-----------|--------|-------|\n| xyz      | 123       | Age    | 1     |\n| xyz      | 456       | Height | 2     |\n</code></pre>\n\n<p>As seen above, we have a single record <code>abc</code>, which has fields <code>xyz</code> and <code>qwe</code>. Field <code>xyz</code> has two options, <code>123</code> (Age) and <code>456</code> (Height) while <code>qwe</code> has no options at all. Option Age should appear before option Height due to the values in the <code>order</code> column.</p>\n\n<h1 id=\"fetchinganarrayofjsonobjects\">Fetching an array of JSON objects</h1>\n\n<p>For the sake of this tutorial, let's assume we know the ID of the record (e.g. <code>abc</code>), and we want to fetch all fields associated with it. We also want to fetch all options for these fields in the same query, without having any duplicate data. Below you can see the query that does exactly what we want, and underneath it is an explanation of the signficant parts.</p>\n\n<pre><code class=\"language-sql line-numbers\">SELECT  \n  f.*,\n  CASE WHEN count(o) = 0 THEN ARRAY[]::json[] ELSE array_agg(o.option) END AS options\nFROM field f  \n  LEFT OUTER JOIN\n  (\n    SELECT o1.field_id, json_build_object('id', o1.option_id, 'name', o1.name) as option\n    FROM options o1\n    ORDER BY o1.order\n  ) o\n    ON f.field_id = o.field_id\nWHERE f.record_id = 'abc'  \nGROUP BY f.field_id  \n</code></pre>\n\n<ol>\n<li>First, we have to create subquery which will convert the rows from our <code>options</code> table into their JSON representation. This happens on <strong>lines 7-9</strong>. We're using Postgres function <code>json_build_object</code> which allows you to build JSON objects using the pattern <code>json_build_object('key1', value1, 'key2', value2, ...)</code> and order everything using the <code>order</code> column.  </li>\n<li>We perform a left outer join of the <code>fields</code> and <code>options</code> tables, as see on <strong>line 5</strong>. This will make sure all rows from the <code>fields</code> table end up in our final result, regardless of whether they have any options or not.  </li>\n<li>As we don't want any duplicates in our data, we group everything by <code>field_id</code> on <strong>line 13</strong>.  </li>\n<li>On <strong>line 3</strong>, we generate our array from the JSON objects we created in our subquery. <code>array_agg</code> function grabs all options that were grouped and places them into an array, essentially creating an array of JSON objects we were after. To avoid any issues, we use <code>CASE WHEN ... THEN ... ELSE ... END</code> construct to return an empty array (<code>ARRAY[]::json[]</code>) if there are no options. If we wouldn't do this, we could either get a NULL object instead of an empty array or some Postgres error.</li>\n</ol>\n\n<p>If you run this query through some JavaScript Postgres framework like <a href=\"https://github.com/vitaly-t/pg-promise\">pg-promise</a> your output will be an object like the one shown below. Note how the <code>options</code> property on each row contains an array of JSON objects we specified.</p>\n\n<pre><code class=\"language-json\">[\n  {\n    \"record_id\": \"abc\",\n    \"field_id\": \"xyz\",\n    \"options\": [\n      {\n        \"id\": \"123\",\n        \"name\": \"Age\"\n      },\n      {\n        \"id\": \"456\",\n        \"name\": \"Height\"\n      }\n    ]\n  },\n  {\n    \"record_id\": \"abc\",\n    \"field_id\": \"qwe\",\n    \"options\": []\n  }\n]\n</code></pre>","image":"https://s3-eu-central-1.amazonaws.com/foxypanda-ghost/2017/07/postgres-node.jpg","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-07-24 16:40:17","created_by":1,"updated_at":"2017-07-24 17:46:35","updated_by":1,"published_at":"2017-07-24 17:45:41","published_by":1,"amp":null},{"id":45,"uuid":"10869cd6-7ebe-4584-b47f-b80831b4701e","title":"TCP client in a UWP Unity app on HoloLens","slug":"tcp-client-in-a-uwp-unity-app-on-hololens","markdown":"# Abstract\n\nIf you've ever had the pleasure of implementing a TCP client that would work in both the Unity editor (for development/debugging) and UWP on HoloLens (for production) you will know how painful the whole process is. Below you can find some info on how I tackled this problem. My code might not work for you as it's tailored for one specific purpose, nonetheless it might serve as a good starting point.\n\nA bit of context on this ([click here](#thecode) to jump straight to the code): I've been doing a lot of HoloLens development as a part of my internship with [UCL Surgical Robot Vision lab](http://www.surgicalvision.cs.ucl.ac.uk/). One of the pipelines I was developing involved processing IR tracking data from [OptiTrack V120:Trio](http://optitrack.com/products/v120-trio/) and sending rigid body positions/rotations to HoloLens, which is where the TCP client got involved. I'll post an article about the whole system some time in the future.\n\n>**Disclaimer:** This might not be the best solution, but *it works*. Before I came up with this I was googling for a while and could not find any useful info, so hopefully this article will at least point you in the right direction. If you want to suggest an improvement, use the comment section below.\n\n# Things to look out for\n\nUnfortunately there isn't just a single thing that makes the whole process a pain, there is a whole lot of them. I summarise the obstacles I encountered and how I overcame them in the list below.\n\n1. **Unity C# and UWP C# are different.** There might be better ways to put it but this sentence summarises it pretty well. If you implement a TCP client *the Unity way*, UWP/HoloLens will complain that namespace `System.Net.Sockets` does not exist. If you implement a TCP client *the UWP way*, Unity editor with complain about `Windows.Networking.Sockets` or something similar. Additionally, Unity uses some \"stone age\" C# version that doesn't support `async`/`await` keywords which makes it even more of a hassle.\n  * **Solution**: Wrap platform specific code in `#if UNITY_EDITOR` and `#endif` or its equivalent. As you probably figured out from the name, [this would tell the compiler](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives/preprocessor-if) to completely ignore the code between the two if that particular variable is not set. I was only deploying to UWP and Unity, so in my case undefined `UNITY_EDITOR` meant I'm on UWP. If you deploy to other platforms too, you might want to add other conditions too.\n  * **Alternative**: You could also compile platform specific DLLs and place them in the plugins folder in your assets.\n  * **Note on `async`/`await`**: These shouldn't cause you too much trouble as long as you don't write your cross-platform (i.e. code that is meant to work in both Unity and UWP without `#if`'s) using `await`. If you look at the `Connect()` in my code, you will see that I simply call `ConnectUWP()` as a normal function also it's technically `async` on UWP and yet the code compiles without any issues. It's important you understand that `async` functions get called just like any other functions, but the program doesn't wait for the function to return before proceeding.\n\n2. **UWP doesn't support threads (at the time of writing).** If normally you'd just use the `Thread` class, in UWP you have to use the `System.Threading.Tasks.Task` class to achieve the same functionality. To clarify, when implementing a TCP client in Unity you absolutely most definitely have to use a separate thread/task or your code will hang the whole app. `Task` isn't that bad but I found it to be very poorly documented, and most importantly its interface is incompatible with `Thread` so you will have to rewrite your code.\n  * **Solution:** Extract the code for creating and stopping threads into a separate function which will handle platform-specific thread creation. In my code, you can see thread/task creation in `RestartExchange()`, while deleting a thread can be seen in `StopExchange()`. Both of these use `#if ...` and `#endif` mentioned above.\n\n3. **Most `GameObject` manipulations in Unity can only be performed by the main thread.** I didn't have the time to find out why exactly that is but there is probably some resource-management reason, so we'll just have to deal with it. As your TCP client runs in a separate thread, whenever you try to make a change on some object Unity will call you out on not being the main thread. This happens in both the Unity editor and UWP, and I suspect everywhere else too.\n  * **Solution**: Instead of modifying the objects directly, use some shared variables to notify the main thread to make changes. In my code, you can see that the TCP client thread updates `lastPacket` string, which is then picked up by the main thread through the `Update()` method. This way, TCP client thread receives the information but it's the main thread who actually applies the changes to game objects.\n\n# The code\n\nHere's the code I used in my project. At the moment I provide it as-is, so it will not work out of the box. I might trim it to a more general solution in the future.\n\n```language-csharp\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text;\nusing System.Threading;\nusing UnityEngine;\n\n#if !UNITY_EDITOR\nusing System.Threading.Tasks;\n#endif\n\npublic class USTrackingTcpClient : MonoBehaviour\n{\n\n    public USTrackingManager TrackingManager;\n    public USStatusTextManager StatusTextManager;\n\n#if !UNITY_EDITOR\n    private bool _useUWP = true;\n    private Windows.Networking.Sockets.StreamSocket socket;\n    private Task exchangeTask;\n#endif\n\n#if UNITY_EDITOR\n    private bool _useUWP = false;\n    System.Net.Sockets.TcpClient client;\n    System.Net.Sockets.NetworkStream stream;\n    private Thread exchangeThread;\n#endif\n\n    private Byte[] bytes = new Byte[256];\n    private StreamWriter writer;\n    private StreamReader reader;\n\n    public void Connect(string host, string port)\n    {\n        if (_useUWP)\n        {\n            ConnectUWP(host, port);\n        }\n        else\n        {\n            ConnectUnity(host, port);\n        }\n    }\n\n\n\n#if UNITY_EDITOR\n    private void ConnectUWP(string host, string port)\n#else\n    private async void ConnectUWP(string host, string port)\n#endif\n    {\n#if UNITY_EDITOR\n        errorStatus = \"UWP TCP client used in Unity!\";\n#else\n        try\n        {\n            if (exchangeTask != null) StopExchange();\n        \n            socket = new Windows.Networking.Sockets.StreamSocket();\n            Windows.Networking.HostName serverHost = new Windows.Networking.HostName(host);\n            await socket.ConnectAsync(serverHost, port);\n        \n            Stream streamOut = socket.OutputStream.AsStreamForWrite();\n            writer = new StreamWriter(streamOut) { AutoFlush = true };\n        \n            Stream streamIn = socket.InputStream.AsStreamForRead();\n            reader = new StreamReader(streamIn);\n\n            RestartExchange();\n            successStatus = \"Connected!\";\n        }\n        catch (Exception e)\n        {\n            errorStatus = e.ToString();\n        }\n#endif\n    }\n\n    private void ConnectUnity(string host, string port)\n    {\n#if !UNITY_EDITOR\n        errorStatus = \"Unity TCP client used in UWP!\";\n#else\n        try\n        {\n            if (exchangeThread != null) StopExchange();\n\n            client = new System.Net.Sockets.TcpClient(host, Int32.Parse(port));\n            stream = client.GetStream();\n            reader = new StreamReader(stream);\n            writer = new StreamWriter(stream) { AutoFlush = true };\n\n            RestartExchange();\n            successStatus = \"Connected!\";\n        }\n        catch (Exception e)\n        {\n            errorStatus = e.ToString();\n        }\n#endif\n    }\n\n    private bool exchanging = false;\n    private bool exchangeStopRequested = false;\n    private string lastPacket = null;\n\n    private string errorStatus = null;\n    private string warningStatus = null;\n    private string successStatus = null;\n    private string unknownStatus = null;\n\n    public void RestartExchange()\n    {\n#if UNITY_EDITOR\n        if (exchangeThread != null) StopExchange();\n        exchangeStopRequested = false;\n        exchangeThread = new System.Threading.Thread(ExchangePackets);\n        exchangeThread.Start();\n#else\n        if (exchangeTask != null) StopExchange();\n        exchangeStopRequested = false;\n        exchangeTask = Task.Run(() => ExchangePackets());\n#endif\n    }\n\n    public void Update()\n    {\n        if(lastPacket != null)\n        {\n            ReportDataToTrackingManager(lastPacket);\n        }\n\n        if(errorStatus != null)\n        {\n            StatusTextManager.SetError(errorStatus);\n            errorStatus = null;\n        }\n        if (warningStatus != null)\n        {\n            StatusTextManager.SetWarning(warningStatus);\n            warningStatus = null;\n        }\n        if (successStatus != null)\n        {\n            StatusTextManager.SetSuccess(successStatus);\n            successStatus = null;\n        }\n        if (unknownStatus != null)\n        {\n            StatusTextManager.SetUnknown(unknownStatus);\n            unknownStatus = null;\n        }\n    }\n\n    public void ExchangePackets()\n    {\n        while (!exchangeStopRequested)\n        {\n            if (writer == null || reader == null) continue;\n            exchanging = true;\n\n            writer.Write(\"X\\n\");\n            Debug.Log(\"Sent data!\");\n            string received = null;\n\n#if UNITY_EDITOR\n            byte[] bytes = new byte[client.SendBufferSize];\n            int recv = 0;\n            while (true)\n            {\n                recv = stream.Read(bytes, 0, client.SendBufferSize);\n                received += Encoding.UTF8.GetString(bytes, 0, recv);\n                if (received.EndsWith(\"\\n\")) break;\n            }\n#else\n            received = reader.ReadLine();\n#endif\n\n            lastPacket = received;\n            Debug.Log(\"Read data: \" + received);\n\n            exchanging = false;\n        }\n    }\n\n    private void ReportDataToTrackingManager(string data)\n    {\n        if (data == null)\n        {\n            Debug.Log(\"Received a frame but data was null\");\n            return;\n        }\n\n        var parts = data.Split(';');\n        foreach(var part in parts)\n        {\n            ReportStringToTrackingManager(part);\n        }\n    }\n\n    private void ReportStringToTrackingManager(string rigidBodyString)\n    {\n        var parts = rigidBodyString.Split(':');\n        var positionData = parts[1].Split(',');\n        var rotationData = parts[2].Split(',');\n\n        int id = Int32.Parse(parts[0]);\n        float x = float.Parse(positionData[0]);\n        float y = float.Parse(positionData[1]);\n        float z = float.Parse(positionData[2]);\n        float qx = float.Parse(rotationData[0]);\n        float qy = float.Parse(rotationData[1]);\n        float qz = float.Parse(rotationData[2]);\n        float qw = float.Parse(rotationData[3]);\n\n        Vector3 position = new Vector3(x, y, z);\n        Quaternion rotation = new Quaternion(qx, qy, qz, qw);\n\n        TrackingManager.UpdateRigidBodyData(id, position, rotation);\n    }\n\n    public void StopExchange()\n    {\n        exchangeStopRequested = true;\n\n#if UNITY_EDITOR\n        if (exchangeThread != null)\n        {\n            exchangeThread.Abort();\n            stream.Close();\n            client.Close();\n            writer.Close();\n            reader.Close();\n\n            stream = null;\n            exchangeThread = null;\n        }\n#else\n        if (exchangeTask != null) {\n            exchangeTask.Wait();\n            socket.Dispose();\n            writer.Dispose();\n            reader.Dispose();\n\n            socket = null;\n            exchangeTask = null;\n        }\n#endif\n        writer = null;\n        reader = null;\n    }\n\n    public void OnDestroy()\n    {\n        StopExchange();\n    }\n\n}\n```","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>If you've ever had the pleasure of implementing a TCP client that would work in both the Unity editor (for development/debugging) and UWP on HoloLens (for production) you will know how painful the whole process is. Below you can find some info on how I tackled this problem. My code might not work for you as it's tailored for one specific purpose, nonetheless it might serve as a good starting point.</p>\n\n<p>A bit of context on this (<a href=\"#thecode\">click here</a> to jump straight to the code): I've been doing a lot of HoloLens development as a part of my internship with <a href=\"http://www.surgicalvision.cs.ucl.ac.uk/\">UCL Surgical Robot Vision lab</a>. One of the pipelines I was developing involved processing IR tracking data from <a href=\"http://optitrack.com/products/v120-trio/\">OptiTrack V120:Trio</a> and sending rigid body positions/rotations to HoloLens, which is where the TCP client got involved. I'll post an article about the whole system some time in the future.</p>\n\n<blockquote>\n  <p><strong>Disclaimer:</strong> This might not be the best solution, but <em>it works</em>. Before I came up with this I was googling for a while and could not find any useful info, so hopefully this article will at least point you in the right direction. If you want to suggest an improvement, use the comment section below.</p>\n</blockquote>\n\n<h1 id=\"thingstolookoutfor\">Things to look out for</h1>\n\n<p>Unfortunately there isn't just a single thing that makes the whole process a pain, there is a whole lot of them. I summarise the obstacles I encountered and how I overcame them in the list below.</p>\n\n<ol>\n<li><p><strong>Unity C# and UWP C# are different.</strong> There might be better ways to put it but this sentence summarises it pretty well. If you implement a TCP client <em>the Unity way</em>, UWP/HoloLens will complain that namespace <code>System.Net.Sockets</code> does not exist. If you implement a TCP client <em>the UWP way</em>, Unity editor with complain about <code>Windows.Networking.Sockets</code> or something similar. Additionally, Unity uses some \"stone age\" C# version that doesn't support <code>async</code>/<code>await</code> keywords which makes it even more of a hassle.  </p>\n\n<ul><li><strong>Solution</strong>: Wrap platform specific code in <code>#if UNITY_EDITOR</code> and <code>#endif</code> or its equivalent. As you probably figured out from the name, <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives/preprocessor-if\">this would tell the compiler</a> to completely ignore the code between the two if that particular variable is not set. I was only deploying to UWP and Unity, so in my case undefined <code>UNITY_EDITOR</code> meant I'm on UWP. If you deploy to other platforms too, you might want to add other conditions too.</li>\n<li><strong>Alternative</strong>: You could also compile platform specific DLLs and place them in the plugins folder in your assets.</li>\n<li><strong>Note on <code>async</code>/<code>await</code></strong>: These shouldn't cause you too much trouble as long as you don't write your cross-platform (i.e. code that is meant to work in both Unity and UWP without <code>#if</code>'s) using <code>await</code>. If you look at the <code>Connect()</code> in my code, you will see that I simply call <code>ConnectUWP()</code> as a normal function also it's technically <code>async</code> on UWP and yet the code compiles without any issues. It's important you understand that <code>async</code> functions get called just like any other functions, but the program doesn't wait for the function to return before proceeding.</li></ul></li>\n<li><p><strong>UWP doesn't support threads (at the time of writing).</strong> If normally you'd just use the <code>Thread</code> class, in UWP you have to use the <code>System.Threading.Tasks.Task</code> class to achieve the same functionality. To clarify, when implementing a TCP client in Unity you absolutely most definitely have to use a separate thread/task or your code will hang the whole app. <code>Task</code> isn't that bad but I found it to be very poorly documented, and most importantly its interface is incompatible with <code>Thread</code> so you will have to rewrite your code.  </p>\n\n<ul><li><strong>Solution:</strong> Extract the code for creating and stopping threads into a separate function which will handle platform-specific thread creation. In my code, you can see thread/task creation in <code>RestartExchange()</code>, while deleting a thread can be seen in <code>StopExchange()</code>. Both of these use <code>#if ...</code> and <code>#endif</code> mentioned above.</li></ul></li>\n<li><p><strong>Most <code>GameObject</code> manipulations in Unity can only be performed by the main thread.</strong> I didn't have the time to find out why exactly that is but there is probably some resource-management reason, so we'll just have to deal with it. As your TCP client runs in a separate thread, whenever you try to make a change on some object Unity will call you out on not being the main thread. This happens in both the Unity editor and UWP, and I suspect everywhere else too.  </p>\n\n<ul><li><strong>Solution</strong>: Instead of modifying the objects directly, use some shared variables to notify the main thread to make changes. In my code, you can see that the TCP client thread updates <code>lastPacket</code> string, which is then picked up by the main thread through the <code>Update()</code> method. This way, TCP client thread receives the information but it's the main thread who actually applies the changes to game objects.</li></ul></li>\n</ol>\n\n<h1 id=\"thecode\">The code</h1>\n\n<p>Here's the code I used in my project. At the moment I provide it as-is, so it will not work out of the box. I might trim it to a more general solution in the future.</p>\n\n<pre><code class=\"language-csharp\">using System;  \nusing System.Collections.Generic;  \nusing System.IO;  \nusing System.Text;  \nusing System.Threading;  \nusing UnityEngine;\n\n#if !UNITY_EDITOR\nusing System.Threading.Tasks;  \n#endif\n\npublic class USTrackingTcpClient : MonoBehaviour  \n{\n\n    public USTrackingManager TrackingManager;\n    public USStatusTextManager StatusTextManager;\n\n#if !UNITY_EDITOR\n    private bool _useUWP = true;\n    private Windows.Networking.Sockets.StreamSocket socket;\n    private Task exchangeTask;\n#endif\n\n#if UNITY_EDITOR\n    private bool _useUWP = false;\n    System.Net.Sockets.TcpClient client;\n    System.Net.Sockets.NetworkStream stream;\n    private Thread exchangeThread;\n#endif\n\n    private Byte[] bytes = new Byte[256];\n    private StreamWriter writer;\n    private StreamReader reader;\n\n    public void Connect(string host, string port)\n    {\n        if (_useUWP)\n        {\n            ConnectUWP(host, port);\n        }\n        else\n        {\n            ConnectUnity(host, port);\n        }\n    }\n\n\n\n#if UNITY_EDITOR\n    private void ConnectUWP(string host, string port)\n#else\n    private async void ConnectUWP(string host, string port)\n#endif\n    {\n#if UNITY_EDITOR\n        errorStatus = \"UWP TCP client used in Unity!\";\n#else\n        try\n        {\n            if (exchangeTask != null) StopExchange();\n\n            socket = new Windows.Networking.Sockets.StreamSocket();\n            Windows.Networking.HostName serverHost = new Windows.Networking.HostName(host);\n            await socket.ConnectAsync(serverHost, port);\n\n            Stream streamOut = socket.OutputStream.AsStreamForWrite();\n            writer = new StreamWriter(streamOut) { AutoFlush = true };\n\n            Stream streamIn = socket.InputStream.AsStreamForRead();\n            reader = new StreamReader(streamIn);\n\n            RestartExchange();\n            successStatus = \"Connected!\";\n        }\n        catch (Exception e)\n        {\n            errorStatus = e.ToString();\n        }\n#endif\n    }\n\n    private void ConnectUnity(string host, string port)\n    {\n#if !UNITY_EDITOR\n        errorStatus = \"Unity TCP client used in UWP!\";\n#else\n        try\n        {\n            if (exchangeThread != null) StopExchange();\n\n            client = new System.Net.Sockets.TcpClient(host, Int32.Parse(port));\n            stream = client.GetStream();\n            reader = new StreamReader(stream);\n            writer = new StreamWriter(stream) { AutoFlush = true };\n\n            RestartExchange();\n            successStatus = \"Connected!\";\n        }\n        catch (Exception e)\n        {\n            errorStatus = e.ToString();\n        }\n#endif\n    }\n\n    private bool exchanging = false;\n    private bool exchangeStopRequested = false;\n    private string lastPacket = null;\n\n    private string errorStatus = null;\n    private string warningStatus = null;\n    private string successStatus = null;\n    private string unknownStatus = null;\n\n    public void RestartExchange()\n    {\n#if UNITY_EDITOR\n        if (exchangeThread != null) StopExchange();\n        exchangeStopRequested = false;\n        exchangeThread = new System.Threading.Thread(ExchangePackets);\n        exchangeThread.Start();\n#else\n        if (exchangeTask != null) StopExchange();\n        exchangeStopRequested = false;\n        exchangeTask = Task.Run(() =&gt; ExchangePackets());\n#endif\n    }\n\n    public void Update()\n    {\n        if(lastPacket != null)\n        {\n            ReportDataToTrackingManager(lastPacket);\n        }\n\n        if(errorStatus != null)\n        {\n            StatusTextManager.SetError(errorStatus);\n            errorStatus = null;\n        }\n        if (warningStatus != null)\n        {\n            StatusTextManager.SetWarning(warningStatus);\n            warningStatus = null;\n        }\n        if (successStatus != null)\n        {\n            StatusTextManager.SetSuccess(successStatus);\n            successStatus = null;\n        }\n        if (unknownStatus != null)\n        {\n            StatusTextManager.SetUnknown(unknownStatus);\n            unknownStatus = null;\n        }\n    }\n\n    public void ExchangePackets()\n    {\n        while (!exchangeStopRequested)\n        {\n            if (writer == null || reader == null) continue;\n            exchanging = true;\n\n            writer.Write(\"X\\n\");\n            Debug.Log(\"Sent data!\");\n            string received = null;\n\n#if UNITY_EDITOR\n            byte[] bytes = new byte[client.SendBufferSize];\n            int recv = 0;\n            while (true)\n            {\n                recv = stream.Read(bytes, 0, client.SendBufferSize);\n                received += Encoding.UTF8.GetString(bytes, 0, recv);\n                if (received.EndsWith(\"\\n\")) break;\n            }\n#else\n            received = reader.ReadLine();\n#endif\n\n            lastPacket = received;\n            Debug.Log(\"Read data: \" + received);\n\n            exchanging = false;\n        }\n    }\n\n    private void ReportDataToTrackingManager(string data)\n    {\n        if (data == null)\n        {\n            Debug.Log(\"Received a frame but data was null\");\n            return;\n        }\n\n        var parts = data.Split(';');\n        foreach(var part in parts)\n        {\n            ReportStringToTrackingManager(part);\n        }\n    }\n\n    private void ReportStringToTrackingManager(string rigidBodyString)\n    {\n        var parts = rigidBodyString.Split(':');\n        var positionData = parts[1].Split(',');\n        var rotationData = parts[2].Split(',');\n\n        int id = Int32.Parse(parts[0]);\n        float x = float.Parse(positionData[0]);\n        float y = float.Parse(positionData[1]);\n        float z = float.Parse(positionData[2]);\n        float qx = float.Parse(rotationData[0]);\n        float qy = float.Parse(rotationData[1]);\n        float qz = float.Parse(rotationData[2]);\n        float qw = float.Parse(rotationData[3]);\n\n        Vector3 position = new Vector3(x, y, z);\n        Quaternion rotation = new Quaternion(qx, qy, qz, qw);\n\n        TrackingManager.UpdateRigidBodyData(id, position, rotation);\n    }\n\n    public void StopExchange()\n    {\n        exchangeStopRequested = true;\n\n#if UNITY_EDITOR\n        if (exchangeThread != null)\n        {\n            exchangeThread.Abort();\n            stream.Close();\n            client.Close();\n            writer.Close();\n            reader.Close();\n\n            stream = null;\n            exchangeThread = null;\n        }\n#else\n        if (exchangeTask != null) {\n            exchangeTask.Wait();\n            socket.Dispose();\n            writer.Dispose();\n            reader.Dispose();\n\n            socket = null;\n            exchangeTask = null;\n        }\n#endif\n        writer = null;\n        reader = null;\n    }\n\n    public void OnDestroy()\n    {\n        StopExchange();\n    }\n\n}\n</code></pre>","image":"https://s3-eu-central-1.amazonaws.com/foxypanda-ghost/2017/07/hololens.jpg","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-07-18 12:42:43","created_by":1,"updated_at":"2017-07-24 19:21:19","updated_by":1,"published_at":"2017-07-21 10:14:18","published_by":1,"amp":null},{"id":46,"uuid":"6c229ea3-6807-4ac6-987f-4f460f30e0ff","title":"Automatic Node.js testing and linting using Git hooks","slug":"automatic-node-js-testing-and-linting-before-git-push","markdown":"# Abstract\n\nIn Summer 2017 I was working on an internship with Microsoft and UCL. I was put in charge of designing and developing the backend architecture for a reasonably big system. Continuous integration (CI) and deployment (CD) were a must, so I tried to automate as many things as possible. As you might already know, I'm a huge Node.js fan so naturally I decided to work with this platform. When my projects involve writing JavaScript, I always insist on using linting tools (e.g. [ESLint](http://eslint.org/)) to ensure consistent coding style throughout the source code.\n\nTruth be told, although I always run unit tests before pushing I often forget about linting (`npm run lint` in most of my projects). Due to this, I sometimes push \"bad\" code (unused variables, inconsistent commas, etc.) to CI, which results in the whole team being notified about a build error. This article talks about avoiding this issue by using [Git hooks](https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks).\n\n# Git hooks\n\nTo solve my particular issue, I decided to use a `pre-push` hook. I could also use a `pre-commit`, but I don't have any issues with inserting an extra commit fixing any linting problems. The commands I wanted to run for my particular project are `npm run test-compact` and `npm run lint`. These are executed pre-push, making sure the code I push to online repositories is working. The other command I run pre-commit is `npm run apidoc` followed by `git add ./doc/`, which scans the source code for doc blocks, generates the documentation and adds it to my commit (thanks, [apiDoc](http://apidocjs.com/)).\n\nThere's an amazing NPM package called [Husky](https://github.com/typicode/husky) that makes working with Git hooks easy for Node developers. Just a matter of adding new scripts to your `package.json`:\n\n```language-json\n{\n  \"name\": \"...\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    //...\n    \"test-compact\": \"mocha --reporter dot \\\"./lib/**/*.spec.js\\\"\",\n    \"lint\": \"eslint ./index.js ./test/ ./lib/\",\n    \"apidoc\": \"apidoc -i ./lib/ -o ./doc/\",\n    \"precommit\": \"npm run apidoc && git add ./doc/\",\n    \"prepush\": \"npm run test-compact && npm run lint\"\n  },\n  // ...\n}\n```\n\nTo summarise, my Git hooks now do the following:\n\n* Before I commit my code, apiDoc generates up-to-date documentation and adds it to my commit.\n* Before I push my code to a remote repository, NPM runs tests and linting scripts to make sure I'm not pushing any bad code. If an error is encountered, I would see something like this:\n\n<img src=\"https://s3-eu-central-1.amazonaws.com/foxypanda-ghost/2017/06/node-pre-push-hook.png\" title=\"Node pre-push testing and linting\" style=\"border: solid 1px #25d7e5\"/>","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>In Summer 2017 I was working on an internship with Microsoft and UCL. I was put in charge of designing and developing the backend architecture for a reasonably big system. Continuous integration (CI) and deployment (CD) were a must, so I tried to automate as many things as possible. As you might already know, I'm a huge Node.js fan so naturally I decided to work with this platform. When my projects involve writing JavaScript, I always insist on using linting tools (e.g. <a href=\"http://eslint.org/\">ESLint</a>) to ensure consistent coding style throughout the source code.</p>\n\n<p>Truth be told, although I always run unit tests before pushing I often forget about linting (<code>npm run lint</code> in most of my projects). Due to this, I sometimes push \"bad\" code (unused variables, inconsistent commas, etc.) to CI, which results in the whole team being notified about a build error. This article talks about avoiding this issue by using <a href=\"https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks\">Git hooks</a>.</p>\n\n<h1 id=\"githooks\">Git hooks</h1>\n\n<p>To solve my particular issue, I decided to use a <code>pre-push</code> hook. I could also use a <code>pre-commit</code>, but I don't have any issues with inserting an extra commit fixing any linting problems. The commands I wanted to run for my particular project are <code>npm run test-compact</code> and <code>npm run lint</code>. These are executed pre-push, making sure the code I push to online repositories is working. The other command I run pre-commit is <code>npm run apidoc</code> followed by <code>git add ./doc/</code>, which scans the source code for doc blocks, generates the documentation and adds it to my commit (thanks, <a href=\"http://apidocjs.com/\">apiDoc</a>).</p>\n\n<p>There's an amazing NPM package called <a href=\"https://github.com/typicode/husky\">Husky</a> that makes working with Git hooks easy for Node developers. Just a matter of adding new scripts to your <code>package.json</code>:</p>\n\n<pre><code class=\"language-json\">{\n  \"name\": \"...\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    //...\n    \"test-compact\": \"mocha --reporter dot \\\"./lib/**/*.spec.js\\\"\",\n    \"lint\": \"eslint ./index.js ./test/ ./lib/\",\n    \"apidoc\": \"apidoc -i ./lib/ -o ./doc/\",\n    \"precommit\": \"npm run apidoc &amp;&amp; git add ./doc/\",\n    \"prepush\": \"npm run test-compact &amp;&amp; npm run lint\"\n  },\n  // ...\n}\n</code></pre>\n\n<p>To summarise, my Git hooks now do the following:</p>\n\n<ul>\n<li>Before I commit my code, apiDoc generates up-to-date documentation and adds it to my commit.</li>\n<li>Before I push my code to a remote repository, NPM runs tests and linting scripts to make sure I'm not pushing any bad code. If an error is encountered, I would see something like this:</li>\n</ul>\n\n<p><img src=\"https://s3-eu-central-1.amazonaws.com/foxypanda-ghost/2017/06/node-pre-push-hook.png\" title=\"Node pre-push testing and linting\" style=\"border: solid 1px #25d7e5\"/></p>","image":"https://s3-eu-central-1.amazonaws.com/foxypanda-ghost/2017/06/node-pre-push-hook.png","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-06-29 17:28:24","created_by":1,"updated_at":"2017-06-29 18:15:42","updated_by":1,"published_at":"2017-06-29 18:02:11","published_by":1,"amp":null},{"id":47,"uuid":"de99ad9b-8294-4367-8631-48fee1ce039e","title":"Summer internship at UCL Surgical Robot Vision lab","slug":"summer-internship-at-ucl-surgical-robot-vision-lab","markdown":"# Abstract","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-07-18 12:43:08","created_by":1,"updated_at":"2017-07-18 12:43:15","updated_by":1,"published_at":null,"published_by":null,"amp":null},{"id":48,"uuid":"dccdf6a6-43a4-4884-8abf-858393b9ae25","title":"PEACH Reality featured on official HoloLens homepage","slug":"peach-reality-featured-on-official-hololens-homepage","markdown":"# Abstract\n\nToday was truly an amazing day. A video about the project I worked on, [PEACH Reality](https://foxypanda.me/ucl-peach-reality-with-microsoft-hololens/), was featured on the official homepage of Microsoft HoloLens. It was a very interesting journey and I'm very thankful to Microsoft for helping us out and shooting this video about the project.\n\n# The video\n\nYou can watch the video itself below or [on YouTube](https://www.youtube.com/watch?v=XCz0-VmEuW8).\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/XCz0-VmEuW8\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>\n\n# Screencap for history\n\n![](https://s3-eu-central-1.amazonaws.com/foxypanda-ghost/2017/06/peach-reality-hololens.png)","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>Today was truly an amazing day. A video about the project I worked on, <a href=\"https://foxypanda.me/ucl-peach-reality-with-microsoft-hololens/\">PEACH Reality</a>, was featured on the official homepage of Microsoft HoloLens. It was a very interesting journey and I'm very thankful to Microsoft for helping us out and shooting this video about the project.</p>\n\n<h1 id=\"thevideo\">The video</h1>\n\n<p>You can watch the video itself below or <a href=\"https://www.youtube.com/watch?v=XCz0-VmEuW8\">on YouTube</a>.</p>\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/XCz0-VmEuW8\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>\n\n<h1 id=\"screencapforhistory\">Screencap for history</h1>\n\n<p><img src=\"https://s3-eu-central-1.amazonaws.com/foxypanda-ghost/2017/06/peach-reality-hololens.png\" alt=\"\" /></p>","image":"","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-06-29 16:02:38","created_by":1,"updated_at":"2017-10-14 19:49:03","updated_by":1,"published_at":"2017-06-29 16:09:41","published_by":1,"amp":null},{"id":49,"uuid":"4e05056c-1198-4a55-8864-6f988b1a4ae2","title":"Adding link anchors to markdown headings","slug":"adding-link-anchors-to-markdown-headings","markdown":"# Abstract\n\nI've recently made this blog a little bit more user-friendly - added a short introduction about myself on the front page, replaced Disqus with Facebook comments, added a like button and small \"external link\" icons. One other addition were link anchors near headings. I might end up changing the design in the future, but they currently look like this:\n\n<img src=\"https://s3-eu-central-1.amazonaws.com/foxypanda-ghost/2017/06/anchor-links.png\" title=\"Markdown anchor links on Foxy Panda\" style=\"border: solid 1px #25d7e5\"/>\n\nIn this short article I'll be talking about how these links can be generated and also 1 small CSS tip.\n\n# Generating anchor links\n\n>**Note:** I'm personally using [Ghost CMS](https://ghost.org/) which in turn uses [Markdown](https://en.wikipedia.org/wiki/Markdown). Most Markdown compilers automatically add IDs to your headings, e.g `# Hello!` will be converted into `<h1 id=\"hello\">Hello!</h1>`. Thanks to this one could now make a link to this heading using `<a href=\"#hello\">Link</a>`.\n\n","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>I've recently made this blog a little bit more user-friendly - added a short introduction about myself on the front page, replaced Disqus with Facebook comments, added a like button and small \"external link\" icons. One other addition were link anchors near headings. I might end up changing the design in the future, but they currently look like this:</p>\n\n<p><img src=\"https://s3-eu-central-1.amazonaws.com/foxypanda-ghost/2017/06/anchor-links.png\" title=\"Markdown anchor links on Foxy Panda\" style=\"border: solid 1px #25d7e5\"/></p>\n\n<p>In this short article I'll be talking about how these links can be generated and also 1 small CSS tip.</p>\n\n<h1 id=\"generatinganchorlinks\">Generating anchor links</h1>\n\n<blockquote>\n  <p><strong>Note:</strong> I'm personally using <a href=\"https://ghost.org/\">Ghost CMS</a> which in turn uses <a href=\"https://en.wikipedia.org/wiki/Markdown\">Markdown</a>. Most Markdown compilers automatically add IDs to your headings, e.g <code># Hello!</code> will be converted into <code>&lt;h1 id=\"hello\"&gt;Hello!&lt;/h1&gt;</code>. Thanks to this one could now make a link to this heading using <code>&lt;a href=\"#hello\"&gt;Link&lt;/a&gt;</code>.</p>\n</blockquote>","image":"https://s3-eu-central-1.amazonaws.com/foxypanda-ghost/2017/06/anchor-links-1.png","featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-06-20 21:37:26","created_by":1,"updated_at":"2017-06-21 02:24:09","updated_by":1,"published_at":null,"published_by":null,"amp":null},{"id":50,"uuid":"0da75c3a-2c5c-4cbf-988c-e378861f6bf3","title":"Digit recognition in JavaScript","slug":"digit-recognition-in-javascript-2","markdown":"# Abstract\n\nDuring the summer of 2016 I took an interest in the concepts behind neural networks and machine learning and after doing researching I decided to apply my newly acquired knowledge. Recently I've begun working with [TypeScript](https://www.typescriptlang.org/) quite a lot and decided to stick with it as my primary language of development with [Node](https://nodejs.org/) to run the app.\n\nThe final product was a reasonably complex neural network implementation with a working digit classifier, which reached the maximum accuracy of 81%. This is far from human digit recognition accuracy of 97.5% but the whole project was still a very useful exercise that helped me broaden my knowledge of machine learning. You can find the source code of the project on [this GitHub page](https://github.com/TimboKZ/js-digit-recognition). I tried to document all of the TypeScript code so if you yourself are interested in neural network you might find it useful to look through the code.\n\n# A quick demo\n\nBelow is a video of the digit classifier in action. In the video you can the output of just one of several testing scripts included in the repo, you can find more information about it by following the link above.\n\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/8lpwIMJbLHU\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>During the summer of 2016 I took an interest in the concepts behind neural networks and machine learning and after doing researching I decided to apply my newly acquired knowledge. Recently I've begun working with <a href=\"https://www.typescriptlang.org/\">TypeScript</a> quite a lot and decided to stick with it as my primary language of development with <a href=\"https://nodejs.org/\">Node</a> to run the app.</p>\n\n<p>The final product was a reasonably complex neural network implementation with a working digit classifier, which reached the maximum accuracy of 81%. This is far from human digit recognition accuracy of 97.5% but the whole project was still a very useful exercise that helped me broaden my knowledge of machine learning. You can find the source code of the project on <a href=\"https://github.com/TimboKZ/js-digit-recognition\">this GitHub page</a>. I tried to document all of the TypeScript code so if you yourself are interested in neural network you might find it useful to look through the code.</p>\n\n<h1 id=\"aquickdemo\">A quick demo</h1>\n\n<p>Below is a video of the digit classifier in action. In the video you can the output of just one of several testing scripts included in the repo, you can find more information about it by following the link above.</p>\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/8lpwIMJbLHU\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-16 23:26:54","created_by":1,"updated_at":"2016-08-28 03:41:04","updated_by":1,"published_at":"2016-08-16 23:27:07","published_by":1,"amp":null},{"id":51,"uuid":"5d625ceb-0358-4a80-bfe1-aac878f2fa92","title":"Active Visualiser","slug":"active-visualiser-2","markdown":"# Abstract\n\nBack in 2014 I decided to develop a music visualiser, and since I was mostly working with Java at the time my choice fell on this very language. Sadly, I couldn't find any decent tutorials or examples of music visualiser implementation in Java, so I decided to make one myself. Keep in mind, this project was made when I hardly had any experience with Java and, unfortunately, I did not make use of Maven during the development process.\n\n# Active Visualiser\n\nActive Visualiser is a pretty basic music visualiser written in Java. It uses reasonably trivial techniques to analyse the audio and then produce some visualisation using OpenGL. You can find the source code and some documentation on [its GitHub page](https://github.com/TimboKZ/ActiveVisualiser). Check out the video below for a simple demo of the visualiser.\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/OUPmbOWXMtE\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>Back in 2014 I decided to develop a music visualiser, and since I was mostly working with Java at the time my choice fell on this very language. Sadly, I couldn't find any decent tutorials or examples of music visualiser implementation in Java, so I decided to make one myself. Keep in mind, this project was made when I hardly had any experience with Java and, unfortunately, I did not make use of Maven during the development process.</p>\n\n<h1 id=\"activevisualiser\">Active Visualiser</h1>\n\n<p>Active Visualiser is a pretty basic music visualiser written in Java. It uses reasonably trivial techniques to analyse the audio and then produce some visualisation using OpenGL. You can find the source code and some documentation on <a href=\"https://github.com/TimboKZ/ActiveVisualiser\">its GitHub page</a>. Check out the video below for a simple demo of the visualiser.</p>\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/OUPmbOWXMtE\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-27 23:30:17","created_by":1,"updated_at":"2016-08-28 02:36:17","updated_by":1,"published_at":"2015-01-17 00:31:00","published_by":1,"amp":null},{"id":52,"uuid":"747691cf-ed9f-4588-ba7f-ac2c8cfad70e","title":"LaTeX Bootcamp","slug":"latex-bootcamp-2","markdown":"# Abstract\n\nDuring my first year as a computer scientist at UCL I found myself using $\\LaTeX$ quite a bit, and I have to be honest here - for someone with absolutely no prior knowledge in that area it wasn't an easy road and the learning curve was quite steep. Naturally, after some practice you begin to understand everything better but in case of $\\LaTeX$, you'll be confused as hell reading through the first couple of tutorials (and probably for several more tutorials after that). The aim of this guide is to help you understand what it actually is and where is the best place to start learning it.\n\n# Introduction\n\nI personally usually skip the introduction part and jump straight to the interesting stuff but doing so in this case would completely defeat the purpose of reading this guide. That said, keep in mind this guide was meant to be super basic so don't be surprised if you see stuff you already know.\n\n## So what the hell is $\\LaTeX$?\n\n$\\LaTeX$, pronounced lah-tekh, lah-tek or lay-tek, is a document preparation system. The core idea to understand here is that in $\\LaTeX$ editors you don't get fancy formatted text as you type, but instead, you type in plain text first and only after compilation do you get the formatted result. The best part is that you can use special markup to customise the formatting and the overall look and feel of your document however you please. For example, if you were to type then compile <code class=\"language-latex\">\\sum\\_{i=1}^{n} \\frac{2i + 5}{2^{i}}</code> you would get something like this: \n$\\sum\\_{i=1}^{n} \\frac{2i + 5}{2^{i}}$. Amazing, isn't it?\n\n## Why would I ever want to use it?\n\n$\\LaTeX$ is arguably the best tool out there when it comes to producing any kind of scientific documentation and many other things, such as journal articles or books. Personally, I love it for how well-structured the final document is and how consistent markup can ensure the professional and extremely neat look of your documents. Moreover, I like how easy it is to load additional packages, such as those for pseudocode formatting or simple UML diagrams. As a quick example, consider this piece of coursework I had to write not so long ago:\n\n![COMP104P Algorithm Complexity Coursework](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_example-1472389145110.png)\n\nI won't lie, the markup is much more complicated than that in your average word processor, but this complexity really pays off later when you get a beautifully formatted compiled result.\n\n#How does it work?\n\nAs I said above, $\\LaTeX$ markup has to be compiled before you can see the pretty formatted result. Which means, you need some kind of software that would do all of the compiling for you. This is where I can't really give you much advice because I've only used such software on Windows up until now, so I'd suggest you do a quick Google search. Out of the things I've tried so far I would recommend [Overleaf](https://www.overleaf.com/), an online collaborative $\\LaTeX$ editor with real time previews, as well as [TeXstudio](http://www.texstudio.org/) for Windows for pretty much the same reason, minus the collaborative writing feature.\n\nThe usual \"development\" pipeline with $\\LaTeX$ is pretty straight-forward: You type up your document, format it using the appropriate markup, compile it, check out the result, fix any formatting issues and compile it again. I personally prefer compiling a bit more often than that to admire the progress I've made, but I guess that excitement will fade over time. Either way, the most efficient technique of writing is not the main focus of this guide.\n\n# Your first document\n\nFrom here onwards I will assume you have installed a decent editor and you already know how to compile the document in the editor of your choice. Well, let's begin with a super simple $\\LaTeX$ document. If you already have some other markup in your editor, remove it. Otherwise, try typing in the code you see below and then compiling. If nothing went wrong in the process, you should get the output similar to the one on the screenshot.\n\n```language-latex\n\\documentclass{article}\n\\begin{document}\n\n\\section{A Section}\nSome dummy text for a paragraph.\n\n\\end{document}\n```\n\n![Your first LaTeX document](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_first_document_1-1472391920247.png)\n\n## Breakdown\n\nThe first line, <code class=\"language-latex\">\\documentclass{...}</code> is one of the most important parts of your document. It tells your editor what kind of document you are writing and allows you to specify various options, such as the font size or whether you want a title page to be present or not. It is recommended to insert this tag in the very beginning of your document, and the format is <code class=\"language-latex\">\\documentclass[options]{class}</code> (note that square brackets denote optional parameters while curly brackets are compulsory). For the sake of this guide I'm going to stick to a simple article class, but if you'd want to you could customise the document class heavily and end up with something like <code class=\"language-latex\">\\documentclass[twoside, openright, 11pt]{report}</code> (read [this](http://texblog.org/2013/02/13/latex-documentclass-options-illustrated/) for more information).\n\n<p>Lines 2 and 7, containing <code class=\"language-latex\">\\begin{document}</code> and <code class=\"language-latex\">\\end{document}</code>\n    respectively, define the boundaries of your document. All of the content you want to be present in the compiled\n    result goes between these 2 tags. In our case we only have one section title and a single sentence. Note how plain\n    text doesn't require any formatting, while something not as ordinary, say, heading, needs to be wrapped in a special\n    tag.\n</p>\n\n<h1>Basic content formatting</h1>\n\n<p>The formatting options available to you differ depending on the type of document class you've chosen so make sure to\n    look up additional formatting tips for the document you are writing. In the examples below I will omit some tags\n    necessary to compile the document (described above) so don't forget to add them before compiling.\n</p>\n\n<h2>Chapters, sections and subsections</h2>\n\n<p>To present your document in a neat, well-structured way you will definitely be using a lot of sections and\n    subsections. Consider the example below.\n</p>\n\n```language-latex\n\\section{Section}\nPellentesque laoreet, ex ut dapibus volutpat, leo nisl sagittis ex, non hendrerit.\n\n\\subsection{Subsection}\nMorbi vitae ipsum eu leo porta ultrices sed nec libero.\n\n\\subsubsection{Subsubsection}\nAliquam pellentesque fermentum felis id luctus.\n```\n\n![LaTeX sections](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_sections-1472395360070.png)\n\n<p>Note how $\\LaTeX$ automatically enumerates the section headings for you. You can insert any amount of sections,\n    subsections or subsubsections wherever you want and during compilation time your editor will automatically resolve\n    any changes in the structure of the document. An amazing outcome of using sections in document is that you can\n    easily generate a table of contents by simply inserting the <code class=\"language-latex\">\\tableofcontents</code> tag\n    anywhere in your document:\n</p>\n\n![Table of contents](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_toc-1472395377437.png)\n\n<h2>Enumeration, bullet points and lists</h2>\n\n<p>Making lists is pretty straightforward. You have to use the familiar <code class=\"language-latex\">\\begin{...}</code>\n    and <code class=\"language-latex\">\\end{...}</code> and place some <code class=\"language-latex\">\\item</code> elements\n    in between. Replace <code>...</code> with the list type, which can either be <code>enumerate</code>,\n    <code>itemize</code> or <code>description</code>.\n</p>\n\n```language-latex\n\\section{Enumerated list}\n\n\\begin{enumerate}\n\\item Item 1\n\\item Item 2\n\\end{enumerate}\n\n\\section{Bullet point list}\n\n\\begin{itemize}\n\\item Item 1\n\\item Item 2\n\\end{itemize}\n\n\\section{Descriptive list}\n\n\\begin{description}\n\\item [Item 1] Description 1\n\\item [Item 2] Description 2\n\\end{description}\n```\n\n![Enumerations](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_enum-1472395399518.png)\n\n<p>Nesting lists is as easy as placing on list inside another, as shown below. Note that the indentation is there purely\n    for decorative purposes and is not actually required for your editor to render the list correctly.\n</p>\n\n```language-latex\n\\begin{enumerate}\n    \\item Item 1\n    \\item Item 2\n    \\begin{itemize}\n        \\item Item 1\n        \\item Item 2\n        \\begin{enumerate}\n            \\item Item 1\n            \\item Item 2\n        \\end{enumerate}\n    \\end{itemize}\n\\end{enumerate}\n```\n\n![Nested lists](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_nested-1472395418425.png)\n\n<h2>Page- and line-breaks</h2>\n\n<p>So, line-breaks. Line-breaks are pretty self-explanatory, you insert them when you want to explicitly your editor you\n    want to jump to a new line. You can use <code class=\"language-latex\">\\\\</code> or <code class=\"language-latex\">\\newline</code>\n    which have the same effect. Note how in the example below, there is no explicit line break between the 2 paragraphs,\n    while there are two between paragraphs 2 and 3 and one between 3 and 4. I omitted the actual paragraph text to make\n    the example clearer.\n</p>\n\n```language-latex\nParagraph 1 text . . .\n\nParagraph 2 text . . .\n\\\\\n\\\\\nParagraph 3 text . . .\n\\\\\nParagraph 4 text . . .\n```\n\n![LaTeX linebreaks](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_line_breaks-1472395504345.png)\n\n<p>Page-breaks push all of the content below them to a new page. Simply insert <code\n        class=\"language-latex\">\\pagebreak</code> wherever you need it and you will achieve the effect similar to the one\n    shown below. There I inserted a <code class=\"language-latex\">\\pagebreak</code> right before the second section.\n</p>\n\n![LaTeX pagebreaks](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_page_break-1472395508874.png)\n\n<h1>Labels and references</h1>\n\n<p>Referencing various parts of your document becomes super easy with $\\LaTeX$. The basic concept is that if you want to\n    reference something, you label it using the <code class=\"language-latex\">\\label{label-name}</code> tag, and then\n    reference it elsewhere using <code class=\"language-latex\">\\ref{label-name}</code>. Additionally, you can reference\n    the number of the page the label is on using <code class=\"language-latex\">\\pageref{label-name}</code>, as shown in\n    the example below.\n</p>\n\n```language-latex\n\\section{A Section}\nFor more information, refer to section \\ref{subsection-2} on page \\pageref{subsection-2}.\n\n\\section{Another Section}\n\\subsection{A subsection}\n\\subsection{Another subsection}\\label{subsection-2}\n```\n\n![References](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_ref-1472395452426.png)\n\n<h1>Packages and comments</h1>\n\n<p>First of all, you can add text that will not be compiled by your editor using the <code>%</code> symbol. Simply\n    insert it in the beginning of the line you want the editor to ignore and add whatever comments you want to the text.\n    Now, moving on to packages - $\\LaTeX$ relies heavily on additional packages which you can use if you need some\n    additional functionality, such as some weird mathematical symbols or pseudocode highlighting, which makes $\\LaTeX$\n    absolutely amazing. To load a package during compilation, you have to insert <code class=\"language-latex\">\\usepackage{package-name}[optional-settings]</code>\n    right after the <code>\\documentclass{...}</code> tag. Check out the example below for both comment and package\n    usage.\n</p>\n\n```language-latex\n\\documentclass{article}\n\n% Package for coloured text\n\\usepackage{color}\n\n% Package for inserting graphics\n\\usepackage{graphicx}\n\n\\begin{document}\n\n% Our content goes here\n\n\\end{document}\n```\n\n<h1>Mathematical expressions</h1>\n\n<p>This is a huge topic and there is just too much to mention for this guide to give you a good idea of how to compose\n    mathematical equations in $\\LaTeX$. If you're looking for some advanced tips, consider looking through <a\n            href=\"https://en.wikibooks.org/wiki/LaTeX/Mathematics\" target=\"_blank\">this page</a>. What I will do is give\n    you several basic tips which you can find below.\n</p>\n\n<p>First of all, tell your editor to use the <code>amsmath</code> package by inserting <code class=\"language-latex\">\\usepackage{amsmath}</code>\n    in the beginning of the document. Now you can insert inline expressions using <code>\\( ... \\)</code> and block\n    expressions using <code>\\[ ... \\]</code>, as seen in the example. As I said, there is just too much different tags\n    to cover so I suggest you read the link in the above paragraph to find out more.\n</p>\n\n```language-latex\n\\documentclass{article}\n\\usepackage{amsmath}\n\\begin{document}\n\nSome text containing an inline \\( \\forall x \\in X, \\exists y \\leq \\epsilon \\) expression.\n\n\\[ \\sqrt[n]{1+x+x^2+x^3+\\ldots}\\quad or \\quad\\int_0^\\infty \\mathrm{e}^{-x}\\,\\mathrm{d}x \\]\n\n\\end{document}\n```\n\n![Mathematical expressions in LaTeX](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_expr-1472395478016.png)\n\n<h1>Code and pseudocode</h1>\n\n<p>While this is something you're very unlikely to use (unless you study computer science) I feel the need to elaborate\n    a bit more on this topic, because I study computer science. First of all, I must say that including code and/or\n    pseudocode in your documents is a real pain in the ass and so far I wasn't able to do it in a way I'd like it.\n</p>\n\n<p>I won't include any examples here to avoid confusing you even further, but I would suggest you start your search <a\n        href=\"http://tex.stackexchange.com/questions/1375/what-is-a-good-package-for-displaying-algorithms\"\n        target=\"_blank\">here for pseudocode</a> and <a href=\"https://en.wikibooks.org/wiki/LaTeX/Source_Code_Listings\"\n                                                       target=\"_blank\">here for actual code</a>.\n</p>\n\n<h1>Conclusion</h1>\n\n<p>Unfortunately this article only focuses on the very core principles behind $\\LaTeX$ and I wasn't able to cover such\n    major topics as bibliography or figures, but it must be mentioned that the very purpose of this guide was to give\n    you a gentle introduction as opposed to being a complete $\\LaTeX$ reference. If you have any suggestions or\n    complaints feel free to comment below.\n</p>","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>During my first year as a computer scientist at UCL I found myself using $\\LaTeX$ quite a bit, and I have to be honest here - for someone with absolutely no prior knowledge in that area it wasn't an easy road and the learning curve was quite steep. Naturally, after some practice you begin to understand everything better but in case of $\\LaTeX$, you'll be confused as hell reading through the first couple of tutorials (and probably for several more tutorials after that). The aim of this guide is to help you understand what it actually is and where is the best place to start learning it.</p>\n\n<h1 id=\"introduction\">Introduction</h1>\n\n<p>I personally usually skip the introduction part and jump straight to the interesting stuff but doing so in this case would completely defeat the purpose of reading this guide. That said, keep in mind this guide was meant to be super basic so don't be surprised if you see stuff you already know.</p>\n\n<h2 id=\"sowhatthehellisdlatexd\">So what the hell is $\\LaTeX$?</h2>\n\n<p>$\\LaTeX$, pronounced lah-tekh, lah-tek or lay-tek, is a document preparation system. The core idea to understand here is that in $\\LaTeX$ editors you don't get fancy formatted text as you type, but instead, you type in plain text first and only after compilation do you get the formatted result. The best part is that you can use special markup to customise the formatting and the overall look and feel of your document however you please. For example, if you were to type then compile <code class=\"language-latex\">\\sum_{i=1}^{n} \\frac{2i + 5}{2^{i}}</code> you would get something like this: \n$\\sum_{i=1}^{n} \\frac{2i + 5}{2^{i}}$. Amazing, isn't it?</p>\n\n<h2 id=\"whywouldieverwanttouseit\">Why would I ever want to use it?</h2>\n\n<p>$\\LaTeX$ is arguably the best tool out there when it comes to producing any kind of scientific documentation and many other things, such as journal articles or books. Personally, I love it for how well-structured the final document is and how consistent markup can ensure the professional and extremely neat look of your documents. Moreover, I like how easy it is to load additional packages, such as those for pseudocode formatting or simple UML diagrams. As a quick example, consider this piece of coursework I had to write not so long ago:</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_example-1472389145110.png\" alt=\"COMP104P Algorithm Complexity Coursework\" /></p>\n\n<p>I won't lie, the markup is much more complicated than that in your average word processor, but this complexity really pays off later when you get a beautifully formatted compiled result.</p>\n\n<h1 id=\"howdoesitwork\">How does it work?</h1>\n\n<p>As I said above, $\\LaTeX$ markup has to be compiled before you can see the pretty formatted result. Which means, you need some kind of software that would do all of the compiling for you. This is where I can't really give you much advice because I've only used such software on Windows up until now, so I'd suggest you do a quick Google search. Out of the things I've tried so far I would recommend <a href=\"https://www.overleaf.com/\">Overleaf</a>, an online collaborative $\\LaTeX$ editor with real time previews, as well as <a href=\"http://www.texstudio.org/\">TeXstudio</a> for Windows for pretty much the same reason, minus the collaborative writing feature.</p>\n\n<p>The usual \"development\" pipeline with $\\LaTeX$ is pretty straight-forward: You type up your document, format it using the appropriate markup, compile it, check out the result, fix any formatting issues and compile it again. I personally prefer compiling a bit more often than that to admire the progress I've made, but I guess that excitement will fade over time. Either way, the most efficient technique of writing is not the main focus of this guide.</p>\n\n<h1 id=\"yourfirstdocument\">Your first document</h1>\n\n<p>From here onwards I will assume you have installed a decent editor and you already know how to compile the document in the editor of your choice. Well, let's begin with a super simple $\\LaTeX$ document. If you already have some other markup in your editor, remove it. Otherwise, try typing in the code you see below and then compiling. If nothing went wrong in the process, you should get the output similar to the one on the screenshot.</p>\n\n<pre><code class=\"language-latex\">\\documentclass{article}\n\\begin{document}\n\n\\section{A Section}\nSome dummy text for a paragraph.\n\n\\end{document}\n</code></pre>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_first_document_1-1472391920247.png\" alt=\"Your first LaTeX document\" /></p>\n\n<h2 id=\"breakdown\">Breakdown</h2>\n\n<p>The first line, <code class=\"language-latex\">\\documentclass{...}</code> is one of the most important parts of your document. It tells your editor what kind of document you are writing and allows you to specify various options, such as the font size or whether you want a title page to be present or not. It is recommended to insert this tag in the very beginning of your document, and the format is <code class=\"language-latex\">\\documentclass[options]{class}</code> (note that square brackets denote optional parameters while curly brackets are compulsory). For the sake of this guide I'm going to stick to a simple article class, but if you'd want to you could customise the document class heavily and end up with something like <code class=\"language-latex\">\\documentclass[twoside, openright, 11pt]{report}</code> (read <a href=\"http://texblog.org/2013/02/13/latex-documentclass-options-illustrated/\">this</a> for more information).</p>\n\n<p>Lines 2 and 7, containing <code class=\"language-latex\">\\begin{document}</code> and <code class=\"language-latex\">\\end{document}</code>  \n    respectively, define the boundaries of your document. All of the content you want to be present in the compiled\n    result goes between these 2 tags. In our case we only have one section title and a single sentence. Note how plain\n    text doesn't require any formatting, while something not as ordinary, say, heading, needs to be wrapped in a special\n    tag.\n</p>\n\n<h1>Basic content formatting</h1>\n\n<p>The formatting options available to you differ depending on the type of document class you've chosen so make sure to  \n    look up additional formatting tips for the document you are writing. In the examples below I will omit some tags\n    necessary to compile the document (described above) so don't forget to add them before compiling.\n</p>\n\n<h2>Chapters, sections and subsections</h2>\n\n<p>To present your document in a neat, well-structured way you will definitely be using a lot of sections and  \n    subsections. Consider the example below.\n</p>\n\n<pre><code class=\"language-latex\">\\section{Section}\nPellentesque laoreet, ex ut dapibus volutpat, leo nisl sagittis ex, non hendrerit.\n\n\\subsection{Subsection}\nMorbi vitae ipsum eu leo porta ultrices sed nec libero.\n\n\\subsubsection{Subsubsection}\nAliquam pellentesque fermentum felis id luctus.  \n</code></pre>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_sections-1472395360070.png\" alt=\"LaTeX sections\" /></p>\n\n<p>Note how $\\LaTeX$ automatically enumerates the section headings for you. You can insert any amount of sections,  \n    subsections or subsubsections wherever you want and during compilation time your editor will automatically resolve\n    any changes in the structure of the document. An amazing outcome of using sections in document is that you can\n    easily generate a table of contents by simply inserting the <code class=\"language-latex\">\\tableofcontents</code> tag\n    anywhere in your document:\n</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_toc-1472395377437.png\" alt=\"Table of contents\" /></p>\n\n<h2>Enumeration, bullet points and lists</h2>\n\n<p>Making lists is pretty straightforward. You have to use the familiar <code class=\"language-latex\">\\begin{...}</code>  \n    and <code class=\"language-latex\">\\end{...}</code> and place some <code class=\"language-latex\">\\item</code> elements\n    in between. Replace <code>...</code> with the list type, which can either be <code>enumerate</code>,\n    <code>itemize</code> or <code>description</code>.\n</p>\n\n<pre><code class=\"language-latex\">\\section{Enumerated list}\n\n\\begin{enumerate}\n\\item Item 1\n\\item Item 2\n\\end{enumerate}\n\n\\section{Bullet point list}\n\n\\begin{itemize}\n\\item Item 1\n\\item Item 2\n\\end{itemize}\n\n\\section{Descriptive list}\n\n\\begin{description}\n\\item [Item 1] Description 1\n\\item [Item 2] Description 2\n\\end{description}\n</code></pre>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_enum-1472395399518.png\" alt=\"Enumerations\" /></p>\n\n<p>Nesting lists is as easy as placing on list inside another, as shown below. Note that the indentation is there purely  \n    for decorative purposes and is not actually required for your editor to render the list correctly.\n</p>\n\n<pre><code class=\"language-latex\">\\begin{enumerate}\n    \\item Item 1\n    \\item Item 2\n    \\begin{itemize}\n        \\item Item 1\n        \\item Item 2\n        \\begin{enumerate}\n            \\item Item 1\n            \\item Item 2\n        \\end{enumerate}\n    \\end{itemize}\n\\end{enumerate}\n</code></pre>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_nested-1472395418425.png\" alt=\"Nested lists\" /></p>\n\n<h2>Page- and line-breaks</h2>\n\n<p>So, line-breaks. Line-breaks are pretty self-explanatory, you insert them when you want to explicitly your editor you  \n    want to jump to a new line. You can use <code class=\"language-latex\">\\\\</code> or <code class=\"language-latex\">\\newline</code>\n    which have the same effect. Note how in the example below, there is no explicit line break between the 2 paragraphs,\n    while there are two between paragraphs 2 and 3 and one between 3 and 4. I omitted the actual paragraph text to make\n    the example clearer.\n</p>\n\n<pre><code class=\"language-latex\">Paragraph 1 text . . .\n\nParagraph 2 text . . .  \n\\\\\n\\\\\nParagraph 3 text . . .  \n\\\\\nParagraph 4 text . . .  \n</code></pre>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_line_breaks-1472395504345.png\" alt=\"LaTeX linebreaks\" /></p>\n\n<p>Page-breaks push all of the content below them to a new page. Simply insert <code  \n        class=\"language-latex\">\\pagebreak</code> wherever you need it and you will achieve the effect similar to the one\n    shown below. There I inserted a <code class=\"language-latex\">\\pagebreak</code> right before the second section.\n</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_page_break-1472395508874.png\" alt=\"LaTeX pagebreaks\" /></p>\n\n<h1>Labels and references</h1>\n\n<p>Referencing various parts of your document becomes super easy with $\\LaTeX$. The basic concept is that if you want to  \n    reference something, you label it using the <code class=\"language-latex\">\\label{label-name}</code> tag, and then\n    reference it elsewhere using <code class=\"language-latex\">\\ref{label-name}</code>. Additionally, you can reference\n    the number of the page the label is on using <code class=\"language-latex\">\\pageref{label-name}</code>, as shown in\n    the example below.\n</p>\n\n<pre><code class=\"language-latex\">\\section{A Section}\nFor more information, refer to section \\ref{subsection-2} on page \\pageref{subsection-2}.\n\n\\section{Another Section}\n\\subsection{A subsection}\n\\subsection{Another subsection}\\label{subsection-2}\n</code></pre>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_ref-1472395452426.png\" alt=\"References\" /></p>\n\n<h1>Packages and comments</h1>\n\n<p>First of all, you can add text that will not be compiled by your editor using the <code>%</code> symbol. Simply  \n    insert it in the beginning of the line you want the editor to ignore and add whatever comments you want to the text.\n    Now, moving on to packages - $\\LaTeX$ relies heavily on additional packages which you can use if you need some\n    additional functionality, such as some weird mathematical symbols or pseudocode highlighting, which makes $\\LaTeX$\n    absolutely amazing. To load a package during compilation, you have to insert <code class=\"language-latex\">\\usepackage{package-name}[optional-settings]</code>\n    right after the <code>\\documentclass{...}</code> tag. Check out the example below for both comment and package\n    usage.\n</p>\n\n<pre><code class=\"language-latex\">\\documentclass{article}\n\n% Package for coloured text\n\\usepackage{color}\n\n% Package for inserting graphics\n\\usepackage{graphicx}\n\n\\begin{document}\n\n% Our content goes here\n\n\\end{document}\n</code></pre>\n\n<h1>Mathematical expressions</h1>\n\n<p>This is a huge topic and there is just too much to mention for this guide to give you a good idea of how to compose  \n    mathematical equations in $\\LaTeX$. If you're looking for some advanced tips, consider looking through <a\n            href=\"https://en.wikibooks.org/wiki/LaTeX/Mathematics\" target=\"_blank\">this page</a>. What I will do is give\n    you several basic tips which you can find below.\n</p>\n\n<p>First of all, tell your editor to use the <code>amsmath</code> package by inserting <code class=\"language-latex\">\\usepackage{amsmath}</code>  \n    in the beginning of the document. Now you can insert inline expressions using <code>\\( ... \\)</code> and block\n    expressions using <code>\\[ ... \\]</code>, as seen in the example. As I said, there is just too much different tags\n    to cover so I suggest you read the link in the above paragraph to find out more.\n</p>\n\n<pre><code class=\"language-latex\">\\documentclass{article}\n\\usepackage{amsmath}\n\\begin{document}\n\nSome text containing an inline \\( \\forall x \\in X, \\exists y \\leq \\epsilon \\) expression.\n\n\\[ \\sqrt[n]{1+x+x^2+x^3+\\ldots}\\quad or \\quad\\int_0^\\infty \\mathrm{e}^{-x}\\,\\mathrm{d}x \\]\n\n\\end{document}\n</code></pre>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/latex_expr-1472395478016.png\" alt=\"Mathematical expressions in LaTeX\" /></p>\n\n<h1>Code and pseudocode</h1>\n\n<p>While this is something you're very unlikely to use (unless you study computer science) I feel the need to elaborate  \n    a bit more on this topic, because I study computer science. First of all, I must say that including code and/or\n    pseudocode in your documents is a real pain in the ass and so far I wasn't able to do it in a way I'd like it.\n</p>\n\n<p>I won't include any examples here to avoid confusing you even further, but I would suggest you start your search <a  \n        href=\"http://tex.stackexchange.com/questions/1375/what-is-a-good-package-for-displaying-algorithms\"\n        target=\"_blank\">here for pseudocode</a> and <a href=\"https://en.wikibooks.org/wiki/LaTeX/Source_Code_Listings\"\n                                                       target=\"_blank\">here for actual code</a>.\n</p>\n\n<h1>Conclusion</h1>\n\n<p>Unfortunately this article only focuses on the very core principles behind $\\LaTeX$ and I wasn't able to cover such  \n    major topics as bibliography or figures, but it must be mentioned that the very purpose of this guide was to give\n    you a gentle introduction as opposed to being a complete $\\LaTeX$ reference. If you have any suggestions or\n    complaints feel free to comment below.\n</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-28 03:38:46","created_by":1,"updated_at":"2016-08-30 15:43:23","updated_by":1,"published_at":"2016-04-30 12:47:00","published_by":1,"amp":null},{"id":53,"uuid":"53583662-64a5-4f8a-8c84-aea33d94c7e8","title":"Higher order functions in C","slug":"higher-order-functions-in-c-2","markdown":"# Abstract\n\nIt's not a secret that for almost all people attempting to learn C pointers are a grey area. I personally was struggling quite a lot understanding them but I was saved by a huge amount of amazing guides on pointer usage you can find online. That said, I still feel like implementation of higher order functions in C deserves more exposure that it currently has and this article is my attempt to contribute to this cause.\n\n> **Note:** In this article I'm gonna assume that you have some experience with C and know what pointers are. Additionally, I will assume you know how to write and compile `.c` files.\n\n# What are higher order functions?\n\n[Higher order functions](https://en.wikipedia.org/wiki/Higher-order_function) take other functions as their arguments or return new functions when they terminate. It might sound confusing especially if you've never seen it being done before but in reality it is really quite simple. Consider the pseudocode below:\n\n```language-lua\nreverse(string)\n    -- Some code to reverse the string\n    return string\n\nuppercase(string)\n    -- Some code to convert string to uppercase\n    return string\n\napply(string, operation)\n    return operation(string)\n\nhello := \"hello\"\n\n-- Reverse the string\nhello := apply(hello, reverse)\n\n-- Convert the string to uppercase\nhello := apply(hello, uppercase)\n```\n\nTo summarise: `apply()` function above takes 2 parameters: a string and an another function. Then, as the name implies, it applies the `operation` to the supplied `string` and returns whatever comes out. This results in a very interesting form of [polymorphism](https://en.wikipedia.org/wiki/Polymorphism_(computer_science)): our `apply()` function can take any `operation` regardless of what it does as long as it accepts a string as an argument and returns the string afterwards.\n\nThe example above looks at the scenario when a function takes other functions as its arguments. Now let's take a look at functions that return new functions:\n\n```language-lua\nmultiplyOperation(coefficient)\n    -- Declare new function that multiplies the\n    -- supplied argument by the coefficient\n    operation(number)\n        return number * coefficient\n    -- Return the new function\n    return operation\n\n-- Function that multiplies everything by 5\nmultiplyBy5 := multiplyOperation(5)\n\n-- This will return 35\nmultipleBy5(7)\n```\n\nAs seen above, `multiplyOperation()` returns a new function that changes its behaviour depending on what value for the `coefficient` has been supplied to `multiplyOperation()`. Keep in mind that the examples above are just pseudocode to give you an idea of what higher order functions are about and C implementation will not necessarily look the same.\n\n# Function pointers in C\n\nTo achieve the functionality discussed in the previous section we're gonna use function pointers, which are pretty straightforward and shouldn't take you too long to wrap your head around. Before we start, remind yourself of these 2 things:\n\n* You can get the address of a variable using the `&` operator, like so: <code class=\"language-c\">int *a = &b;</code> (`a` can now be used as a pointer to `b`). That said, when referencing a function you are allowed to drop the `&` operator. If you still don't have that much experience with pointers, I recommend leaving it in.\n* Before you can access the variable a pointer is pointing to, you must dereference said pointer. Let's take integer pointer `a` from the line above - if I want to use it in a calculation, I need to dereference it using the `*` operator: <code class=\"language-c\">int c = 3 + *a;</code>.\n\n```language-c\n// Required for the `printf()` function\n#include <stdio.h>\n\n// The function we'll be pointing to\nint halve(int number) {\n    return number / 2;\n}\n\nvoid main() {\n    // Declare a pointer to the `halve` function\n    // We say that operation takes 1 int argument\n    // and returns an int when it terminates\n    int (*operation)(int) = &halve;\n\n    // Alternatively, you can drop the `&`:\n    int (*anotherOperation)(int) = halve;\n    // From here onwards, I will always drop the\n    // `&` to make the code a bit more concise\n\n    // Dereference the pointer to `halve` first,\n    // then supply relevant arguments to it\n    int halved = (*operation)(10);\n\n    // Should print `5`, try it yourself\n    printf(\"%d\", halved);\n}\n```\n\nAs you can see in the beginning of the `main()` method, pointers to functions have a rather unusual type declaration. It consists of 3 parts:\n\n1. The type before the parenthesis is the return type of the function the pointer is referencing. \n2. The middle part is the name of the pointer. Note that you have to wrap it into parenthesis to indicate that this a pointer to a function.\n3. The last part contains the types of parameters the function is expecting.\n\nFor example, the type for a pointer to a function that accepts 2 character arrays and returns a double would look as follows: <code class=\"language-c\">double (\\*someFunction)(char\\*, char\\*)</code>.\n\n# Implementing the `map()` function\n\nAs an exercise, let's implement the [infamous `map()` function](https://en.wikipedia.org/wiki/Map_(higher-order_function)). This function takes 2 arguments:\n\n1. Some [unary function](https://en.wikipedia.org/wiki/Unary_function) that accepts an argument of type `A` and returns some value of type `B`.\n2. An array of type `A`. Keep in mind, type `A` can be the same as type `B`.\n\nThe return value is a new array of type `B`. This new array is generated by applying the supplied unary function to every element in the supplied array of type `A`.\n\n## `map()` for integers\n\nTo make our lives easier we will only work with integers (for now). Below you can find the implementation of the `map()` function that only works with unary operations on integers and integer arrays.  \n\n```language-c\n// Required for the `printf()` function\n#include <stdio.h>\n// Required for memory management\n// (`malloc()`, `free()`, etc.)\n#include <stdlib.h>\n\n// Multiply a number by 3\nint triple(int number) {\n    return number * 3;\n}\n\n// A rather complex function definition, read more about it below\nint *map(int (*function)(int), int *array, int size) {\n    // Allocate memory for our new array\n    int *newArray = malloc(sizeof(int) * size);\n\n    int i;\n    // Apply the function to every element of the supplied\n    // array and save the values into the new array\n    for (i = 0; i < size; i++) {\n        newArray[i] = function(array[i]);\n    }\n\n    // Return the pointer to the new array\n    // (you must free the memory after\n    // you're done working with it)\n    return newArray;\n}\n\nvoid main() {\n    // Initial array of size 4\n    int array[4] = {1, 2, 3, 4};\n\n    // Map the array above using the `triple()` function\n    int *tripledArray = map(triple, array, 4);\n\n    int i;\n    // Print the new values\n    for (i = 0; i < 4; i++) {\n        printf(\"%d \", tripledArray[i]);\n    }\n\n    // Don't forget to free the memory afterwards\n    free(tripledArray);\n}\n```\n\nI tried to add comments to all of the important parts but I want to discuss the `map()` function definition separtely. Let's break it down: <code class=\"language-c\">int\\* map(int (\\*function)(int), int\\* array, int length) {...}</code>\n\n* As in any other function, the first part (`int*`) denotes the return type of our `map()`. In this particular case it's a pointer to an integer array.\n* `map` is simply the function name, nothing fancy here.\n* Now the interesting part - function parameters. There are of them:\n    1. <code class=\"language-c\">int (\\*function)(int)</code> Defines a parameter called `function` that is a pointer to a function accepting one integer and returning an integer.\n    2. <code class=\"language-c\">int\\* array</code> A pointer to an integer array over which we'll be iterating.\n    3. <code class=\"language-c\">int size</code> Integer storing the size of the above array.\n\nNow, we can use our newly defined function to \"transform\" integer arrays using some unary function. Unfortunately we did not make it truly polymorphic, that is it only works with integers but there is a very good reason for it: polymorphism in C is quite a complicated topic and it goes beyond the scope of this article. If you're interested in an implementation of the `map()` function that supports generic types, check out [this](http://stackoverflow.com/questions/4047431/implementing-a-generical-map-function-over-arrays-in-c).\n\n# Functions returning functions\n\nThis section will look at the other type of higher order functions, namely functions that return other functions after they terminate. Below you can see the implementation of a function that does exactly that: it returns binary arithmetic operations based on the value of the `type` parameter supplied to it.\n\n```language-c\n// Required for `printf()`\n#include <stdio.h>\n\n// Binary arithmetic functions we'll be\n// returning from `getOperation()`\nint multiply(int x, int y) {\n    return x * y;\n}\nint add(int x, int y) {\n    return x + y;\n}\n\n// Function returning different binary functions\n// based on the supplied integer type.\n// Check below this code block for more info.\nint (*getOperation(int type))(int, int) {\n    switch (type) {\n        case 0:\n            // If type `0` return multiplication\n            return multiply;\n        case 1:\n            // If type `1` return addition\n            return add;\n        default:\n            // If type is not recognised\n            // return addition\n            return add;\n    }\n}\n\nvoid main() {\n    // Numbers which we'll send to our binary functions\n    int x = 4;\n    int y = 2;\n\n    // Getting pointers to binary functions using `getOperation()`\n    int (*multiplication)(int, int) = getOperation(0);\n    int (*addition)(int, int) = getOperation(1);\n\n    // Confirm that correct functions were returned\n    printf(\"Multiplication: %d\\n\", multiplication(x, y));\n    printf(\"Addition: %d\\n\", addition(x, y));\n}\n```\n\nTake a look at the function definition for `getOperation()`: Its return type is \"outside\" and the actual definition that matches the function body is \"inside\" the parentheses. Let's break it down:\n\n```language-c\n      getOperation                      // Name of the function\n      getOperation(int type)            // Parameters the function is expecting\n    (*getOperation(int type))(int, int) // Parameters of the returned function\nint (*getOperation(int type))(int, int) // Return type of the returned function\n```\n\n# Conclusion\n\nThe aim of this article is to give you a basic idea of how to define functions that accept other functions as parameters and return new functions. If after having read it you feel like you can do it, then this article has successfully fulfilled its purpose. Otherwise, feel free to comment below for help.","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>It's not a secret that for almost all people attempting to learn C pointers are a grey area. I personally was struggling quite a lot understanding them but I was saved by a huge amount of amazing guides on pointer usage you can find online. That said, I still feel like implementation of higher order functions in C deserves more exposure that it currently has and this article is my attempt to contribute to this cause.</p>\n\n<blockquote>\n  <p><strong>Note:</strong> In this article I'm gonna assume that you have some experience with C and know what pointers are. Additionally, I will assume you know how to write and compile <code>.c</code> files.</p>\n</blockquote>\n\n<h1 id=\"whatarehigherorderfunctions\">What are higher order functions?</h1>\n\n<p><a href=\"https://en.wikipedia.org/wiki/Higher-order_function\">Higher order functions</a> take other functions as their arguments or return new functions when they terminate. It might sound confusing especially if you've never seen it being done before but in reality it is really quite simple. Consider the pseudocode below:</p>\n\n<pre><code class=\"language-lua\">reverse(string)  \n    -- Some code to reverse the string\n    return string\n\nuppercase(string)  \n    -- Some code to convert string to uppercase\n    return string\n\napply(string, operation)  \n    return operation(string)\n\nhello := \"hello\"\n\n-- Reverse the string\nhello := apply(hello, reverse)\n\n-- Convert the string to uppercase\nhello := apply(hello, uppercase)  \n</code></pre>\n\n<p>To summarise: <code>apply()</code> function above takes 2 parameters: a string and an another function. Then, as the name implies, it applies the <code>operation</code> to the supplied <code>string</code> and returns whatever comes out. This results in a very interesting form of <a href=\"https://en.wikipedia.org/wiki/Polymorphism_(computer_science)\">polymorphism</a>: our <code>apply()</code> function can take any <code>operation</code> regardless of what it does as long as it accepts a string as an argument and returns the string afterwards.</p>\n\n<p>The example above looks at the scenario when a function takes other functions as its arguments. Now let's take a look at functions that return new functions:</p>\n\n<pre><code class=\"language-lua\">multiplyOperation(coefficient)  \n    -- Declare new function that multiplies the\n    -- supplied argument by the coefficient\n    operation(number)\n        return number * coefficient\n    -- Return the new function\n    return operation\n\n-- Function that multiplies everything by 5\nmultiplyBy5 := multiplyOperation(5)\n\n-- This will return 35\nmultipleBy5(7)  \n</code></pre>\n\n<p>As seen above, <code>multiplyOperation()</code> returns a new function that changes its behaviour depending on what value for the <code>coefficient</code> has been supplied to <code>multiplyOperation()</code>. Keep in mind that the examples above are just pseudocode to give you an idea of what higher order functions are about and C implementation will not necessarily look the same.</p>\n\n<h1 id=\"functionpointersinc\">Function pointers in C</h1>\n\n<p>To achieve the functionality discussed in the previous section we're gonna use function pointers, which are pretty straightforward and shouldn't take you too long to wrap your head around. Before we start, remind yourself of these 2 things:</p>\n\n<ul>\n<li>You can get the address of a variable using the <code>&amp;</code> operator, like so: <code class=\"language-c\">int *a = &b;</code> (<code>a</code> can now be used as a pointer to <code>b</code>). That said, when referencing a function you are allowed to drop the <code>&amp;</code> operator. If you still don't have that much experience with pointers, I recommend leaving it in.</li>\n<li>Before you can access the variable a pointer is pointing to, you must dereference said pointer. Let's take integer pointer <code>a</code> from the line above - if I want to use it in a calculation, I need to dereference it using the <code>*</code> operator: <code class=\"language-c\">int c = 3 + *a;</code>.</li>\n</ul>\n\n<pre><code class=\"language-c\">// Required for the `printf()` function\n#include &lt;stdio.h&gt;\n\n// The function we'll be pointing to\nint halve(int number) {  \n    return number / 2;\n}\n\nvoid main() {  \n    // Declare a pointer to the `halve` function\n    // We say that operation takes 1 int argument\n    // and returns an int when it terminates\n    int (*operation)(int) = &amp;halve;\n\n    // Alternatively, you can drop the `&amp;`:\n    int (*anotherOperation)(int) = halve;\n    // From here onwards, I will always drop the\n    // `&amp;` to make the code a bit more concise\n\n    // Dereference the pointer to `halve` first,\n    // then supply relevant arguments to it\n    int halved = (*operation)(10);\n\n    // Should print `5`, try it yourself\n    printf(\"%d\", halved);\n}\n</code></pre>\n\n<p>As you can see in the beginning of the <code>main()</code> method, pointers to functions have a rather unusual type declaration. It consists of 3 parts:</p>\n\n<ol>\n<li>The type before the parenthesis is the return type of the function the pointer is referencing.  </li>\n<li>The middle part is the name of the pointer. Note that you have to wrap it into parenthesis to indicate that this a pointer to a function.  </li>\n<li>The last part contains the types of parameters the function is expecting.</li>\n</ol>\n\n<p>For example, the type for a pointer to a function that accepts 2 character arrays and returns a double would look as follows: <code class=\"language-c\">double (*someFunction)(char*, char*)</code>.</p>\n\n<h1 id=\"implementingthemapfunction\">Implementing the <code>map()</code> function</h1>\n\n<p>As an exercise, let's implement the <a href=\"https://en.wikipedia.org/wiki/Map_(higher-order_function)\">infamous <code>map()</code> function</a>. This function takes 2 arguments:</p>\n\n<ol>\n<li>Some <a href=\"https://en.wikipedia.org/wiki/Unary_function\">unary function</a> that accepts an argument of type <code>A</code> and returns some value of type <code>B</code>.  </li>\n<li>An array of type <code>A</code>. Keep in mind, type <code>A</code> can be the same as type <code>B</code>.</li>\n</ol>\n\n<p>The return value is a new array of type <code>B</code>. This new array is generated by applying the supplied unary function to every element in the supplied array of type <code>A</code>.</p>\n\n<h2 id=\"mapforintegers\"><code>map()</code> for integers</h2>\n\n<p>To make our lives easier we will only work with integers (for now). Below you can find the implementation of the <code>map()</code> function that only works with unary operations on integers and integer arrays.  </p>\n\n<pre><code class=\"language-c\">// Required for the `printf()` function\n#include &lt;stdio.h&gt;\n// Required for memory management\n// (`malloc()`, `free()`, etc.)\n#include &lt;stdlib.h&gt;\n\n// Multiply a number by 3\nint triple(int number) {  \n    return number * 3;\n}\n\n// A rather complex function definition, read more about it below\nint *map(int (*function)(int), int *array, int size) {  \n    // Allocate memory for our new array\n    int *newArray = malloc(sizeof(int) * size);\n\n    int i;\n    // Apply the function to every element of the supplied\n    // array and save the values into the new array\n    for (i = 0; i &lt; size; i++) {\n        newArray[i] = function(array[i]);\n    }\n\n    // Return the pointer to the new array\n    // (you must free the memory after\n    // you're done working with it)\n    return newArray;\n}\n\nvoid main() {  \n    // Initial array of size 4\n    int array[4] = {1, 2, 3, 4};\n\n    // Map the array above using the `triple()` function\n    int *tripledArray = map(triple, array, 4);\n\n    int i;\n    // Print the new values\n    for (i = 0; i &lt; 4; i++) {\n        printf(\"%d \", tripledArray[i]);\n    }\n\n    // Don't forget to free the memory afterwards\n    free(tripledArray);\n}\n</code></pre>\n\n<p>I tried to add comments to all of the important parts but I want to discuss the <code>map()</code> function definition separtely. Let's break it down: <code class=\"language-c\">int* map(int (*function)(int), int* array, int length) {...}</code></p>\n\n<ul>\n<li>As in any other function, the first part (<code>int*</code>) denotes the return type of our <code>map()</code>. In this particular case it's a pointer to an integer array.</li>\n<li><code>map</code> is simply the function name, nothing fancy here.</li>\n<li>Now the interesting part - function parameters. There are of them:\n<ol><li><code class=\"language-c\">int (*function)(int)</code> Defines a parameter called <code>function</code> that is a pointer to a function accepting one integer and returning an integer.</li>\n<li><code class=\"language-c\">int* array</code> A pointer to an integer array over which we'll be iterating.</li>\n<li><code class=\"language-c\">int size</code> Integer storing the size of the above array.</li></ol></li>\n</ul>\n\n<p>Now, we can use our newly defined function to \"transform\" integer arrays using some unary function. Unfortunately we did not make it truly polymorphic, that is it only works with integers but there is a very good reason for it: polymorphism in C is quite a complicated topic and it goes beyond the scope of this article. If you're interested in an implementation of the <code>map()</code> function that supports generic types, check out <a href=\"http://stackoverflow.com/questions/4047431/implementing-a-generical-map-function-over-arrays-in-c\">this</a>.</p>\n\n<h1 id=\"functionsreturningfunctions\">Functions returning functions</h1>\n\n<p>This section will look at the other type of higher order functions, namely functions that return other functions after they terminate. Below you can see the implementation of a function that does exactly that: it returns binary arithmetic operations based on the value of the <code>type</code> parameter supplied to it.</p>\n\n<pre><code class=\"language-c\">// Required for `printf()`\n#include &lt;stdio.h&gt;\n\n// Binary arithmetic functions we'll be\n// returning from `getOperation()`\nint multiply(int x, int y) {  \n    return x * y;\n}\nint add(int x, int y) {  \n    return x + y;\n}\n\n// Function returning different binary functions\n// based on the supplied integer type.\n// Check below this code block for more info.\nint (*getOperation(int type))(int, int) {  \n    switch (type) {\n        case 0:\n            // If type `0` return multiplication\n            return multiply;\n        case 1:\n            // If type `1` return addition\n            return add;\n        default:\n            // If type is not recognised\n            // return addition\n            return add;\n    }\n}\n\nvoid main() {  \n    // Numbers which we'll send to our binary functions\n    int x = 4;\n    int y = 2;\n\n    // Getting pointers to binary functions using `getOperation()`\n    int (*multiplication)(int, int) = getOperation(0);\n    int (*addition)(int, int) = getOperation(1);\n\n    // Confirm that correct functions were returned\n    printf(\"Multiplication: %d\\n\", multiplication(x, y));\n    printf(\"Addition: %d\\n\", addition(x, y));\n}\n</code></pre>\n\n<p>Take a look at the function definition for <code>getOperation()</code>: Its return type is \"outside\" and the actual definition that matches the function body is \"inside\" the parentheses. Let's break it down:</p>\n\n<pre><code class=\"language-c\">      getOperation                      // Name of the function\n      getOperation(int type)            // Parameters the function is expecting\n    (*getOperation(int type))(int, int) // Parameters of the returned function\nint (*getOperation(int type))(int, int) // Return type of the returned function  \n</code></pre>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>The aim of this article is to give you a basic idea of how to define functions that accept other functions as parameters and return new functions. If after having read it you feel like you can do it, then this article has successfully fulfilled its purpose. Otherwise, feel free to comment below for help.</p>","image":"https://foxypanda-ghost.s3.amazonaws.com/2016/Sep/Capture-1472851050302.PNG","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-09-01 21:41:30","created_by":1,"updated_at":"2016-09-02 21:17:44","updated_by":1,"published_at":"2016-09-02 20:44:20","published_by":1,"amp":null},{"id":54,"uuid":"cdf58dc7-dab1-44bd-82bc-9aae4d015cdd","title":"MyAnimeTimeline and Kuristina","slug":"my-anime-timeline-and-kuristina-2","markdown":"# Abstract\n\nOne day I was just looking through my anime list and realised I have specified the start and finish dates for every title I watched. I immediately thought that it would be neat to map all the titles I completed on a timeline to see how my tastes changed over time, which anime I watched first, last, in which season I watched the most and so on. This is how MyAnimeTimeline was born and, as a side product, I made a small API tool called Kuristina. Find out more about both of them below.\n\n# Kuristina, or Fetching anime lists\n\n","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>One day I was just looking through my anime list and realised I have specified the start and finish dates for every title I watched. I immediately thought that it would be neat to map all the titles I completed on a timeline to see how my tastes changed over time, which anime I watched first, last, in which season I watched the most and so on. This is how MyAnimeTimeline was born and, as a side product, I made a small API tool called Kuristina. Find out more about both of them below.</p>\n\n<h1 id=\"kuristinaorfetchinganimelists\">Kuristina, or Fetching anime lists</h1>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-10-22 14:35:12","created_by":1,"updated_at":"2016-10-22 21:29:09","updated_by":1,"published_at":null,"published_by":null,"amp":null},{"id":55,"uuid":"65895206-1fac-42ee-bd10-b80398f331b9","title":"COMP207P Compilers Guidelines Part 1: Lexing and Parsing","slug":"comp207p-compilers-coursework-guidelines-2","markdown":"# Abstract\n\nDuring my 2nd year as a computer scientist at UCL I got a chance to work on an amazing compilers coursework. It was a part of COMP207P Compilers module and together with 2 of my teammates I was faced with a challenge to develop the compiler front-end for a fictitious $\\tilde{Z}$ language.\n\nIn this article I'll be giving general guidelines on how to get started with this coursework. It probably won't make much sense to you if you're not a computer science student at UCL, but I do give some useful tips for using JFlex and CUP with Intellij Idea so you might wanna check that part out. Unfortunately I cannot talk about the actual implementation because of plagiarism concerns.\n\nGaps in knowledge can vary a lot from person to person so I'll cover the basics of pretty much everything that you might need in this coursework. Hopefully, if you happen to be my teammate some time in the future, you'll know all of this :^) . Keep in mind that I'm working on Linux so some of the guidelines here might not work for you, in which case I suggest you use one of the Linux machines in CS labs.\n\nFinally, keep in mind that I won't be the one marking your coursework and I take no responsibility whatsoever for whatever happens to be the outcome. That said, I've explicitly asked for [Earl Barr's](http://earlbarr.com/) permission to share these guidelines and my test runner, which you'll find below.\n\n> This article talks about the first piece of coursework in the COMP207P course, the one concerned with compiler's frontend. The article about the second part of the coursework can be found [here](https://foxypanda.me/comp207p-compilers-guidelines-part-2-java-bytecode-optimisation/).\n\n<!-- -->\n> Please feel free to comment below or let me know through other media if you have any concerns or suggestions about the guidelines on this page. I will try to fix them to the best of my ability.\n\n# Setting up the project\n\nYou'll most definitely be working in groups so you absolutely **must** use Git. I'm gonna talk about how to setup a Git repo for this coursework. In the end I'll mention continuous integration (CI) but it's up to you whether you're gonna use it or not.\n\n## Setting up Git\n\nFirst of all, setup a Git repository. You can use [GitHub](https://github.com/), [GitLab.com](https://gitlab.com/users/sign_in), or [UCL CS GitLab](https://gitlab.cs.ucl.ac.uk/users/sign_in), whichever you prefer - at the end of the day they all use Git. *That said, remember that you'll most likely have to submit your coursework through UCL CS GitLab. Knowing this, I personally went with GitHub anyway, at least for the development phase.*\n\nInstall Git and setup a repository for your project (following tutorials from the service you chose if needed) and `git clone` it to somewhere on your local machine. **I strongly suggest** you look at [this guide](http://rogerdudler.github.io/git-guide/) if you lack experience with Git, your teammates will thank me later. Additionally, if you want a nice way to manage the collaboration process, take a look [at this branching model](http://nvie.com/posts/a-successful-git-branching-model/).\n\nFrom here onward I will assume that you have `git` installed and your repository is in a folder called `comp207p` (replace with whatever name you chose). That is, if you run `git status` when inside directory `comp207p` you should see something like this:\n\n<pre class=\"command-line\" data-user=\"tim\" data-host=\"dmnt\" data-output=\"2-3\"><code class=\"language-bash\">git status\nOn branch master\nnothing to commit, working tree clean</code></pre>\n\nTo make life easier for yourself and your teammates, you'll need to add a `.gitignore` file. Unless you know how to make your own, I suggest using [the one I put on GitHub Gist](https://gist.github.com/TimboKZ/868cc0a23fdd217da2e581e59531172b). Simple create a `.gitignore` file in your repo directory (e.g. `comp207p/.gitignore`) and paste the contents of the Gist in. This will make sure you don't clutter the repository by pushing temp/generated files.\n\n## Getting the source code\n\nFirst of all, grab the `project.zip` from the [Moodle page](https://moodle.ucl.ac.uk/mod/folder/view.php?id=1864623) for this coursework (only available to UCL students). Unzip it into the folder with your Git repo (`comp207p` in my case). The structure you'll have would look something like this:\n\n```language-clike\n├── bin\n├── lib\n│   ├── java-cup-11b.jar\n│   ├── java-cup-11b-runtime.jar\n│   └── jflex-1.6.1.jar\n├── Makefile\n├── README.md\n├── runTests.sh\n├── src\n│   ├── SC.java\n│   ├── Tests.java\n│   └── UnitTests.java\n├── test_checker.py\n└── tests\n    └── open\n        ├── // Bunch of tests\n        └── ...\n```\n\nTechnically, you can begin writing everything from scratch, but to get some code to start with you can download the *Compiler demo* from [COMP207P Moodle page](https://moodle.ucl.ac.uk/course/view.php?id=10783), which will give you an archive called `tool-demo.tar.gz`. From this archive you'll only need 2 files, `Lexer.lex` and `Parser.cup`, both of which are located in the `src/` folder. Copy these 2 files into the `src/` folder of your project. \n\n> **Warning:** The `Lexer.lex` and `Parser.cup` we used accept a **different language**, so you will definitely need to change and delete some parts.\n\nTo make sure the project compiles you need to define a function called `syntax_error` and a boolean called `syntaxErrors`, as described in paragraphs 21 and 22 of `project.pdf` supplied with coursework source. Somewhere between `parser code {:` and `:}` in your `Parser.cup` add this:\n\n```language-java\npublic boolean syntaxErrors;\npublic void syntax_error(Symbol current_token) {\n    report_error(\n        \"Syntax error at line \" + (current_token.left+1) + \", column \"\n+ current_token.right, null\n    );\n}\n```\n\nFinally, on line 23 in `src/SC.java` you might want to uncomment `e.printStackTrace();` so that your parser reports Java errors (and not just Parser errors). *Remember to comment it out again before submitting.*\n\n## Preparing your IDE\n\nWhile you're free to use whatever editor/IDE you like (especially if it's Vim :>) I'd strongly suggest using [IntelliJ Idea](https://www.jetbrains.com/idea/) by JetBrains. If you're a student you get a free license for almost all JetBrains software, including IntelliJ Idea Ultimate. The steps below only apply to this IDE.\n\nI'm gonna assume you got yourself a license and installed Idea. To make working with JFlex and CUP easier you will need 2 Idea plugins - `JFlex Support` and `Cup Support`. Install them by going to `File > Settings > Plugins > Browser repositories...` and searching for an appropriate title. You'll also need `BashSupport` to run tests and `.ignore` plugin might prove useful for development in general.\n\nAfter you restart Idea the plugins will begin to work. Syntax highlighting and auto-completion for `.cup` should turn on automatically. For `.lex` files, you might have to enable it manually by right-clicking on `Lexer.lex` in Project browser, choosing *Associate with File Type* and picking *JFlex* from the list.\n\n# Testing and CI\n\nGiven you have Java 8 installed, you now can run `make` and `make test` in your repo to run the test suite provided with the source of the coursework. Unsurprisingly, most of them will fail. Technically, this is enough to get you going and you can jump straight to the development process. That said, you might find my approach to testing a bit more convenient, I'll talk more about it below.\n\n## My approach to testing\n\nI like pretty console output so I wrote a test runner which I quite modestly called `tim-test.sh`, it looks something like this:\n\n<img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/COMP207_test_runner-1487358357506.png\" alt=\"tim-test.sh\" style=\"border: solid 1px #25d7e5\">\n\nIt recursively iterates over directories you specify and runs tests, using `tests/custom/` directory as the default. It can also run a single test, I'll talk more about it below, but if you want to use it straight away you can find [the script on GitHub Gist](https://gist.github.com/TimboKZ/93cf9d247d18882b6bb6127195f72a1b).\n\nTo use the test runner, paste the contents of the Gist mentioned above into a file called `tim-test.sh` (or any other name you want, really) in the root of your project. Make sure it's executable by running `chmod +x tim-test.sh` and you're good to go. Running `./tim-test.sh` without any parameters will give you usage instructions.\n\nTo see `tim-test.sh` in action, let's create 3 very basic tests and put them into `tests/custom/`. By the way, all of this done can be done without leaving IntelliJ Idea using the Project browser. First one, `tests/custom/n-empty-main.s`:\n\n```language-clike\nmain {\n};\n```\n\nSecond, `tests/custom/p-main.s`:\n\n```language-clike\nmain { print 0; };\n```\n\nAnd finally, third, `tests/custom/i-p-main-read.s`:\n\n```language-clike\nmain { read test; };\n```\n\nNow you can run tests by executing `./tim-test.sh all`, `./tim-test.sh dir <path-to-test-dir>` or `./tim-test.sh one <path-to-test-file>`. You should get the output similar to the one seen below.\n<pre class=\"command-line\" data-user=\"tim\" data-host=\"dmnt\" data-output=\"2-100\"><code class=\"language-bash\">./tim-test.sh all\n■━━━━━━━━━━━━━■\nRebuilding project before testing...\n■━━━━━━━━━━━━━■\n\n# `make` output\n# ...\n\n■━━━━━━━━━━━━━■\nStarting tests!\n■━━━━━━━━━━━━━■\n\n┏━■ ./tests/custom/ [3 tests]\n┣━━ IGNR i-p-main-read.s\n┣━━ PASS n-empty-main.s\n┗━┓ FAIL p-main.s\n   ┗━ Error: Was supposed to succeed but failed.\n          Syntax error at line 1, column 5 # ... etc.\n\n■━━━━━━━━━━━━━■\nSome tests failed!\n1 succeeded, 1 failed, 1 ignored.\n■━━━━━━━━━━━━━■</code></pre>\n\nTest files with names beginning with `p` are expected to be parsed successfully, `n` should fail to parse and `i` will not be run but will still be displayed in output. Keep in mind that `tim-test.sh` runs `make clean` and `make` before running tests, so you don't have to manually recompile the source.\n\nIf you're using IntelliJ Idea and have the `BashSupport` plugin installed, you can automate the process by [creating a Run configuration](https://www.jetbrains.com/help/idea/2016.3/creating-and-editing-run-debug-configurations.html). Make sure you choose the Bash preset and set settings to something similar to the picture below. Once you're done, you can quickly execute tests using `Shift + F10` shortcut without ever leaving the editor.\n\n![tim-test.sh run configuration in Intellij Idea](https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/tim_test_config-1487359938614.png)\n\n## Continuous integration\n\nCI is a bit out of scope of this article so I'm not gonna talk much about it. I personally use [Travis CI](https://travis-ci.com/) with GitHub, but there are other solutions like [GitLab CI](https://about.gitlab.com/gitlab-ci/). If you're using `tim-test.sh`, here's an example `.travis.yml` config:\n\n```language-yaml\nlanguage: java\njdk:\n  - oraclejdk8\nscript:\n - \"cd $TRAVIS_BUILD_DIR\"\n - \"./tim-test.sh all\"\n```\n\nThe only dependency is the JDK, because `tim-test.sh` only uses Shell scripting. If you want to use `make` and `make test` for CI, make sure to specify Python as a dependency.\n\n# Conclusion\n\nSo by now you should have a Git project set up, proper JFlex and Java CUP highlighting in Intellij Idea and testing pipeline that uses `tim-test.sh`. Now you just have to develop a working lexer and parser for $\\tilde{Z}$, which is the easy part :>.\n\nMake sure you understand the basics of JFlex and Java CUP before you start. Also, please report any issues you find with this article are `tim-test.sh` so I can fix them before someone else gets affected.","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>During my 2nd year as a computer scientist at UCL I got a chance to work on an amazing compilers coursework. It was a part of COMP207P Compilers module and together with 2 of my teammates I was faced with a challenge to develop the compiler front-end for a fictitious $\\tilde{Z}$ language.</p>\n\n<p>In this article I'll be giving general guidelines on how to get started with this coursework. It probably won't make much sense to you if you're not a computer science student at UCL, but I do give some useful tips for using JFlex and CUP with Intellij Idea so you might wanna check that part out. Unfortunately I cannot talk about the actual implementation because of plagiarism concerns.</p>\n\n<p>Gaps in knowledge can vary a lot from person to person so I'll cover the basics of pretty much everything that you might need in this coursework. Hopefully, if you happen to be my teammate some time in the future, you'll know all of this :^) . Keep in mind that I'm working on Linux so some of the guidelines here might not work for you, in which case I suggest you use one of the Linux machines in CS labs.</p>\n\n<p>Finally, keep in mind that I won't be the one marking your coursework and I take no responsibility whatsoever for whatever happens to be the outcome. That said, I've explicitly asked for <a href=\"http://earlbarr.com/\">Earl Barr's</a> permission to share these guidelines and my test runner, which you'll find below.</p>\n\n<blockquote>\n  <p>This article talks about the first piece of coursework in the COMP207P course, the one concerned with compiler's frontend. The article about the second part of the coursework can be found <a href=\"https://foxypanda.me/comp207p-compilers-guidelines-part-2-java-bytecode-optimisation/\">here</a>.</p>\n</blockquote>\n\n<!-- -->  \n\n<blockquote>\n  <p>Please feel free to comment below or let me know through other media if you have any concerns or suggestions about the guidelines on this page. I will try to fix them to the best of my ability.</p>\n</blockquote>\n\n<h1 id=\"settinguptheproject\">Setting up the project</h1>\n\n<p>You'll most definitely be working in groups so you absolutely <strong>must</strong> use Git. I'm gonna talk about how to setup a Git repo for this coursework. In the end I'll mention continuous integration (CI) but it's up to you whether you're gonna use it or not.</p>\n\n<h2 id=\"settingupgit\">Setting up Git</h2>\n\n<p>First of all, setup a Git repository. You can use <a href=\"https://github.com/\">GitHub</a>, <a href=\"https://gitlab.com/users/sign_in\">GitLab.com</a>, or <a href=\"https://gitlab.cs.ucl.ac.uk/users/sign_in\">UCL CS GitLab</a>, whichever you prefer - at the end of the day they all use Git. <em>That said, remember that you'll most likely have to submit your coursework through UCL CS GitLab. Knowing this, I personally went with GitHub anyway, at least for the development phase.</em></p>\n\n<p>Install Git and setup a repository for your project (following tutorials from the service you chose if needed) and <code>git clone</code> it to somewhere on your local machine. <strong>I strongly suggest</strong> you look at <a href=\"http://rogerdudler.github.io/git-guide/\">this guide</a> if you lack experience with Git, your teammates will thank me later. Additionally, if you want a nice way to manage the collaboration process, take a look <a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">at this branching model</a>.</p>\n\n<p>From here onward I will assume that you have <code>git</code> installed and your repository is in a folder called <code>comp207p</code> (replace with whatever name you chose). That is, if you run <code>git status</code> when inside directory <code>comp207p</code> you should see something like this:</p>\n\n<pre class=\"command-line\" data-user=\"tim\" data-host=\"dmnt\" data-output=\"2-3\"><code class=\"language-bash\">git status  \nOn branch master  \nnothing to commit, working tree clean</code></pre>\n\n<p>To make life easier for yourself and your teammates, you'll need to add a <code>.gitignore</code> file. Unless you know how to make your own, I suggest using <a href=\"https://gist.github.com/TimboKZ/868cc0a23fdd217da2e581e59531172b\">the one I put on GitHub Gist</a>. Simple create a <code>.gitignore</code> file in your repo directory (e.g. <code>comp207p/.gitignore</code>) and paste the contents of the Gist in. This will make sure you don't clutter the repository by pushing temp/generated files.</p>\n\n<h2 id=\"gettingthesourcecode\">Getting the source code</h2>\n\n<p>First of all, grab the <code>project.zip</code> from the <a href=\"https://moodle.ucl.ac.uk/mod/folder/view.php?id=1864623\">Moodle page</a> for this coursework (only available to UCL students). Unzip it into the folder with your Git repo (<code>comp207p</code> in my case). The structure you'll have would look something like this:</p>\n\n<pre><code class=\"language-clike\">├── bin\n├── lib\n│   ├── java-cup-11b.jar\n│   ├── java-cup-11b-runtime.jar\n│   └── jflex-1.6.1.jar\n├── Makefile\n├── README.md\n├── runTests.sh\n├── src\n│   ├── SC.java\n│   ├── Tests.java\n│   └── UnitTests.java\n├── test_checker.py\n└── tests\n    └── open\n        ├── // Bunch of tests\n        └── ...\n</code></pre>\n\n<p>Technically, you can begin writing everything from scratch, but to get some code to start with you can download the <em>Compiler demo</em> from <a href=\"https://moodle.ucl.ac.uk/course/view.php?id=10783\">COMP207P Moodle page</a>, which will give you an archive called <code>tool-demo.tar.gz</code>. From this archive you'll only need 2 files, <code>Lexer.lex</code> and <code>Parser.cup</code>, both of which are located in the <code>src/</code> folder. Copy these 2 files into the <code>src/</code> folder of your project. </p>\n\n<blockquote>\n  <p><strong>Warning:</strong> The <code>Lexer.lex</code> and <code>Parser.cup</code> we used accept a <strong>different language</strong>, so you will definitely need to change and delete some parts.</p>\n</blockquote>\n\n<p>To make sure the project compiles you need to define a function called <code>syntax_error</code> and a boolean called <code>syntaxErrors</code>, as described in paragraphs 21 and 22 of <code>project.pdf</code> supplied with coursework source. Somewhere between <code>parser code {:</code> and <code>:}</code> in your <code>Parser.cup</code> add this:</p>\n\n<pre><code class=\"language-java\">public boolean syntaxErrors;  \npublic void syntax_error(Symbol current_token) {  \n    report_error(\n        \"Syntax error at line \" + (current_token.left+1) + \", column \"\n+ current_token.right, null\n    );\n}\n</code></pre>\n\n<p>Finally, on line 23 in <code>src/SC.java</code> you might want to uncomment <code>e.printStackTrace();</code> so that your parser reports Java errors (and not just Parser errors). <em>Remember to comment it out again before submitting.</em></p>\n\n<h2 id=\"preparingyouride\">Preparing your IDE</h2>\n\n<p>While you're free to use whatever editor/IDE you like (especially if it's Vim :>) I'd strongly suggest using <a href=\"https://www.jetbrains.com/idea/\">IntelliJ Idea</a> by JetBrains. If you're a student you get a free license for almost all JetBrains software, including IntelliJ Idea Ultimate. The steps below only apply to this IDE.</p>\n\n<p>I'm gonna assume you got yourself a license and installed Idea. To make working with JFlex and CUP easier you will need 2 Idea plugins - <code>JFlex Support</code> and <code>Cup Support</code>. Install them by going to <code>File &gt; Settings &gt; Plugins &gt; Browser repositories...</code> and searching for an appropriate title. You'll also need <code>BashSupport</code> to run tests and <code>.ignore</code> plugin might prove useful for development in general.</p>\n\n<p>After you restart Idea the plugins will begin to work. Syntax highlighting and auto-completion for <code>.cup</code> should turn on automatically. For <code>.lex</code> files, you might have to enable it manually by right-clicking on <code>Lexer.lex</code> in Project browser, choosing <em>Associate with File Type</em> and picking <em>JFlex</em> from the list.</p>\n\n<h1 id=\"testingandci\">Testing and CI</h1>\n\n<p>Given you have Java 8 installed, you now can run <code>make</code> and <code>make test</code> in your repo to run the test suite provided with the source of the coursework. Unsurprisingly, most of them will fail. Technically, this is enough to get you going and you can jump straight to the development process. That said, you might find my approach to testing a bit more convenient, I'll talk more about it below.</p>\n\n<h2 id=\"myapproachtotesting\">My approach to testing</h2>\n\n<p>I like pretty console output so I wrote a test runner which I quite modestly called <code>tim-test.sh</code>, it looks something like this:</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/COMP207_test_runner-1487358357506.png\" alt=\"tim-test.sh\" style=\"border: solid 1px #25d7e5\"></p>\n\n<p>It recursively iterates over directories you specify and runs tests, using <code>tests/custom/</code> directory as the default. It can also run a single test, I'll talk more about it below, but if you want to use it straight away you can find <a href=\"https://gist.github.com/TimboKZ/93cf9d247d18882b6bb6127195f72a1b\">the script on GitHub Gist</a>.</p>\n\n<p>To use the test runner, paste the contents of the Gist mentioned above into a file called <code>tim-test.sh</code> (or any other name you want, really) in the root of your project. Make sure it's executable by running <code>chmod +x tim-test.sh</code> and you're good to go. Running <code>./tim-test.sh</code> without any parameters will give you usage instructions.</p>\n\n<p>To see <code>tim-test.sh</code> in action, let's create 3 very basic tests and put them into <code>tests/custom/</code>. By the way, all of this done can be done without leaving IntelliJ Idea using the Project browser. First one, <code>tests/custom/n-empty-main.s</code>:</p>\n\n<pre><code class=\"language-clike\">main {  \n};\n</code></pre>\n\n<p>Second, <code>tests/custom/p-main.s</code>:</p>\n\n<pre><code class=\"language-clike\">main { print 0; };  \n</code></pre>\n\n<p>And finally, third, <code>tests/custom/i-p-main-read.s</code>:</p>\n\n<pre><code class=\"language-clike\">main { read test; };  \n</code></pre>\n\n<p>Now you can run tests by executing <code>./tim-test.sh all</code>, <code>./tim-test.sh dir &lt;path-to-test-dir&gt;</code> or <code>./tim-test.sh one &lt;path-to-test-file&gt;</code>. You should get the output similar to the one seen below.  </p>\n\n<pre class=\"command-line\" data-user=\"tim\" data-host=\"dmnt\" data-output=\"2-100\"><code class=\"language-bash\">./tim-test.sh all  \n■━━━━━━━━━━━━━■\nRebuilding project before testing...  \n■━━━━━━━━━━━━━■\n\n# `make` output\n# ...\n\n■━━━━━━━━━━━━━■\nStarting tests!  \n■━━━━━━━━━━━━━■\n\n┏━■ ./tests/custom/ [3 tests]\n┣━━ IGNR i-p-main-read.s\n┣━━ PASS n-empty-main.s\n┗━┓ FAIL p-main.s\n   ┗━ Error: Was supposed to succeed but failed.\n          Syntax error at line 1, column 5 # ... etc.\n\n■━━━━━━━━━━━━━■\nSome tests failed!  \n1 succeeded, 1 failed, 1 ignored.  \n■━━━━━━━━━━━━━■</code></pre>\n\n<p>Test files with names beginning with <code>p</code> are expected to be parsed successfully, <code>n</code> should fail to parse and <code>i</code> will not be run but will still be displayed in output. Keep in mind that <code>tim-test.sh</code> runs <code>make clean</code> and <code>make</code> before running tests, so you don't have to manually recompile the source.</p>\n\n<p>If you're using IntelliJ Idea and have the <code>BashSupport</code> plugin installed, you can automate the process by <a href=\"https://www.jetbrains.com/help/idea/2016.3/creating-and-editing-run-debug-configurations.html\">creating a Run configuration</a>. Make sure you choose the Bash preset and set settings to something similar to the picture below. Once you're done, you can quickly execute tests using <code>Shift + F10</code> shortcut without ever leaving the editor.</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/tim_test_config-1487359938614.png\" alt=\"tim-test.sh run configuration in Intellij Idea\" /></p>\n\n<h2 id=\"continuousintegration\">Continuous integration</h2>\n\n<p>CI is a bit out of scope of this article so I'm not gonna talk much about it. I personally use <a href=\"https://travis-ci.com/\">Travis CI</a> with GitHub, but there are other solutions like <a href=\"https://about.gitlab.com/gitlab-ci/\">GitLab CI</a>. If you're using <code>tim-test.sh</code>, here's an example <code>.travis.yml</code> config:</p>\n\n<pre><code class=\"language-yaml\">language: java  \njdk:  \n  - oraclejdk8\nscript:  \n - \"cd $TRAVIS_BUILD_DIR\"\n - \"./tim-test.sh all\"\n</code></pre>\n\n<p>The only dependency is the JDK, because <code>tim-test.sh</code> only uses Shell scripting. If you want to use <code>make</code> and <code>make test</code> for CI, make sure to specify Python as a dependency.</p>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>So by now you should have a Git project set up, proper JFlex and Java CUP highlighting in Intellij Idea and testing pipeline that uses <code>tim-test.sh</code>. Now you just have to develop a working lexer and parser for $\\tilde{Z}$, which is the easy part :>.</p>\n\n<p>Make sure you understand the basics of JFlex and Java CUP before you start. Also, please report any issues you find with this article are <code>tim-test.sh</code> so I can fix them before someone else gets affected.</p>","image":"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/comp207p_post-1487360437234.png","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":"COMP207P Compilers Coursework Guidelines - JFlex and Java CUP with Intellij Idea","meta_description":"In this article I'm giving general advice about UCL Computer Science COMP207P coursework, covering Git, CI, JFlex, Java CUP, Intellij Idea and tim-test.sh.","author_id":1,"created_at":"2017-02-17 16:50:59","created_by":1,"updated_at":"2017-04-06 21:53:06","updated_by":1,"published_at":"2017-02-17 19:38:03","published_by":1,"amp":null},{"id":56,"uuid":"c4f7260c-47b8-4366-9b3e-2be0a4663831","title":"Spark: Ambient Lighting System","slug":"spark-2","markdown":"# Abstract\n\nI have recently put together a new rig, and it just so happened I had several LED strips leftover from one of my previous projects. Sadly, I couldn't get my hands on a monitor with built-in ambient lighting so I decided to build my own solution. This was the core idea for Spark, an ambient lighting system built using an Arduino, Java and some LED strips.\n\n# Development\n\nInitially I was going to use C++ or C# with Visual Studio to make a Windows application, but then decided to stick with Java as a way quicker and simpler solution for this particular problem, especially considering the limited amount of time I could invest into this project. Another unfortunate outcome of this was that I did not have the time to bring both hardware and software for this project to a high enough level of quality, so I would not recommend reusing the source code for this project anywhere else. Instead, consider it to be something like a proof of concept and maybe an inspiration for similar ideas.\n\nThe whole setup essentially consists of 2 major parts: The host machine, which extracts the \"average\" colour from the current image on the screen, serialises it and sends it to Arduino over USB serial, and Arduino itself which deserialises the data and adjusts the voltages on the LED strip to change the colour and brightness of LEDs. You can see a picture of the Arduino with a bread board and some MOSFETs, a 12v battery and an LED strip below.\n\n![Arduino with a bread board, some MOSFETs, 12v battery and an LED strip.](https://foxypanda-ghost.s3.amazonaws.com/2016/Nov/IMG_2548-1478748066122.jpg)\n\nThe Java source code is pretty self explanatory. The code takes a screenshot of the screen every set interval of time using an [AWT Robot](https://docs.oracle.com/javase/8/docs/api/java/awt/Robot.html) and extracts the \"average\" colour from screenshot by averaging red, green and blue channels for every 5th or so pixel. Then, it converts the intensity of each RGB channel from 0-255 to 0-36 scale and produces a string of length 3 and format `RGB`, where `R`, `G` and `B` are intensities in base 36 (more about it below). Once the string is ready, it is sent to the Arduino over serial.\n\nTo send less characters over serial I decided to use base 36 numbers, which basically utilises all 10 digits from 0 to 9 and all lowercase letters in the English alphabet. When Arduino receives the RGB string, it converts it back to base 10 and to 0-255 scale. Once this is done, it changes the voltages on the pins corresponding to each colour to match the intensity extracted from the string. Then, using some MOSFET magic on a bread board, 12v battery powers the LED strip which lits up in our desired colour.\n\nI am aware that everything described above is far from perfect, but sadly at the time I didn't have the chance to improve anything. I will definitely be revisiting this idea in the future to come up with a better solution.\n\n# Demo and source code\n\nAll of the source code can be found in [Spark's GitHub repo](https://github.com/TimboKZ/spark). Below is a short demonstration of the system in action. Keep in mind the Ambient lighting system is only controlling the LEDs behind the monitor, everything else is controlled by other 3rd party software.\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/V-m6wq622P0\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>I have recently put together a new rig, and it just so happened I had several LED strips leftover from one of my previous projects. Sadly, I couldn't get my hands on a monitor with built-in ambient lighting so I decided to build my own solution. This was the core idea for Spark, an ambient lighting system built using an Arduino, Java and some LED strips.</p>\n\n<h1 id=\"development\">Development</h1>\n\n<p>Initially I was going to use C++ or C# with Visual Studio to make a Windows application, but then decided to stick with Java as a way quicker and simpler solution for this particular problem, especially considering the limited amount of time I could invest into this project. Another unfortunate outcome of this was that I did not have the time to bring both hardware and software for this project to a high enough level of quality, so I would not recommend reusing the source code for this project anywhere else. Instead, consider it to be something like a proof of concept and maybe an inspiration for similar ideas.</p>\n\n<p>The whole setup essentially consists of 2 major parts: The host machine, which extracts the \"average\" colour from the current image on the screen, serialises it and sends it to Arduino over USB serial, and Arduino itself which deserialises the data and adjusts the voltages on the LED strip to change the colour and brightness of LEDs. You can see a picture of the Arduino with a bread board and some MOSFETs, a 12v battery and an LED strip below.</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Nov/IMG_2548-1478748066122.jpg\" alt=\"Arduino with a bread board, some MOSFETs, 12v battery and an LED strip.\" /></p>\n\n<p>The Java source code is pretty self explanatory. The code takes a screenshot of the screen every set interval of time using an <a href=\"https://docs.oracle.com/javase/8/docs/api/java/awt/Robot.html\">AWT Robot</a> and extracts the \"average\" colour from screenshot by averaging red, green and blue channels for every 5th or so pixel. Then, it converts the intensity of each RGB channel from 0-255 to 0-36 scale and produces a string of length 3 and format <code>RGB</code>, where <code>R</code>, <code>G</code> and <code>B</code> are intensities in base 36 (more about it below). Once the string is ready, it is sent to the Arduino over serial.</p>\n\n<p>To send less characters over serial I decided to use base 36 numbers, which basically utilises all 10 digits from 0 to 9 and all lowercase letters in the English alphabet. When Arduino receives the RGB string, it converts it back to base 10 and to 0-255 scale. Once this is done, it changes the voltages on the pins corresponding to each colour to match the intensity extracted from the string. Then, using some MOSFET magic on a bread board, 12v battery powers the LED strip which lits up in our desired colour.</p>\n\n<p>I am aware that everything described above is far from perfect, but sadly at the time I didn't have the chance to improve anything. I will definitely be revisiting this idea in the future to come up with a better solution.</p>\n\n<h1 id=\"demoandsourcecode\">Demo and source code</h1>\n\n<p>All of the source code can be found in <a href=\"https://github.com/TimboKZ/spark\">Spark's GitHub repo</a>. Below is a short demonstration of the system in action. Keep in mind the Ambient lighting system is only controlling the LEDs behind the monitor, everything else is controlled by other 3rd party software.</p>\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/V-m6wq622P0\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","image":"https://foxypanda-ghost.s3.amazonaws.com/2016/Nov/ambient_lighting-1478748869882.png","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-11-10 02:26:06","created_by":1,"updated_at":"2016-11-10 03:34:43","updated_by":1,"published_at":"2016-11-10 03:21:19","published_by":1,"amp":null},{"id":57,"uuid":"d6a40d64-5a0d-4c11-b554-c4502f0b23c1","title":"Blitz: A Static Site Generator","slug":"blitz-static-site-generator-2","markdown":"# Abstract\n\nThere are times when I suffer from the [NIH syndrome](https://en.wikipedia.org/wiki/Not_invented_here). Back in my high school days I used to insist on writing everything from scratch\n\n# Blitz\n\nBlitz is my first published NPM package.\n\n","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>There are times when I suffer from the <a href=\"https://en.wikipedia.org/wiki/Not_invented_here\">NIH syndrome</a>. Back in my high school days I used to insist on writing everything from scratch</p>\n\n<h1 id=\"blitz\">Blitz</h1>\n\n<p>Blitz is my first published NPM package.</p>","image":"","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-11-13 01:25:04","created_by":1,"updated_at":"2017-10-14 19:49:12","updated_by":1,"published_at":"2017-10-14 19:45:35","published_by":1,"amp":null},{"id":58,"uuid":"a4b8add6-7a31-4c27-a26f-a29e685bbde6","title":"Panoramas from my trip to Japan in 2016","slug":"panoramas-from-a-trip-to-japan-2","markdown":"# Abstract\n\nAs you might've found out from [a previous post of mine](https://foxypanda.me/my-trip-to-japan-in-summer-2016/), in Summer of 2016 I spent a couple of weeks travelling around Japan. The previous post focused on the pictures I've taken with my camera, while this one has a bunch of panoramas I've captured on my trip.\n\n# Panoramas\n\nAll of these were taken on iPhone, so apologies for the quality. I wanted to post them because I think they give quite a good idea of what the atmosphere there felt like.\n\nYou can click on the pictures and use your scrolling wheel to zoom in.\n\n<style>\n    #panorama {\n        width: 600px;\n        height: 400px;\n    }\n</style>\n\n<link rel=\"stylesheet\" href=\"https://cdn.rawgit.com/fengyuanchen/viewerjs/7d17cf627ac3c6817d8eaa46fbb9c9a3f82a5b05/dist/viewer.min.css\"/>\n<script type=\"text/javascript\" src=\"https://cdn.rawgit.com/fengyuanchen/viewerjs/7d17cf627ac3c6817d8eaa46fbb9c9a3f82a5b05/dist/viewer.min.js\"></script>\n\n<div id=\"images\">\n    <img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/6VnmYWQ-1494109789295.jpg\" title=\"Akihabara\" />\n</div>\n\n<script>\nvar options = {};\nvar viewer = new Viewer(document.getElementById('images'), options);\n</script>","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>As you might've found out from <a href=\"https://foxypanda.me/my-trip-to-japan-in-summer-2016/\">a previous post of mine</a>, in Summer of 2016 I spent a couple of weeks travelling around Japan. The previous post focused on the pictures I've taken with my camera, while this one has a bunch of panoramas I've captured on my trip.</p>\n\n<h1 id=\"panoramas\">Panoramas</h1>\n\n<p>All of these were taken on iPhone, so apologies for the quality. I wanted to post them because I think they give quite a good idea of what the atmosphere there felt like.</p>\n\n<p>You can click on the pictures and use your scrolling wheel to zoom in.</p>\n\n<style>  \n    #panorama {\n        width: 600px;\n        height: 400px;\n    }\n</style>\n\n<p><link rel=\"stylesheet\" href=\"https://cdn.rawgit.com/fengyuanchen/viewerjs/7d17cf627ac3c6817d8eaa46fbb9c9a3f82a5b05/dist/viewer.min.css\"/>  </p>\n\n<script type=\"text/javascript\" src=\"https://cdn.rawgit.com/fengyuanchen/viewerjs/7d17cf627ac3c6817d8eaa46fbb9c9a3f82a5b05/dist/viewer.min.js\"></script>\n\n<div id=\"images\">  \n    <img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/6VnmYWQ-1494109789295.jpg\" title=\"Akihabara\" />\n</div>\n\n<script>  \nvar options = {};  \nvar viewer = new Viewer(document.getElementById('images'), options);  \n</script>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-05-06 22:26:13","created_by":1,"updated_at":"2017-07-21 16:01:44","updated_by":1,"published_at":null,"published_by":null,"amp":null},{"id":59,"uuid":"f5086593-939c-4922-b320-630b97457799","title":"UCL PEACH Reality with Microsoft HoloLens","slug":"ucl-peach-reality-with-microsoft-hololens-2","markdown":"# Abstract\n\nAs a part of COMP204P/COMP205P System Engineering modules in my 2nd year of study in UCL I've been given a chance to work with [Microsoft HoloLens](https://www.microsoft.com/microsoft-hololens/) and I became a part of [the PEACH project](https://code4health.org/peach), namely the *Reality* group. In this article I'll be talking about PEACH Reality itself and the things I've done during my team working on it.\n\n# PEACH Reality\n\nPEACH stands for *Platform for Enhanced Analytics and Computational Healthcare*, and it's aim, quite unsurprisingly, is to bring some wonders of computer science and software engineering into healthcare. PEACH Reality, the project I was working on, has several major goals.\n\nFirst of all, we're planning to define a specification and an appropriate file format for a *holographic patient case*. Such cases will be used to store models, DICOM files and relevant meta data, such as coordinates of models in 3D space or voice recordings attached to various parts of the model (which is done using [data markers](https://youtu.be/V2mnBVkD-Rs?t=3m54s)).\n\nSecondly, we're developing a robust Microsoft HoloLens application that will be paired with a web app to make use of the specifications defined above. Using our web app, medical specialists can upload 3D models, CT scans and various other files which can the be viewed and interacted with on HoloLens. Once the user is done making changes to objects on HoloLens, all information will be serialised and can later be exported using the file format described above.\n\nLast but not least, we're working on a seamless pipeline that will automatically convert CT scans into 3D model. Thanks to PhD students from UCL Computer Science and [Innersight Labs](http://innersightlabs.com/) we have access to a neural network that can do exactly that. The resultant 3D models are not 100% accurate but the accuracy is high enough for a proof of concept. \n\nAs the leader of the team working on this project I'm responsible for supervising the whole development process. Although this project requires quite a bit of effort it's been very interesting so far and I got a chance to meet a lot of great people, ranging from experienced surgeons to the [corporate VP of Microsoft](https://foxypanda.me/presenting-peach-reality-to-steve-guggenheimer-corporate-vp-of-microsoft/). I'll be posting updated in this blog as the project progresses further.\n\n# Demos\n\nHere are some videos showing off various features I've been adding to our app prototype. The most recent videos are at the top.\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/c1W4W-ORgE4\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/V2mnBVkD-Rs\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/hNHUF8CeXh0\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>As a part of COMP204P/COMP205P System Engineering modules in my 2nd year of study in UCL I've been given a chance to work with <a href=\"https://www.microsoft.com/microsoft-hololens/\">Microsoft HoloLens</a> and I became a part of <a href=\"https://code4health.org/peach\">the PEACH project</a>, namely the <em>Reality</em> group. In this article I'll be talking about PEACH Reality itself and the things I've done during my team working on it.</p>\n\n<h1 id=\"peachreality\">PEACH Reality</h1>\n\n<p>PEACH stands for <em>Platform for Enhanced Analytics and Computational Healthcare</em>, and it's aim, quite unsurprisingly, is to bring some wonders of computer science and software engineering into healthcare. PEACH Reality, the project I was working on, has several major goals.</p>\n\n<p>First of all, we're planning to define a specification and an appropriate file format for a <em>holographic patient case</em>. Such cases will be used to store models, DICOM files and relevant meta data, such as coordinates of models in 3D space or voice recordings attached to various parts of the model (which is done using <a href=\"https://youtu.be/V2mnBVkD-Rs?t=3m54s\">data markers</a>).</p>\n\n<p>Secondly, we're developing a robust Microsoft HoloLens application that will be paired with a web app to make use of the specifications defined above. Using our web app, medical specialists can upload 3D models, CT scans and various other files which can the be viewed and interacted with on HoloLens. Once the user is done making changes to objects on HoloLens, all information will be serialised and can later be exported using the file format described above.</p>\n\n<p>Last but not least, we're working on a seamless pipeline that will automatically convert CT scans into 3D model. Thanks to PhD students from UCL Computer Science and <a href=\"http://innersightlabs.com/\">Innersight Labs</a> we have access to a neural network that can do exactly that. The resultant 3D models are not 100% accurate but the accuracy is high enough for a proof of concept. </p>\n\n<p>As the leader of the team working on this project I'm responsible for supervising the whole development process. Although this project requires quite a bit of effort it's been very interesting so far and I got a chance to meet a lot of great people, ranging from experienced surgeons to the <a href=\"https://foxypanda.me/presenting-peach-reality-to-steve-guggenheimer-corporate-vp-of-microsoft/\">corporate VP of Microsoft</a>. I'll be posting updated in this blog as the project progresses further.</p>\n\n<h1 id=\"demos\">Demos</h1>\n\n<p>Here are some videos showing off various features I've been adding to our app prototype. The most recent videos are at the top.</p>\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/c1W4W-ORgE4\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>  \n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/V2mnBVkD-Rs\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>  \n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/hNHUF8CeXh0\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","image":"https://foxypanda-ghost.s3.amazonaws.com/2016/Nov/hololens-1479676982513.jpg","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-11-20 21:07:45","created_by":1,"updated_at":"2017-02-14 01:11:08","updated_by":1,"published_at":"2016-11-20 21:14:06","published_by":1,"amp":null},{"id":60,"uuid":"641640e6-0e1c-498e-99b9-b085951cd8cf","title":"HoloLens Development: First Steps","slug":"hololens-development-first-steps-2","markdown":"# Abstract\n\nAs you might've found out from [other posts](https://foxypanda.me/ucl-peach-reality-with-microsoft-hololens/) in my blog, I've spent quite a lot of time developing a Microsoft HoloLens application during my 2nd year in UCL. In this post I'd like to outline several things that beginner HoloLens developers might find useful. If you have the time, I suggest you read the whole thing as it might save you some trouble in the future.\n\n> **Disclaimer:** I've first begun working with HoloLens in the end of 2016, so information here might be slightly outdated.\n\n# 1. Microsoft's Mixed Reality Academy\n\n[Mixed Reality Academy](https://developer.microsoft.com/en-us/windows/mixed-reality/academy) should be the first step of your journey into the world of HoloLens development. It will give you a basic understanding of the features that HoloLens offers to you and your users, as well as some common implementation strategies. Unfortunately, the tutorials don't really go over the code and it's more about you understanding how to setup a HoloLens project in Unity and Visual Studio, how to build your project, how to deploy it to HoloLens or emulator and so on. The second half is copying and pasting various snippets of code that have been written for you and seeing the whole HoloLens development pipeline in action.\n\nI'd recommend glancing over the code in the tutorials and trying to understand what are the basic mechanisms and libraries involved in making certain things happen - like how information about user's hand movements can be used in Holograms 211 or how Gaze can be used to interact with objects in Holograms 210.\n\nMake sure to **not** spend too much time learning different parts of code in tutorials by heart because some parts might be outdated and in fact specifics of implementation could have completely changed since the time tutorials where recorded. More about it in the next section.\n\n# 2. Unity-HoloToolkit\n\nDefinitely read more about Unity-HoloToolkit on [its GitHub page](https://github.com/Microsoft/HoloToolkit-Unity) and browse the code and examples in the repo if you have the time. If you've done the tutorials, you would've encountered the HoloToolkit in some shape or form. Unity-HoloToolkit is pretty much the same thing but optimised to play nicely with Unity game engine. Keep in mind that the version used in the tutorials is **most likely outdated**, so I suggest cloning the repository linked in the beginning of this paragraph directly. As mentioned before, scripts and their interfaces might differ from the ones used in the tutorials, so copying and pasting the code from tutorials into a Unity project with the most recent version of Unity-HoloToolkit is probably not the best idea.\n\nIt's a collection of useful scripts that cover pretty much all of the basic needs of a HoloLens app developer, such as billboard/tagalong components, spatial understanding, hologram sharing and more. I wasn't able to find too much documentation about it so for me using it was pretty much a trial-and-error process, but you might have more luck than me.\n\nA colleague and a good friend of mine, [Fraser Savage](https://savage.engineer/), wrote [this short overview](http://students.cs.ucl.ac.uk/2016/group39/experiments/1-starting.html) of setting up a Unity project for HoloLens development. The section you're interested in is `1. Initial set up of the unity project`, the rest might be a bit too specific to apply to you. Again, info there can be outdated but it should provide some basic guidance.\n\n# 3. Unity and Visual Studio\n\n**One of the most important things to remember** is that the HoloLens app you're developing in Unity is first and foremost **a Unity app**. Most of the challenges you'll be experiencing during the development process are common Unity issues, so make sure to scavenge Unity forums for solutions before blaming HoloLens developers. Don't get me wrong - I'm not saying that working with the HoloLens-specific part of the project will be easy, but from my experience 90% of the work will mostly focus on pure Unity development with little to none HoloLens aspects to it.\n\nChoosing the right Unity version for the job is a a completely different story. First of all, if you're working in a group, you should all use the same version of Unity, or you'll have to spend ages re-importing and re-configuring your projects, given they will load at all. Also, **do not** update to the most recent version of Unity unless it has a feature crucial for your development process or you know what you're doing. It can break your app, it will mean all developers in your team will have to update, and, worst case scenario, HoloLens development might not even be supported on that new version so you'll have to go back to using an older version.\n\nAnd that's not even the whole story. I'm not sure if the situation has changed since the last time I actively worked on a HoloLens project (I sure hope it has - I have an internship involving HoloLens in a month's time), but I had some issues understanding which Unity version I was actually supposed to use. This, combined with limited support for Visual Studio 2017 by the HoloLens emulator left me with a Unity project that would crash whenever I'd try to test it (funnily enough, only happened on my machine), and the only suggested solution was reinstalling my operating system, which is definitely not happening. What didn't help was that Unity-HoloToolkit GitHub readme files mentions the `Required Unity Editor Version` which breaks everything else. **So take great care when choosing which Unity version to install and make sure you read everything Microsoft has to say about it.**\n\nTo some extent, what I said above applies to Visual Studio too. To make your life easier you might want to install [ReSharper](https://www.jetbrains.com/resharper/), an amazing extension for Visual Studio that gives it some super powers of Intellij Idea. As a student, you can get a free license for a year and extend in the future, if needed.\n\n# 4. General tips and tricks\n\nI strongly suggest you read [Performance recommendations for Unity](https://developer.microsoft.com/en-us/windows/mixed-reality/performance_recommendations_for_unity) by Microsoft **before** you start working on your project. It has some very useful tips on the architecture of your application which are quite hard to implement retrospectively. \n\nTo save yourself some time developing the UI for your app, you can use the existing UnityUI framework. To make it work with HoloLens, you'll have to make some adjustments, which can be found [in this post on Unity forums](https://forum.unity3d.com/threads/unity-ui-on-the-hololens.394629/).","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>As you might've found out from <a href=\"https://foxypanda.me/ucl-peach-reality-with-microsoft-hololens/\">other posts</a> in my blog, I've spent quite a lot of time developing a Microsoft HoloLens application during my 2nd year in UCL. In this post I'd like to outline several things that beginner HoloLens developers might find useful. If you have the time, I suggest you read the whole thing as it might save you some trouble in the future.</p>\n\n<blockquote>\n  <p><strong>Disclaimer:</strong> I've first begun working with HoloLens in the end of 2016, so information here might be slightly outdated.</p>\n</blockquote>\n\n<h1 id=\"1microsoftsmixedrealityacademy\">1. Microsoft's Mixed Reality Academy</h1>\n\n<p><a href=\"https://developer.microsoft.com/en-us/windows/mixed-reality/academy\">Mixed Reality Academy</a> should be the first step of your journey into the world of HoloLens development. It will give you a basic understanding of the features that HoloLens offers to you and your users, as well as some common implementation strategies. Unfortunately, the tutorials don't really go over the code and it's more about you understanding how to setup a HoloLens project in Unity and Visual Studio, how to build your project, how to deploy it to HoloLens or emulator and so on. The second half is copying and pasting various snippets of code that have been written for you and seeing the whole HoloLens development pipeline in action.</p>\n\n<p>I'd recommend glancing over the code in the tutorials and trying to understand what are the basic mechanisms and libraries involved in making certain things happen - like how information about user's hand movements can be used in Holograms 211 or how Gaze can be used to interact with objects in Holograms 210.</p>\n\n<p>Make sure to <strong>not</strong> spend too much time learning different parts of code in tutorials by heart because some parts might be outdated and in fact specifics of implementation could have completely changed since the time tutorials where recorded. More about it in the next section.</p>\n\n<h1 id=\"2unityholotoolkit\">2. Unity-HoloToolkit</h1>\n\n<p>Definitely read more about Unity-HoloToolkit on <a href=\"https://github.com/Microsoft/HoloToolkit-Unity\">its GitHub page</a> and browse the code and examples in the repo if you have the time. If you've done the tutorials, you would've encountered the HoloToolkit in some shape or form. Unity-HoloToolkit is pretty much the same thing but optimised to play nicely with Unity game engine. Keep in mind that the version used in the tutorials is <strong>most likely outdated</strong>, so I suggest cloning the repository linked in the beginning of this paragraph directly. As mentioned before, scripts and their interfaces might differ from the ones used in the tutorials, so copying and pasting the code from tutorials into a Unity project with the most recent version of Unity-HoloToolkit is probably not the best idea.</p>\n\n<p>It's a collection of useful scripts that cover pretty much all of the basic needs of a HoloLens app developer, such as billboard/tagalong components, spatial understanding, hologram sharing and more. I wasn't able to find too much documentation about it so for me using it was pretty much a trial-and-error process, but you might have more luck than me.</p>\n\n<p>A colleague and a good friend of mine, <a href=\"https://savage.engineer/\">Fraser Savage</a>, wrote <a href=\"http://students.cs.ucl.ac.uk/2016/group39/experiments/1-starting.html\">this short overview</a> of setting up a Unity project for HoloLens development. The section you're interested in is <code>1. Initial set up of the unity project</code>, the rest might be a bit too specific to apply to you. Again, info there can be outdated but it should provide some basic guidance.</p>\n\n<h1 id=\"3unityandvisualstudio\">3. Unity and Visual Studio</h1>\n\n<p><strong>One of the most important things to remember</strong> is that the HoloLens app you're developing in Unity is first and foremost <strong>a Unity app</strong>. Most of the challenges you'll be experiencing during the development process are common Unity issues, so make sure to scavenge Unity forums for solutions before blaming HoloLens developers. Don't get me wrong - I'm not saying that working with the HoloLens-specific part of the project will be easy, but from my experience 90% of the work will mostly focus on pure Unity development with little to none HoloLens aspects to it.</p>\n\n<p>Choosing the right Unity version for the job is a a completely different story. First of all, if you're working in a group, you should all use the same version of Unity, or you'll have to spend ages re-importing and re-configuring your projects, given they will load at all. Also, <strong>do not</strong> update to the most recent version of Unity unless it has a feature crucial for your development process or you know what you're doing. It can break your app, it will mean all developers in your team will have to update, and, worst case scenario, HoloLens development might not even be supported on that new version so you'll have to go back to using an older version.</p>\n\n<p>And that's not even the whole story. I'm not sure if the situation has changed since the last time I actively worked on a HoloLens project (I sure hope it has - I have an internship involving HoloLens in a month's time), but I had some issues understanding which Unity version I was actually supposed to use. This, combined with limited support for Visual Studio 2017 by the HoloLens emulator left me with a Unity project that would crash whenever I'd try to test it (funnily enough, only happened on my machine), and the only suggested solution was reinstalling my operating system, which is definitely not happening. What didn't help was that Unity-HoloToolkit GitHub readme files mentions the <code>Required Unity Editor Version</code> which breaks everything else. <strong>So take great care when choosing which Unity version to install and make sure you read everything Microsoft has to say about it.</strong></p>\n\n<p>To some extent, what I said above applies to Visual Studio too. To make your life easier you might want to install <a href=\"https://www.jetbrains.com/resharper/\">ReSharper</a>, an amazing extension for Visual Studio that gives it some super powers of Intellij Idea. As a student, you can get a free license for a year and extend in the future, if needed.</p>\n\n<h1 id=\"4generaltipsandtricks\">4. General tips and tricks</h1>\n\n<p>I strongly suggest you read <a href=\"https://developer.microsoft.com/en-us/windows/mixed-reality/performance_recommendations_for_unity\">Performance recommendations for Unity</a> by Microsoft <strong>before</strong> you start working on your project. It has some very useful tips on the architecture of your application which are quite hard to implement retrospectively. </p>\n\n<p>To save yourself some time developing the UI for your app, you can use the existing UnityUI framework. To make it work with HoloLens, you'll have to make some adjustments, which can be found <a href=\"https://forum.unity3d.com/threads/unity-ui-on-the-hololens.394629/\">in this post on Unity forums</a>.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-06-14 17:58:21","created_by":1,"updated_at":"2017-06-14 18:53:32","updated_by":1,"published_at":"2017-06-14 18:45:32","published_by":1,"amp":null},{"id":61,"uuid":"8abe326d-d3c2-4848-893f-07ae0872b26b","title":"My trip to Japan in Summer 2016 (Pictures)","slug":"my-trip-to-japan-in-summer-2016-2","markdown":"# Abstract\n\nIn June of 2016 I spent 2 weeks travelling around Japan with a bunch of friends. We've covered a fair bit of southern Japan, including Hiroshima, Osaka, Kobe, Nara, Kyoto, Atami and Tokyo. It was an amazing experience and since I'm no wordsmith but I still wanted to document my trip, I ended up taking around a thousand and a half pictures of various places and events in Japan. That said, sadly I'm no professional photographer either so the pictures you'll see below aren't exactly masterpieces, but they do bring up some good memories and I personally find them pretty.\n\n# Pictures from Japan\n\nThese are some of the pictures I took, in chronological order. You are free to use them as you see fit, but if you could also link this page it would be amazing. ~~You can click on the image for a high quality version.~~ (HQ links are not working atm, check back later) Enjoy!\n\n\n# Osaka\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1048-1494108077711.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1090-1494108082613.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1116-1494108088742.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1131-1494108094792.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1136-1494108098539.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1166-1494108102041.jpg)\n\n\n# Hiroshima\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1314-1494108107960.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1324-1494108110181.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1370-1494108112973.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1436-1494108120100.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1480-1494108142417.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1484-1494108149767.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1557-1494108155098.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1578-1494108160007.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1584-1494108163508.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1610-1494108171159.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1701-1494108190961.jpg)\n\n\n# Kyoto\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1754-1494108194085.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1793-1494108197220.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1874-1494108204086.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1876-1494108205825.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1881-1494108208543.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1993-1494108210467.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2055-1494108212841.jpg)\n\n\n# Atami\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2258-1494108215305.jpg)\n\n\n# Tokyo\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2329-1494108217789.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2352-1494108222780.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2387-1494108225414.jpg)\n\n\n![](https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2390-1494108227876.jpg)\n\n","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>In June of 2016 I spent 2 weeks travelling around Japan with a bunch of friends. We've covered a fair bit of southern Japan, including Hiroshima, Osaka, Kobe, Nara, Kyoto, Atami and Tokyo. It was an amazing experience and since I'm no wordsmith but I still wanted to document my trip, I ended up taking around a thousand and a half pictures of various places and events in Japan. That said, sadly I'm no professional photographer either so the pictures you'll see below aren't exactly masterpieces, but they do bring up some good memories and I personally find them pretty.</p>\n\n<h1 id=\"picturesfromjapan\">Pictures from Japan</h1>\n\n<p>These are some of the pictures I took, in chronological order. You are free to use them as you see fit, but if you could also link this page it would be amazing. <del>You can click on the image for a high quality version.</del> (HQ links are not working atm, check back later) Enjoy!</p>\n\n<h1 id=\"osaka\">Osaka</h1>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1048-1494108077711.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1090-1494108082613.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1116-1494108088742.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1131-1494108094792.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1136-1494108098539.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1166-1494108102041.jpg\" alt=\"\" /></p>\n\n<h1 id=\"hiroshima\">Hiroshima</h1>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1314-1494108107960.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1324-1494108110181.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1370-1494108112973.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1436-1494108120100.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1480-1494108142417.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1484-1494108149767.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1557-1494108155098.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1578-1494108160007.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1584-1494108163508.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1610-1494108171159.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1701-1494108190961.jpg\" alt=\"\" /></p>\n\n<h1 id=\"kyoto\">Kyoto</h1>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1754-1494108194085.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1793-1494108197220.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1874-1494108204086.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1876-1494108205825.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1881-1494108208543.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_1993-1494108210467.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2055-1494108212841.jpg\" alt=\"\" /></p>\n\n<h1 id=\"atami\">Atami</h1>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2258-1494108215305.jpg\" alt=\"\" /></p>\n\n<h1 id=\"tokyo\">Tokyo</h1>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2329-1494108217789.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2352-1494108222780.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2387-1494108225414.jpg\" alt=\"\" /></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/May/IMG_2390-1494108227876.jpg\" alt=\"\" /></p>","image":"https://foxypanda-ghost.s3.amazonaws.com/2017/May/Hiroshima_Castle-1494812388585.png","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-01-19 18:07:15","created_by":1,"updated_at":"2017-06-14 18:49:27","updated_by":1,"published_at":"2017-05-06 22:03:56","published_by":1,"amp":null},{"id":62,"uuid":"b57fb664-c617-43fb-8edb-a173fa07577f","title":"Reddit: Getting the list of subreddits a user moderates","slug":"reddit-getting-the-list-of-subreddits-a-user-moderates-2","markdown":"# Abstract\n\nFor [a simple open source project](https://github.com/TimboKZ/github-reddit-bot) I had to retrieve the list of subreddits a specific user moderates, using their username. Unfortunately, at the time of writing Reddit doesn't provide any sane methods of fetching said list so in this article I'll be talking about my roundabout way of tackling this challenge.\n\n# Scraping user page\n\nThe obvious solution turned out to be scraping the page of the user, since it displays all of the public subreddits the user moderates:\n\n\nThe primary challenge here is that, at the time of writing, Reddit is transferring to a brand-new profile design, which means I had to adjust my scraping strategy depending on what design the page used.\n\nI won't go over the code in detail, if you're interested in basic scraping concept behind it check out [this tutorial](https://scotch.io/tutorials/scraping-the-web-with-node-js).","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>For <a href=\"https://github.com/TimboKZ/github-reddit-bot\">a simple open source project</a> I had to retrieve the list of subreddits a specific user moderates, using their username. Unfortunately, at the time of writing Reddit doesn't provide any sane methods of fetching said list so in this article I'll be talking about my roundabout way of tackling this challenge.</p>\n\n<h1 id=\"scrapinguserpage\">Scraping user page</h1>\n\n<p>The obvious solution turned out to be scraping the page of the user, since it displays all of the public subreddits the user moderates:</p>\n\n<p>The primary challenge here is that, at the time of writing, Reddit is transferring to a brand-new profile design, which means I had to adjust my scraping strategy depending on what design the page used.</p>\n\n<p>I won't go over the code in detail, if you're interested in basic scraping concept behind it check out <a href=\"https://scotch.io/tutorials/scraping-the-web-with-node-js\">this tutorial</a>.</p>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-06-15 19:04:22","created_by":1,"updated_at":"2017-06-15 19:09:19","updated_by":1,"published_at":null,"published_by":null,"amp":null},{"id":63,"uuid":"8bff003e-3a00-4f86-ba7b-3640e5d9097c","title":"JS Gaussian Elimination","slug":"js-gaussian-elimination-2","markdown":"# Abstract\n\nWhile doing some coursework for MATH6301 module for uni I decided that it takes too damn long to write out basic gaussian elimination operations. Additionally, I felt like procrastinating and doing something that will involve using [gulp](http://gulpjs.com/) which I have only recently discovered. The result was this gaussian elimination visualiser written in JavaScript (well, technically TypeScript).\n\n# Demo and source\n\nThe interactive demo of this project can be found on [this page here](https://hosting.kawaiidesu.me/gaussian-elimination/). The interface is pretty self-explanatory, but you can find some instructions by clicking the help button. The whole thing was made using TypeScript for logic and Sass for appearance, with gulp used for compilation and real time changes preview. You can find the source code on [this GitHub page](https://github.com/TimboKZ/JS-Gaussian-Elimination). Check out the screenshot below to see what it's supposed to look like (in case you can't load the demo).\n\n![Gaussian Elimination Visualiser](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/gaussian_elimination-1472354407434.png)","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>While doing some coursework for MATH6301 module for uni I decided that it takes too damn long to write out basic gaussian elimination operations. Additionally, I felt like procrastinating and doing something that will involve using <a href=\"http://gulpjs.com/\">gulp</a> which I have only recently discovered. The result was this gaussian elimination visualiser written in JavaScript (well, technically TypeScript).</p>\n\n<h1 id=\"demoandsource\">Demo and source</h1>\n\n<p>The interactive demo of this project can be found on <a href=\"https://hosting.kawaiidesu.me/gaussian-elimination/\">this page here</a>. The interface is pretty self-explanatory, but you can find some instructions by clicking the help button. The whole thing was made using TypeScript for logic and Sass for appearance, with gulp used for compilation and real time changes preview. You can find the source code on <a href=\"https://github.com/TimboKZ/JS-Gaussian-Elimination\">this GitHub page</a>. Check out the screenshot below to see what it's supposed to look like (in case you can't load the demo).</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/gaussian_elimination-1472354407434.png\" alt=\"Gaussian Elimination Visualiser\" /></p>","image":"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/gaussian_elimination-1472354407434.png","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-27 20:41:58","created_by":1,"updated_at":"2016-08-31 11:44:09","updated_by":1,"published_at":"2016-03-12 21:42:00","published_by":1,"amp":null},{"id":64,"uuid":"5ea6ad60-6799-48a3-a334-01fef648b739","title":"Understanding two-way data binding in JS","slug":"understanding-two-way-data-binding-in-js-2","markdown":"# Abstract\n\nIn the recent years, two-way data binding has become a very popular technique among all sorts of JavaScript frameworks and other tools, and I felt like an article about the basic concepts behind it might be useful for someone who wishes to understand how exactly two-way data binding works. In this article, I'll try to cover as much of it as possible without going too deep into the mechanics of JavaScript.\n\n# What is two-way data binding?\n\nFirst of all, it is important to point out what exactly two-way data binding is before we can discuss how it works. As an example, let's consider [Model-View-Controller (MVC) design pattern](https://en.wikipedia.org/wiki/Model-view-controller). In MVC, so-called Model component represents the Model of the data in the application, while the View component determines how the data is presented to the user. A simple analogy would be to think of the Model as a JavaScript object and the View as an HTML page with some input forms. Take a look at the animation below.\n\n<video loop=\"\" autoplay=\"\">\n    <source src=\"https://s3.eu-central-1.amazonaws.com/foxypanda-ghost/pages/two-way-data-binding.webm\" type=\"video/webm\">\n    Your browser does not support the video tag.\n</video>\n\nAs you can see, the JavaScript object gets updated in real time as the user changes the contents of the input field. Since this is **two-way** data binding, the opposite is also true: If the application was to update the JS object the changes would appear in the input field straight away.\n\n# JavaScript implementation\n\nFirst of all, let's make a simple HTML page which we'll use to test any JS code we'll write. The code for our page can be found below and it has 3 noteworthy elements:\n\n1. `#input` field: The input field we'll use to type in new values for the JS variable. As per the concept of two-way data binding, the changes made here will affect the JS variable and vice versa.\n2. `#button` button: On click, this button will change the value of the JS variable to `Hello`. This change should also affect the `#input` and the `#value`.\n3. `#value` field: The value of the JS variable will appear here in plain text. All of the changes made to the variable will reflect in this field in real time.\n\n```language-markup\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Two-way Data Binding</title>\n</head>\n<body>\n    <input id=\"input\" type=\"text\">\n    <button id=\"button\">Set value to \"Hello\"</button>\n    <span>Value: <strong id=\"value\"></strong></span>\n\n    <script>\n    /*\n     * Our JS will go here\n     */\n    </script>\n</body>\n</html>\n```\n\n## View to Model binding\n\nLet's write some JS! We'll start with the easy part: tracking changes made to the `#input` field. If you have some experience with web design you probably already know that we're gonna use [event listeners](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener). The specific event we'll make use of is the [`input` event](https://developer.mozilla.org/en-US/docs/Web/Events/input). When used on an HTML `input` tag with `type` attribute set to `text`, it's fired when the value of the input is changed. It's significantly different from the `keyup` event, since `keyup` is fired whenever **any** key is released, even if you simply spam the shift key without actually changing the contents of the input field.\n\nThe code below does the trick in 3 steps:\n\n1. It initialises the object that will store the value of our field.\n2. It creates references to the 3 main elements on the page: the input field, the button and the text field that holds the text value of our object.\n3. It sets up an event listener that updates the text value of our object and then logs the new value to the console.\n\n```language-javascript\n// 1. The object we'll be changing\nvar data = {\n  variable: ''\n};\n\n// 2. References to 3 elements listed above\nvar inputField = document.getElementById('input');\nvar button = document.getElementById('input');\nvar valueField = document.getElementById('value');\n\n// 3. Event listener setup\ninputField.addEventListener('input', function() {\n    // Update the object\n    data.variable = inputField.value;\n\n    // Log the new value to console\n    console.log(object.variable);\n});\n```\n\nYou can see it in action in the demo below. Make sure to open the developer console (usually accessible using `F12` key) and type something into the field to confirm that the code works as intended. When you're done, move on to the next section where we'll discuss the implementation of the reverse mechanism.\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"rLXvgX\" data-default-tab=\"js,result\" data-user=\"TimboKZ\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/TimboKZ/pen/rLXvgX/\">Two-way data binding in JS</a> by Tim K (<a href=\"http://codepen.io/TimboKZ\">@TimboKZ</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n## Model to View binding\n\nThis part is a bit trickier than what we've done so far - now we somehow have to \"spy\" on the object holding our data. Then, whenever said object undergoes any change we have to update the input field with the most recent info.\n\n### The `watch()` method\n\nTurns out [Gecko](https://developer.mozilla.org/docs/Mozilla/Gecko), the engine behind Firefox has a [very useful `watch()` method](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/watch) defined on all JS objects, which does exactly what we want: It tracks all changes made to a property of some object and notifies us about them.\n\nSince this method only exists in Gecko, to use it in browsers you'd have to implement a so-called [polyfill](https://en.wikipedia.org/wiki/Polyfill) for the `watch()` method, which simply means defining a method that would mirror its functionality. Luckily, this has been done before and [this snippet](https://gist.github.com/eligrey/384583) by a fellow named Eli Grey seems to do the trick.\n\nTo keep this article short, I will only make use of a small part of the polyfill linked above that is responsible for doing exactly what we're trying to achieve, that is, tracking changes on the properties of the object holding our data. This will make it much easier to understand and even if you want to study the whole thing, understanding this small part first will help you a lot. Keep in mind, the code below is not identical to that in the snippet since I have removed some parts and rewrote the others to make it less ambiguous.\n\n### `defineProperty()` method\n\nAs you've probably noticed if you've taken a look at the snippet linked above, its author relied heavily on [the `defineProperty()` method](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty). It is vital to understand why it was used and how it works before we can proceed. I'll briefly talk about that below but I suggest you check the MDN link in this paragraph for a more in-depth description.\n\nAs the name implies, `definePropery()` is a very fancy way of defining a property on a JS object. Consider the example below where we define a method on some object.\n\n```language-javascript\nvar cat1 = {};\ncat1.meow = function() {\n    console.log('Meow!');\n}\ncat1.meow(); // Output: Meow!\n\n// ... is equivalent to ...\n\nvar cat2 = {};\nObject.defineProperty(cat2, 'meow', {\n    configurable: false,\n    enumerable: false,\n    writable: false,\n    value: function() {\n        console.log('Meow!');\n    }\n});\ncat2.meow(); // Output: Meow!\n\n```\n\nAs seen in the above example, `defineProperty()` gives much more control over how you define a property as opposed to doing it using the assignment (`=`) operator. Another powerful feature it gives us is configuring the getter and setter functions for a property explicitly. It might sound confusing but the example below should make it less ambiguous.\n\n```language-javascript\n// Simple object property\nvar person1 = {\n    height: 120\n};\nperson1.height; // Returns 120\nperson1.height = 100; // person1.height is now 100\n\n\n// ... as opposed to ...\n\n\n// Using defineProperty() `get` and `set`\nvar person2 = {};\nvar height2 = 100;\nObject.defineProperty(person2, 'height', {\n    configurable: false,\n    enumerable: false,\n    get: function() {\n        // Multiply value by 2\n        // before returning\n        return height2 * 2;\n    },\n    set: function(value) {\n        // Divide the supplied value\n        // by 4 before assignment\n        height2 = value / 4;\n    }\n});\n\nperson2.height; // Returns 200\n// Think of the line above as person2.height.get()\n\nperson2.height = 100; // height2 is now 25\n// Think of the line above as person2.height.set(100)\n\nperson2.height; // Returns 50\n```\n\nIt's a lengthy piece of code but it really shows how powerful `defineProperty()`  is. Notice how for `person1.height` JavaScript engine simply returns and updates the value as we tell it to. At the same time, for `person2.height`, we have setup all sorts of manipulations that are performed on the value before it is actually returned or is updated. Now consider the fact that the methods `get` and `set` can contain any logic we want. Can you see how we can use this to our advantage?\n\n## Adding Model to View binding to our page\n\nNow, we're gonna connect all of the small pieces into something greater. Let's start by taking our code from the \"View to Model binding\" section and make several modifications to it: \n\n1. Define a function called `watch()`, That takes 3 arguments: An object, name of  the property that exists on said object and a callback, that will be called every time the property changes.\n2. Use the above function on the property `variable` from the `object`. The callback we'll use will update our `#input` and `#value` with the most recent value of our `variable`.\n3. Setup the `click` event on our `#button` to change the value of the `variable` to `Hello`.\n\nWell, shall we start? Read through the code below and locate the changes described above. I added some comments to the new additions.\n\n```language-javascript\n// Definitions from the first version of the code\nvar data = {\n  variable: ''\n};\nvar inputField = document.getElementById('input');\nvar button = document.getElementById('button');\nvar valueField = document.getElementById('value');\n\n// 1. The watch() function described above\nvar watch = function(object, property, callback) {\n  // Store the initial value for future use\n  var value = object[property];\n  \n  // Remove the original property since\n  // now we want to \"spy\" on it\n  delete object[property];\n  \n  // Define the property again,\n  // now using `get` and `set`\n  Object.defineProperty(object, property, {\n    configurable: false,\n    enumerable: false,\n    get: function() {\n      // Simply return the value,\n      // nothing special here\n      return value;\n    },\n    set: function(newValue) {\n      // Update the value\n      value = newValue;\n      // Call the callback with\n      // the new value\n      callback(newValue);\n    }\n  });\n};\n\n// 2. Watch our `data` object for changes using our\n// newly defined `watch()` function\nwatch(data, 'variable', function(newValue) {\n  // Update the input field value\n  inputField.value = newValue;\n  \n  // Update the text field\n  valueField.textContent = newValue;\n});\n\n// 3. Setup the `click` event for the button\nbutton.addEventListener('click', function() {\n  // Simply set the value to `Hello`\n  data.variable = 'Hello';\n});\n\n// Adding View to Model binding. This should come\n// after our `watch()` function because `set` would\n// not be available before that.\ninputField.addEventListener('input', function() {\n  data.variable = inputField.value;\n});\n```\n\n## The final product\n\nBelow you can find the demo of the final product. Although it took quite a while to get here, the end result seems to be working exactly as we expected.\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"mENjXd\" data-default-tab=\"js,result\" data-user=\"TimboKZ\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/TimboKZ/pen/mENjXd/\">Two-way data binding in JS</a> by Tim K (<a href=\"http://codepen.io/TimboKZ\">@TimboKZ</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n# Conclusion\n\nWe've gone through quite a lot things in this article and I do realise that the amount of code to comprehend is quite big especially for someone with little prior JavaScript experience, but I hope this article help you understand, even remotely, how two-way data binding works. If you find any mistakes in my code or explanations, please feel free to comment below.","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>In the recent years, two-way data binding has become a very popular technique among all sorts of JavaScript frameworks and other tools, and I felt like an article about the basic concepts behind it might be useful for someone who wishes to understand how exactly two-way data binding works. In this article, I'll try to cover as much of it as possible without going too deep into the mechanics of JavaScript.</p>\n\n<h1 id=\"whatistwowaydatabinding\">What is two-way data binding?</h1>\n\n<p>First of all, it is important to point out what exactly two-way data binding is before we can discuss how it works. As an example, let's consider <a href=\"https://en.wikipedia.org/wiki/Model-view-controller\">Model-View-Controller (MVC) design pattern</a>. In MVC, so-called Model component represents the Model of the data in the application, while the View component determines how the data is presented to the user. A simple analogy would be to think of the Model as a JavaScript object and the View as an HTML page with some input forms. Take a look at the animation below.</p>\n\n<video loop=\"\" autoplay=\"\">  \n    <source src=\"https://s3.eu-central-1.amazonaws.com/foxypanda-ghost/pages/two-way-data-binding.webm\" type=\"video/webm\">\n    Your browser does not support the video tag.\n</video>\n\n<p>As you can see, the JavaScript object gets updated in real time as the user changes the contents of the input field. Since this is <strong>two-way</strong> data binding, the opposite is also true: If the application was to update the JS object the changes would appear in the input field straight away.</p>\n\n<h1 id=\"javascriptimplementation\">JavaScript implementation</h1>\n\n<p>First of all, let's make a simple HTML page which we'll use to test any JS code we'll write. The code for our page can be found below and it has 3 noteworthy elements:</p>\n\n<ol>\n<li><code>#input</code> field: The input field we'll use to type in new values for the JS variable. As per the concept of two-way data binding, the changes made here will affect the JS variable and vice versa.  </li>\n<li><code>#button</code> button: On click, this button will change the value of the JS variable to <code>Hello</code>. This change should also affect the <code>#input</code> and the <code>#value</code>.  </li>\n<li><code>#value</code> field: The value of the JS variable will appear here in plain text. All of the changes made to the variable will reflect in this field in real time.</li>\n</ol>\n\n<pre><code class=\"language-markup\">&lt;!DOCTYPE html&gt;  \n&lt;html&gt;  \n&lt;head&gt;  \n    &lt;title&gt;Two-way Data Binding&lt;/title&gt;\n&lt;/head&gt;  \n&lt;body&gt;  \n    &lt;input id=\"input\" type=\"text\"&gt;\n    &lt;button id=\"button\"&gt;Set value to \"Hello\"&lt;/button&gt;\n    &lt;span&gt;Value: &lt;strong id=\"value\"&gt;&lt;/strong&gt;&lt;/span&gt;\n\n    &lt;script&gt;\n    /*\n     * Our JS will go here\n     */\n    &lt;/script&gt;\n&lt;/body&gt;  \n&lt;/html&gt;  \n</code></pre>\n\n<h2 id=\"viewtomodelbinding\">View to Model binding</h2>\n\n<p>Let's write some JS! We'll start with the easy part: tracking changes made to the <code>#input</code> field. If you have some experience with web design you probably already know that we're gonna use <a href=\"https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener\">event listeners</a>. The specific event we'll make use of is the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/input\"><code>input</code> event</a>. When used on an HTML <code>input</code> tag with <code>type</code> attribute set to <code>text</code>, it's fired when the value of the input is changed. It's significantly different from the <code>keyup</code> event, since <code>keyup</code> is fired whenever <strong>any</strong> key is released, even if you simply spam the shift key without actually changing the contents of the input field.</p>\n\n<p>The code below does the trick in 3 steps:</p>\n\n<ol>\n<li>It initialises the object that will store the value of our field.  </li>\n<li>It creates references to the 3 main elements on the page: the input field, the button and the text field that holds the text value of our object.  </li>\n<li>It sets up an event listener that updates the text value of our object and then logs the new value to the console.</li>\n</ol>\n\n<pre><code class=\"language-javascript\">// 1. The object we'll be changing\nvar data = {  \n  variable: ''\n};\n\n// 2. References to 3 elements listed above\nvar inputField = document.getElementById('input');  \nvar button = document.getElementById('input');  \nvar valueField = document.getElementById('value');\n\n// 3. Event listener setup\ninputField.addEventListener('input', function() {  \n    // Update the object\n    data.variable = inputField.value;\n\n    // Log the new value to console\n    console.log(object.variable);\n});\n</code></pre>\n\n<p>You can see it in action in the demo below. Make sure to open the developer console (usually accessible using <code>F12</code> key) and type something into the field to confirm that the code works as intended. When you're done, move on to the next section where we'll discuss the implementation of the reverse mechanism.</p>\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"rLXvgX\" data-default-tab=\"js,result\" data-user=\"TimboKZ\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/TimboKZ/pen/rLXvgX/\">Two-way data binding in JS</a> by Tim K (<a href=\"http://codepen.io/TimboKZ\">@TimboKZ</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>  \n\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"modeltoviewbinding\">Model to View binding</h2>\n\n<p>This part is a bit trickier than what we've done so far - now we somehow have to \"spy\" on the object holding our data. Then, whenever said object undergoes any change we have to update the input field with the most recent info.</p>\n\n<h3 id=\"thewatchmethod\">The <code>watch()</code> method</h3>\n\n<p>Turns out <a href=\"https://developer.mozilla.org/docs/Mozilla/Gecko\">Gecko</a>, the engine behind Firefox has a <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/watch\">very useful <code>watch()</code> method</a> defined on all JS objects, which does exactly what we want: It tracks all changes made to a property of some object and notifies us about them.</p>\n\n<p>Since this method only exists in Gecko, to use it in browsers you'd have to implement a so-called <a href=\"https://en.wikipedia.org/wiki/Polyfill\">polyfill</a> for the <code>watch()</code> method, which simply means defining a method that would mirror its functionality. Luckily, this has been done before and <a href=\"https://gist.github.com/eligrey/384583\">this snippet</a> by a fellow named Eli Grey seems to do the trick.</p>\n\n<p>To keep this article short, I will only make use of a small part of the polyfill linked above that is responsible for doing exactly what we're trying to achieve, that is, tracking changes on the properties of the object holding our data. This will make it much easier to understand and even if you want to study the whole thing, understanding this small part first will help you a lot. Keep in mind, the code below is not identical to that in the snippet since I have removed some parts and rewrote the others to make it less ambiguous.</p>\n\n<h3 id=\"definepropertymethod\"><code>defineProperty()</code> method</h3>\n\n<p>As you've probably noticed if you've taken a look at the snippet linked above, its author relied heavily on <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">the <code>defineProperty()</code> method</a>. It is vital to understand why it was used and how it works before we can proceed. I'll briefly talk about that below but I suggest you check the MDN link in this paragraph for a more in-depth description.</p>\n\n<p>As the name implies, <code>definePropery()</code> is a very fancy way of defining a property on a JS object. Consider the example below where we define a method on some object.</p>\n\n<pre><code class=\"language-javascript\">var cat1 = {};  \ncat1.meow = function() {  \n    console.log('Meow!');\n}\ncat1.meow(); // Output: Meow!\n\n// ... is equivalent to ...\n\nvar cat2 = {};  \nObject.defineProperty(cat2, 'meow', {  \n    configurable: false,\n    enumerable: false,\n    writable: false,\n    value: function() {\n        console.log('Meow!');\n    }\n});\ncat2.meow(); // Output: Meow!\n</code></pre>\n\n<p>As seen in the above example, <code>defineProperty()</code> gives much more control over how you define a property as opposed to doing it using the assignment (<code>=</code>) operator. Another powerful feature it gives us is configuring the getter and setter functions for a property explicitly. It might sound confusing but the example below should make it less ambiguous.</p>\n\n<pre><code class=\"language-javascript\">// Simple object property\nvar person1 = {  \n    height: 120\n};\nperson1.height; // Returns 120  \nperson1.height = 100; // person1.height is now 100\n\n\n// ... as opposed to ...\n\n\n// Using defineProperty() `get` and `set`\nvar person2 = {};  \nvar height2 = 100;  \nObject.defineProperty(person2, 'height', {  \n    configurable: false,\n    enumerable: false,\n    get: function() {\n        // Multiply value by 2\n        // before returning\n        return height2 * 2;\n    },\n    set: function(value) {\n        // Divide the supplied value\n        // by 4 before assignment\n        height2 = value / 4;\n    }\n});\n\nperson2.height; // Returns 200  \n// Think of the line above as person2.height.get()\n\nperson2.height = 100; // height2 is now 25  \n// Think of the line above as person2.height.set(100)\n\nperson2.height; // Returns 50  \n</code></pre>\n\n<p>It's a lengthy piece of code but it really shows how powerful <code>defineProperty()</code>  is. Notice how for <code>person1.height</code> JavaScript engine simply returns and updates the value as we tell it to. At the same time, for <code>person2.height</code>, we have setup all sorts of manipulations that are performed on the value before it is actually returned or is updated. Now consider the fact that the methods <code>get</code> and <code>set</code> can contain any logic we want. Can you see how we can use this to our advantage?</p>\n\n<h2 id=\"addingmodeltoviewbindingtoourpage\">Adding Model to View binding to our page</h2>\n\n<p>Now, we're gonna connect all of the small pieces into something greater. Let's start by taking our code from the \"View to Model binding\" section and make several modifications to it: </p>\n\n<ol>\n<li>Define a function called <code>watch()</code>, That takes 3 arguments: An object, name of  the property that exists on said object and a callback, that will be called every time the property changes.  </li>\n<li>Use the above function on the property <code>variable</code> from the <code>object</code>. The callback we'll use will update our <code>#input</code> and <code>#value</code> with the most recent value of our <code>variable</code>.  </li>\n<li>Setup the <code>click</code> event on our <code>#button</code> to change the value of the <code>variable</code> to <code>Hello</code>.</li>\n</ol>\n\n<p>Well, shall we start? Read through the code below and locate the changes described above. I added some comments to the new additions.</p>\n\n<pre><code class=\"language-javascript\">// Definitions from the first version of the code\nvar data = {  \n  variable: ''\n};\nvar inputField = document.getElementById('input');  \nvar button = document.getElementById('button');  \nvar valueField = document.getElementById('value');\n\n// 1. The watch() function described above\nvar watch = function(object, property, callback) {  \n  // Store the initial value for future use\n  var value = object[property];\n\n  // Remove the original property since\n  // now we want to \"spy\" on it\n  delete object[property];\n\n  // Define the property again,\n  // now using `get` and `set`\n  Object.defineProperty(object, property, {\n    configurable: false,\n    enumerable: false,\n    get: function() {\n      // Simply return the value,\n      // nothing special here\n      return value;\n    },\n    set: function(newValue) {\n      // Update the value\n      value = newValue;\n      // Call the callback with\n      // the new value\n      callback(newValue);\n    }\n  });\n};\n\n// 2. Watch our `data` object for changes using our\n// newly defined `watch()` function\nwatch(data, 'variable', function(newValue) {  \n  // Update the input field value\n  inputField.value = newValue;\n\n  // Update the text field\n  valueField.textContent = newValue;\n});\n\n// 3. Setup the `click` event for the button\nbutton.addEventListener('click', function() {  \n  // Simply set the value to `Hello`\n  data.variable = 'Hello';\n});\n\n// Adding View to Model binding. This should come\n// after our `watch()` function because `set` would\n// not be available before that.\ninputField.addEventListener('input', function() {  \n  data.variable = inputField.value;\n});\n</code></pre>\n\n<h2 id=\"thefinalproduct\">The final product</h2>\n\n<p>Below you can find the demo of the final product. Although it took quite a while to get here, the end result seems to be working exactly as we expected.</p>\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"mENjXd\" data-default-tab=\"js,result\" data-user=\"TimboKZ\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/TimboKZ/pen/mENjXd/\">Two-way data binding in JS</a> by Tim K (<a href=\"http://codepen.io/TimboKZ\">@TimboKZ</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>  \n\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>We've gone through quite a lot things in this article and I do realise that the amount of code to comprehend is quite big especially for someone with little prior JavaScript experience, but I hope this article help you understand, even remotely, how two-way data binding works. If you find any mistakes in my code or explanations, please feel free to comment below.</p>","image":"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/two_way_data_binding-1472643783384.jpg","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-28 11:51:34","created_by":1,"updated_at":"2016-09-01 20:22:17","updated_by":1,"published_at":"2016-08-29 01:08:59","published_by":1,"amp":null},{"id":65,"uuid":"8d3e5c45-e721-416d-9773-f2e289c82c1e","title":"My Linux dotfiles","slug":"my-linux-dotfiles-2","markdown":"# Abstract\n\nI've finally gotten to customising my Linux setup and [put some of my dotfiles on GitHub](https://github.com/TimboKZ/dotfiles), including a pretty handy [installation script](https://github.com/TimboKZ/dotfiles/blob/master/install.sh). Check out the `README.md` file in the repo linked above to see the description of the tools I used. As I'll keep updating that readme as I adjust my dotfiles.\n\n# Demo\n\n> Note: At the time of writing, to save some time on configuration I use Ubuntu Server 16.10 and then customise it to my liking, so below you'll mostly see Ubuntu. That said, I'm very interested in Arch Linux so at some point I'm going to migrate to it.\n\nBe warned - I like to give my machines silly names. Below you can see a screenshot from **Purity**, my Sony VAIO Pro 13 laptop.\n\n![The Linux setup for my laptop, Purity, Sony VAIO Pro 13](https://foxypanda-ghost.s3.amazonaws.com/2017/Mar/purity-1489267030679.png)","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>I've finally gotten to customising my Linux setup and <a href=\"https://github.com/TimboKZ/dotfiles\">put some of my dotfiles on GitHub</a>, including a pretty handy <a href=\"https://github.com/TimboKZ/dotfiles/blob/master/install.sh\">installation script</a>. Check out the <code>README.md</code> file in the repo linked above to see the description of the tools I used. As I'll keep updating that readme as I adjust my dotfiles.</p>\n\n<h1 id=\"demo\">Demo</h1>\n\n<blockquote>\n  <p>Note: At the time of writing, to save some time on configuration I use Ubuntu Server 16.10 and then customise it to my liking, so below you'll mostly see Ubuntu. That said, I'm very interested in Arch Linux so at some point I'm going to migrate to it.</p>\n</blockquote>\n\n<p>Be warned - I like to give my machines silly names. Below you can see a screenshot from <strong>Purity</strong>, my Sony VAIO Pro 13 laptop.</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Mar/purity-1489267030679.png\" alt=\"The Linux setup for my laptop, Purity, Sony VAIO Pro 13\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-03-10 19:34:51","created_by":1,"updated_at":"2017-03-28 04:03:20","updated_by":1,"published_at":"2017-03-10 19:46:38","published_by":1,"amp":null},{"id":66,"uuid":"7b777f02-4f4f-42b9-ac79-3777f79d36be","title":"Synlighter","slug":"synlighter-2","markdown":"# Abstract\n\nSynlighter is a simple syntax highlighting plugin I developed a while ago. I used it primarily as an exercise to study regular expressions, so it is still far from being called a complete product and it only supports HTML, CSS and JS highlighting. Sadly, I'm no longer developing it so don't expect any updates in the future.\n\n# Demo and source code\n\nYou can find the source code on Synlighter's [GitHub page](https://github.com/TimboKZ/Synlighter). Below is a quick demo of its functionality. As said above, it was never meant to be ready for production so I apologise if it doesn't display correctly in your browser. Also, because of the vast amount of regular expressions used it might take a while to load. Just so you know, I reflected on all of the mistakes made during the development of Synlighter and although I will likely not fix them in this project, I will definitely prevent them in every project to come.\n\n# Highlighting CSS\n\n<div>\n<xmp class=\"synlighter\" data-language=\"css\">/*\n *    Syntax  ->  Code\n */\n\n.synlighter-syntax-code {\n    -webkit-box-sizing: border-box;\n     -khtml-box-sizing: border-box;\n       -moz-box-sizing: border-box;\n        -ms-box-sizing: border-box;\n         -o-box-sizing: border-box;\n            box-sizing: border-box;\n}\n.doodle input:checked ~ .animate {\n    /* We will set a delay so that the rewind effect can occur */    \n    -webkit-animation: horse-ride .5s steps(12, end) infinite 5s;\n       -moz-animation: horse-ride .5s steps(12, end) infinite 5s;\n            animation: horse-ride .5s steps(12, end) infinite 5s;\n\n    /* Imitating the Rewind effect before real animation starts */\n    -webkit-transition: all 5s cubic-bezier(0.550, 0.055, 0.675, 0.190);\n       -moz-transition: all 5s cubic-bezier(0.550, 0.055, 0.675, 0.190);\n            transition: all 5s cubic-bezier(0.550, 0.055, 0.675, 0.190);\n    background-position: -2412px 0;\n}\n.doodle div.g:after {\n    background: rgba(53, 97, 182, 0.5);\n}\n</xmp>\n</div>\n\n# Highlighting JavaScript\n\n<div>\n<xmp class=\"synlighter\" data-language=\"js\">window.onpopstate = function(event) {\n    // Why not use console?\n    alert(\"location: \" + document.location + \", state: \" + JSON.stringify(event.state));\n    if(event.state != null)\n        load_page(event.state.url);\n};\nfunction OSONG() {\n    var adjective = null;\n    var noun = null;\n    var random = null;\n    if(getRandomInt(0, 1)) {\n        random = getRandomInt(0, giesLength - 1);\n        adjective = gies[random] + \"ic\";\n    } else {\n        random = getRandomInt(0, icsLength - 1);\n        adjective = ics[random];\n    }\n    random = getRandomInt(0, giesLength - 1);\n    noun = gies[random] + \"ist\";\n    output.addClass('active');\n    output.val(adjective + \" \" + noun);\n    output.removeClass('active');\n}\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n</xmp>\n</div>\n\n# Highlighting HTML\n\n<div>\n<xmp class=\"synlighter\" data-language=\"html\"><nav class=\"foxy-navigation\" role=\"navigation\">\n   <ul>\n      <li class=\"foxy-navigation-home\" role=\"presentation\">\n         <a href=\"https://foxypanda.me/\">\n            <h1>Home</h1>\n         </a>\n      </li><!-- .foxy-navigation-home -->\n      <li class=\"foxy-navigation-about\" role=\"presentation\">\n         <a href=\"https://foxypanda.me/about/\">\n            <h1>About</h1>\n         </a>\n      </li><!-- .foxy-navigation-about -->\n      <li class=\"foxy-navigation-admin\" role=\"presentation\">\n         <a href=\"https://foxypanda.me/ghost/\">\n            <h1>Admin</h1>\n         </a>\n      </li><!-- .foxy-navigation-admin -->\n   </ul>\n</nav><!-- .foxy-navigation -->\n</xmp>\n</div>\n\n<div>\n<link href=\"https://cdn.rawgit.com/TimboKZ/Synlighter/2282e7cd5f15935b792f518aca3bcd6828204c02/synlighter/synlighter.css\" rel=\"stylesheet\" type=\"text/css\">\n<script>\nwindow.scripts.push('https://cdn.rawgit.com/TimboKZ/Synlighter/2282e7cd5f15935b792f518aca3bcd6828204c02/synlighter/jquery.synlighter.js');\nwindow.scripts.push(function($) {\n  $(document).ready(function(e) {\n    $('.synlighter').synlighter();\n    $('.synlighter-alt').synlighter({ counter: 'alt' });\n  });\n}); \n</script>\n</div>","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>Synlighter is a simple syntax highlighting plugin I developed a while ago. I used it primarily as an exercise to study regular expressions, so it is still far from being called a complete product and it only supports HTML, CSS and JS highlighting. Sadly, I'm no longer developing it so don't expect any updates in the future.</p>\n\n<h1 id=\"demoandsourcecode\">Demo and source code</h1>\n\n<p>You can find the source code on Synlighter's <a href=\"https://github.com/TimboKZ/Synlighter\">GitHub page</a>. Below is a quick demo of its functionality. As said above, it was never meant to be ready for production so I apologise if it doesn't display correctly in your browser. Also, because of the vast amount of regular expressions used it might take a while to load. Just so you know, I reflected on all of the mistakes made during the development of Synlighter and although I will likely not fix them in this project, I will definitely prevent them in every project to come.</p>\n\n<h1 id=\"highlightingcss\">Highlighting CSS</h1>\n\n<div>  \n<xmp class=\"synlighter\" data-language=\"css\">/*  \n *    Syntax  ->  Code\n */\n\n.synlighter-syntax-code {\n    -webkit-box-sizing: border-box;\n     -khtml-box-sizing: border-box;\n       -moz-box-sizing: border-box;\n        -ms-box-sizing: border-box;\n         -o-box-sizing: border-box;\n            box-sizing: border-box;\n}\n.doodle input:checked ~ .animate {\n    /* We will set a delay so that the rewind effect can occur */    \n    -webkit-animation: horse-ride .5s steps(12, end) infinite 5s;\n       -moz-animation: horse-ride .5s steps(12, end) infinite 5s;\n            animation: horse-ride .5s steps(12, end) infinite 5s;\n\n    /* Imitating the Rewind effect before real animation starts */\n    -webkit-transition: all 5s cubic-bezier(0.550, 0.055, 0.675, 0.190);\n       -moz-transition: all 5s cubic-bezier(0.550, 0.055, 0.675, 0.190);\n            transition: all 5s cubic-bezier(0.550, 0.055, 0.675, 0.190);\n    background-position: -2412px 0;\n}\n.doodle div.g:after {\n    background: rgba(53, 97, 182, 0.5);\n}\n</xmp>  \n</div>\n\n<h1 id=\"highlightingjavascript\">Highlighting JavaScript</h1>\n\n<div>  \n<xmp class=\"synlighter\" data-language=\"js\">window.onpopstate = function(event) {  \n    // Why not use console?\n    alert(\"location: \" + document.location + \", state: \" + JSON.stringify(event.state));\n    if(event.state != null)\n        load_page(event.state.url);\n};\nfunction OSONG() {  \n    var adjective = null;\n    var noun = null;\n    var random = null;\n    if(getRandomInt(0, 1)) {\n        random = getRandomInt(0, giesLength - 1);\n        adjective = gies[random] + \"ic\";\n    } else {\n        random = getRandomInt(0, icsLength - 1);\n        adjective = ics[random];\n    }\n    random = getRandomInt(0, giesLength - 1);\n    noun = gies[random] + \"ist\";\n    output.addClass('active');\n    output.val(adjective + \" \" + noun);\n    output.removeClass('active');\n}\nfunction getRandomInt(min, max) {  \n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n</xmp>  \n</div>\n\n<h1 id=\"highlightinghtml\">Highlighting HTML</h1>\n\n<div>  \n<xmp class=\"synlighter\" data-language=\"html\"><nav class=\"foxy-navigation\" role=\"navigation\">  \n   <ul>\n      <li class=\"foxy-navigation-home\" role=\"presentation\">\n         <a href=\"https://foxypanda.me/\">\n            <h1>Home</h1>\n         </a>\n      </li><!-- .foxy-navigation-home -->\n      <li class=\"foxy-navigation-about\" role=\"presentation\">\n         <a href=\"https://foxypanda.me/about/\">\n            <h1>About</h1>\n         </a>\n      </li><!-- .foxy-navigation-about -->\n      <li class=\"foxy-navigation-admin\" role=\"presentation\">\n         <a href=\"https://foxypanda.me/ghost/\">\n            <h1>Admin</h1>\n         </a>\n      </li><!-- .foxy-navigation-admin -->\n   </ul>\n</nav><!-- .foxy-navigation -->  \n</xmp>  \n</div>\n\n<div>  \n<link href=\"https://cdn.rawgit.com/TimboKZ/Synlighter/2282e7cd5f15935b792f518aca3bcd6828204c02/synlighter/synlighter.css\" rel=\"stylesheet\" type=\"text/css\">  \n<script>  \nwindow.scripts.push('https://cdn.rawgit.com/TimboKZ/Synlighter/2282e7cd5f15935b792f518aca3bcd6828204c02/synlighter/jquery.synlighter.js');  \nwindow.scripts.push(function($) {  \n  $(document).ready(function(e) {\n    $('.synlighter').synlighter();\n    $('.synlighter-alt').synlighter({ counter: 'alt' });\n  });\n}); \n</script>  \n</div>","image":"https://foxypanda-ghost.s3.amazonaws.com/2016/Sep/Synlighter-1473708131433.png","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":"Synlighter Syntax Highlighting Plugin","meta_description":null,"author_id":1,"created_at":"2016-08-29 22:54:20","created_by":1,"updated_at":"2016-09-12 19:22:42","updated_by":1,"published_at":"2014-04-10 10:09:00","published_by":1,"amp":null},{"id":67,"uuid":"c2c94436-41f0-4125-bc6f-c5c2ba322d17","title":"Dota 2 Icons","slug":"dota-2-icons-2","markdown":"# Abstract\n\nI used to make various mods for Dota 2, and as you've probably guessed some of these mods were icon mods for various heroes. In this post you can see some of the icon sets I bothered to complete. I no longer mod Dota 2 so I have no idea how one would go about installing these icon packs today, so good luck finding this out if you're interested in using them.\n\nAlso it must be said that I moved this page as-is from my [old website](http://timbo.kz) so I apologise for any issues with the formatting.\n\n---\n\n<div>\n\n<div class=\"icon-set Mirana\">\n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">PotM Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Mirana\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/545g3122gm7bgrw/PotM_Custom_Icons_0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/545g3122gm7bgrw/PotM_Custom_Icons_0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://blog.sina.com.cn/s/blog_56d6c0c80101l5jz.html\"\n                                                target=\"_blank\">Ji Zhang</a></div>\n    </div>\n</div>\n<div class=\"icon-set Lanaya\">\n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Lanaya Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Lanaya\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/b4p935o7n5dvy43/Lanaya_Custom_Icons_0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/b4p935o7n5dvy43/Lanaya_Custom_Icons_0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/4.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/5.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/6.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/7.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://steamcommunity.com/sharedfiles/filedetails/?id=332982547\"\n                                                target=\"_blank\">Yi</a> and <a\n                href=\"http://dota.joyreactor.cc/post/966589\" target=\"_blank\">A.Spitfire</a></div>\n    </div>\n</div>\n<div class=\"icon-set Pugna\">\n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Pugna Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Pugna\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/rcf6vuzx0d7004v/Pugna_Custom_Icons_0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/rcf6vuzx0d7004v/Pugna_Custom_Icons_0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://mrscrake.deviantart.com/art/Dota-2-Pugna-289973383\"\n                                                target=\"_blank\">MrScrake</a></div>\n    </div>\n</div>\n<div class=\"icon-set Kunkka\">\n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Kunkka Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Kunkka\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/2tidv112aauot3y/Kunkka-Custom-Icons-0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/2tidv112aauot3y/Kunkka-Custom-Icons-0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://mikeazevedo.deviantart.com/art/DOTA-2-KUNKKA-407720534\"\n                                                target=\"_blank\">Mike Azevedo</a> and <a\n                href=\"http://rosolino.deviantart.com/art/Dota2-Kunkka-Fanart-425546582\" target=\"_blank\">Rosolino</a>\n        </div>\n    </div>\n</div>\n<div class=\"icon-set Slark\">\n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Slark Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.2</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Slark\" data-version=\"0-2\">v0.2</div>\n                    <div class=\"option\" data-slug=\"Slark\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/xc6t1xdd43q58xj/Slark_Custom_Icons_0.2.zip\" class=\"download\">Download\n                v0.2</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-2 active\"\n                 data-link=\"http://www.mediafire.com/download/xc6t1xdd43q58xj/Slark_Custom_Icons_0.2.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://swedeyart.deviantart.com/art/Slark-410729987\"\n                                                target=\"_blank\">SwedeyArt</a></div>\n    </div>\n</div>\n\n<style id=\"dota-style\">\nbody {\n  background-color: #000;\n}\n\n.display {\n  position: relative;\n  height: 250px;\n}\n.display .front {\n  position: absolute;\n  z-index: 888;\n  height: 100%;\n  width: 100%;\n  left: 0;\n  top: 0;\n}\n\n.info {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/background.png\");\n  border-top: solid 1px rgba(255, 255, 255, 0.1);\n  border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n  font-family: Trebuchet MS;\n  -webkit-box-shadow: #000 0 0 10px;\n  -moz-box-shadow: #000 0 0 10px;\n  box-shadow: #000 0 0 10px;\n  padding: 10px 20px 20px 20px;\n  border-radius: 5px;\n  position: relative;\n  z-index: 999;\n}\n.icon-set a {\n  text-decoration: none;\n}\n.info .bar {\n  text-align: center;\n}\n.info .name {\n  text-shadow: #000 0 3px 0, #000 0 2px 0, #000 0 1px 0;\n  padding: 10px 10px 0 10px;\n  display: inline-block;\n  letter-spacing: 1px;\n  line-height: 30px;\n  font-size: 20px;\n  height: 30px;\n  color: #eee;\n}\n.info .version-picker, .info .download {\n  -webkit-transition: background-color 400ms ease;\n  -moz-transition: background-color 400ms ease;\n  -o-transition: background-color 400ms ease;\n  transition: background-color 400ms ease;\n  background-color: rgba(0, 0, 0, 0.2);\n  text-decoration: none;\n  display: inline-block;\n  line-height: 40px;\n  padding: 0 15px;\n  margin: 0 10px;\n  height: 40px;\n  color: #ccc;\n}\n.info .version-picker:hover, .info .download:hover {\n  background-color: rgba(0, 0, 0, 0.4);\n}\n.info .version-picker {\n  position: relative;\n  min-width: 35px;\n  cursor: pointer;\n}\n.info .version-picker:hover .options {\n  visibility: visible;\n  opacity: 1;\n}\n.info .version-picker .options {\n  -webkit-transition: opacity 400ms ease;\n  -moz-transition: opacity 400ms ease;\n  -o-transition: opacity 400ms ease;\n  transition: opacity 400ms ease;\n  text-align: center;\n  visibility: hidden;\n  position: absolute;\n  z-index: 888;\n  opacity: 0;\n  top: 100%;\n  left: 0;\n}\n.info .version-picker .options .option {\n  -webkit-transition: background-color 400ms ease;\n  -moz-transition: background-color 400ms ease;\n  -o-transition: background-color 400ms ease;\n  transition: background-color 400ms ease;\n  background-color: rgba(0, 0, 0, 0.4);\n  line-height: 40px;\n  margin: 1px 0 0 0;\n  min-width: 35px;\n  padding: 0 15px;\n  cursor: pointer;\n  height: 40px;\n}\n.info .version-picker .options .option:hover {\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.info .artists {\n  text-shadow: #000 0 2px 0, #000 0 1px 0;\n  letter-spacing: 1px;\n  text-align: center;\n  font-size: 16px;\n  color: #888;\n}\n.info .artists a {\n  text-decoration: none;\n  color: #aaa;\n}\n.info .artists a:hover {\n  text-decoration: underline;\n}\n.info .preview {\n  position: relative;\n  padding: 10px 0;\n}\n.info .preview .version {\n  -webkit-transition: opacity 400ms ease;\n  -moz-transition: opacity 400ms ease;\n  -o-transition: opacity 400ms ease;\n  transition: opacity 400ms ease;\n  text-align: center;\n  /*position: absolute;*/\n  padding: 10px 0;\n  width: 100%;\n  opacity: 0;\n  left: 0;\n  top: 0;\n}\n.info .preview .version.active {\n  opacity: 1;\n}\n.info .preview .version .icon {\n  -webkit-box-shadow: inset rgba(255, 255, 255, 0.2) 4px 5px 5px -5px, inset rgba(0, 0, 0, 0.6) -4px -5px 5px -5px, #000 0 5px 10px;\n  -moz-box-shadow: inset rgba(255, 255, 255, 0.2) 4px 5px 5px -5px, inset rgba(0, 0, 0, 0.6) -4px -5px 5px -5px, #000 0 5px 10px;\n  box-shadow: inset rgba(255, 255, 255, 0.2) 4px 5px 5px -5px, inset rgba(0, 0, 0, 0.6) -4px -5px 5px -5px, #000 0 5px 10px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  display: inline-block;\n  height: 128px;\n  width: 128px;\n  margin: 10px;\n}\n\n#instructions {\n  font-family: Trebuchet MS;\n  padding: 60px 0 100px 0;\n  color: #ccc;\n}\n#instructions h1 {\n  text-align: center;\n  font-size: 24px;\n}\n#instructions ol {\n  margin: 0 auto;\n  width: 500px;\n}\n#instructions ol li {\n  line-height: 26px;\n  font-size: 16px;\n  margin: 15px 0;\n}\n#instructions code {\n  background-color: #111;\n  display: inline-block;\n  padding: 0px 4px;\n  margin: 2px 2px;\n}\n.Mirana {\n  margin-top: -25px;\n}\n.Mirana .display {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-back.png\");\n}\n.Mirana .display .front {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-front.png\");\n}\n.Mirana .display:before, .Mirana .display:after {\n  background-repeat: repeat-x;\n  background-size: contain;\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 777;\n  content: \"\";\n  width: 100%;\n  top: 0;\n}\n.Mirana .display:before {\n  -webkit-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  -moz-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-clouds-back.png\");\n  -webkit-animation: mirana-front 40s linear 0s infinite;\n  -moz-animation: mirana-front 40s linear 0s infinite;\n  -o-animation: mirana-front 40s linear 0s infinite;\n  animation: mirana-front 40s linear 0s infinite;\n  background-position: 0 -50px;\n}\n.Mirana .display:after {\n  -webkit-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  -moz-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-clouds-front.png\");\n  -webkit-animation: mirana-front 80s linear 0s infinite;\n  -moz-animation: mirana-front 80s linear 0s infinite;\n  -o-animation: mirana-front 80s linear 0s infinite;\n  animation: mirana-front 80s linear 0s infinite;\n  background-position: 0 -50px;\n}\n\n@-o-keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n@-moz-keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n@-webkit-keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n@keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n.Lanaya .display {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-back.png\");\n}\n.Lanaya .display .front {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-front.png\");\n  z-index: 777;\n}\n.Lanaya .display:before, .Lanaya .display:after {\n  background-repeat: no-repeat;\n  background-size: contain;\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 888;\n  content: \"\";\n  width: 100%;\n  top: 0;\n}\n.Lanaya .display:before {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-particles-front.png\");\n  -webkit-animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n  -moz-animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n  -o-animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n  animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n}\n.Lanaya .display:after {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-particles-back.png\");\n  -webkit-animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n  -moz-animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n  -o-animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n  animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n}\n.Lanaya .info .preview .version .icon {\n  height: 100px;\n  width: 100px;\n}\n\n@-o-keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n@-moz-keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n@-webkit-keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n@keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n.Pugna .display {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-back.png\");\n}\n.Pugna .display .front {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-front.png\");\n}\n.Pugna .display:before, .Pugna .display:after {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-dust.png\");\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 777;\n  content: \"\";\n  width: 50%;\n  top: 0;\n}\n.Pugna .display:before {\n  -webkit-animation: pugna-left 14s linear 0s infinite;\n  -moz-animation: pugna-left 14s linear 0s infinite;\n  -o-animation: pugna-left 14s linear 0s infinite;\n  animation: pugna-left 14s linear 0s infinite;\n  -webkit-box-shadow: inset #000 300px 0 250px -100px;\n  -moz-box-shadow: inset #000 300px 0 250px -100px;\n  box-shadow: inset #000 300px 0 250px -100px;\n  left: 0;\n}\n.Pugna .display:after {\n  -webkit-animation: pugna-right 14s linear 0s infinite;\n  -moz-animation: pugna-right 14s linear 0s infinite;\n  -o-animation: pugna-right 14s linear 0s infinite;\n  animation: pugna-right 14s linear 0s infinite;\n  -webkit-box-shadow: inset #000 -300px 0 250px -100px;\n  -moz-box-shadow: inset #000 -300px 0 250px -100px;\n  box-shadow: inset #000 -300px 0 250px -100px;\n  right: 0;\n}\n\n@-o-keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@-moz-keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@-webkit-keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@-o-keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n@-moz-keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n@-webkit-keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n@keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n.Kunkka .display {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-back.png\");\n  overflow: hidden;\n}\n.Kunkka .display .front {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-front.png\");\n}\n.Kunkka .display:before {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-light.png\");\n  -webkit-animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  -moz-animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  -o-animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  position: absolute;\n  display: block;\n  height: 670px;\n  width: 1024px;\n  z-index: 777;\n  content: \"\";\n  top: -200px;\n}\n.Kunkka .display:after {\n  -webkit-box-shadow: inset #000 -350px 0 200px -100px, inset #000 350px 0 200px -100px;\n  -moz-box-shadow: inset #000 -350px 0 200px -100px, inset #000 350px 0 200px -100px;\n  box-shadow: inset #000 -350px 0 200px -100px, inset #000 350px 0 200px -100px;\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 778;\n  content: \"\";\n  width: 100%;\n  top: 0;\n}\n\n@-o-keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n@-moz-keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n@-webkit-keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n@keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n.Slark .display {\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Slark/slark-back.png\");\n}\n.Slark .display .front {\n  -webkit-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  -moz-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  background-image: url(\"http://timbo.kz/images/Dota-2-Icons/Slark/slark-rain.png\");\n  -webkit-animation: slark-front 2s linear 0s infinite;\n  -moz-animation: slark-front 2s linear 0s infinite;\n  -o-animation: slark-front 2s linear 0s infinite;\n  animation: slark-front 2s linear 0s infinite;\n}\n\n@-o-keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n@-moz-keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n@-webkit-keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n@keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n</style>\n\n<script>\nwindow.scripts.push(function($) {\n  $(document).ready(function(e) {\n    var style = $('#dota-style');\n    var text = style.text();\n    text = text.replace(/<a href=\".+\">/gi, '');\n    text = text.replace(/<\\/a>/gi, '');\n    style.text(text);\n  });\n});\n</script>\n\n</div>","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>I used to make various mods for Dota 2, and as you've probably guessed some of these mods were icon mods for various heroes. In this post you can see some of the icon sets I bothered to complete. I no longer mod Dota 2 so I have no idea how one would go about installing these icon packs today, so good luck finding this out if you're interested in using them.</p>\n\n<p>Also it must be said that I moved this page as-is from my <a href=\"http://timbo.kz\">old website</a> so I apologise for any issues with the formatting.</p>\n\n<hr />\n\n<div>\n\n<div class=\"icon-set Mirana\">  \n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">PotM Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Mirana\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/545g3122gm7bgrw/PotM_Custom_Icons_0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/545g3122gm7bgrw/PotM_Custom_Icons_0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Mirana/icons/0.1/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://blog.sina.com.cn/s/blog_56d6c0c80101l5jz.html\"\n                                                target=\"_blank\">Ji Zhang</a></div>\n    </div>\n</div>  \n\n<div class=\"icon-set Lanaya\">  \n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Lanaya Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Lanaya\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/b4p935o7n5dvy43/Lanaya_Custom_Icons_0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/b4p935o7n5dvy43/Lanaya_Custom_Icons_0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/4.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/5.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/6.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Lanaya/icons/0.1/7.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://steamcommunity.com/sharedfiles/filedetails/?id=332982547\"\n                                                target=\"_blank\">Yi</a> and <a\n                href=\"http://dota.joyreactor.cc/post/966589\" target=\"_blank\">A.Spitfire</a></div>\n    </div>\n</div>  \n\n<div class=\"icon-set Pugna\">  \n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Pugna Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Pugna\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/rcf6vuzx0d7004v/Pugna_Custom_Icons_0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/rcf6vuzx0d7004v/Pugna_Custom_Icons_0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Pugna/icons/0.1/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://mrscrake.deviantart.com/art/Dota-2-Pugna-289973383\"\n                                                target=\"_blank\">MrScrake</a></div>\n    </div>\n</div>  \n\n<div class=\"icon-set Kunkka\">  \n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Kunkka Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.1</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Kunkka\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/2tidv112aauot3y/Kunkka-Custom-Icons-0.1.zip\" class=\"download\">Download\n                v0.1</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-1 active\"\n                 data-link=\"http://www.mediafire.com/download/2tidv112aauot3y/Kunkka-Custom-Icons-0.1.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Kunkka/icons/0.1/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://mikeazevedo.deviantart.com/art/DOTA-2-KUNKKA-407720534\"\n                                                target=\"_blank\">Mike Azevedo</a> and <a\n                href=\"http://rosolino.deviantart.com/art/Dota2-Kunkka-Fanart-425546582\" target=\"_blank\">Rosolino</a>\n        </div>\n    </div>\n</div>  \n\n<div class=\"icon-set Slark\">  \n    <div class=\"display\">\n        <div class=\"front\"></div>\n    </div>\n    <div class=\"info\">\n        <div class=\"bar\">\n            <div class=\"name\">Slark Custom Icons</div>\n            <div class=\"version-picker\"><span class=\"current-version\">v0.2</span>\n                <div class=\"options\">\n                    <div class=\"option\" data-slug=\"Slark\" data-version=\"0-2\">v0.2</div>\n                    <div class=\"option\" data-slug=\"Slark\" data-version=\"0-1\">v0.1</div>\n                </div>\n            </div>\n            <a href=\"http://www.mediafire.com/download/xc6t1xdd43q58xj/Slark_Custom_Icons_0.2.zip\" class=\"download\">Download\n                v0.2</a></div>\n        <div class=\"preview\">\n            <div class=\"version version-0-2 active\"\n                 data-link=\"http://www.mediafire.com/download/xc6t1xdd43q58xj/Slark_Custom_Icons_0.2.zip\">\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/1.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/2.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/3.png');\"></div>\n                <div class=\"icon\"\n                     style=\"background-image:url('http://timbo.kz/images/Dota-2-Icons/Slark/icons/0.2/4.png');\"></div>\n            </div>\n        </div>\n        <div class=\"artists\">Original art by <a href=\"http://swedeyart.deviantart.com/art/Slark-410729987\"\n                                                target=\"_blank\">SwedeyArt</a></div>\n    </div>\n</div>\n\n<style id=\"dota-style\">  \nbody {  \n  background-color: #000;\n}\n\n.display {\n  position: relative;\n  height: 250px;\n}\n.display .front {\n  position: absolute;\n  z-index: 888;\n  height: 100%;\n  width: 100%;\n  left: 0;\n  top: 0;\n}\n\n.info {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/background.png\">http://timbo.kz/images/Dota-2-Icons/background.png</a>\");\n  border-top: solid 1px rgba(255, 255, 255, 0.1);\n  border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n  font-family: Trebuchet MS;\n  -webkit-box-shadow: #000 0 0 10px;\n  -moz-box-shadow: #000 0 0 10px;\n  box-shadow: #000 0 0 10px;\n  padding: 10px 20px 20px 20px;\n  border-radius: 5px;\n  position: relative;\n  z-index: 999;\n}\n.icon-set a {\n  text-decoration: none;\n}\n.info .bar {\n  text-align: center;\n}\n.info .name {\n  text-shadow: #000 0 3px 0, #000 0 2px 0, #000 0 1px 0;\n  padding: 10px 10px 0 10px;\n  display: inline-block;\n  letter-spacing: 1px;\n  line-height: 30px;\n  font-size: 20px;\n  height: 30px;\n  color: #eee;\n}\n.info .version-picker, .info .download {\n  -webkit-transition: background-color 400ms ease;\n  -moz-transition: background-color 400ms ease;\n  -o-transition: background-color 400ms ease;\n  transition: background-color 400ms ease;\n  background-color: rgba(0, 0, 0, 0.2);\n  text-decoration: none;\n  display: inline-block;\n  line-height: 40px;\n  padding: 0 15px;\n  margin: 0 10px;\n  height: 40px;\n  color: #ccc;\n}\n.info .version-picker:hover, .info .download:hover {\n  background-color: rgba(0, 0, 0, 0.4);\n}\n.info .version-picker {\n  position: relative;\n  min-width: 35px;\n  cursor: pointer;\n}\n.info .version-picker:hover .options {\n  visibility: visible;\n  opacity: 1;\n}\n.info .version-picker .options {\n  -webkit-transition: opacity 400ms ease;\n  -moz-transition: opacity 400ms ease;\n  -o-transition: opacity 400ms ease;\n  transition: opacity 400ms ease;\n  text-align: center;\n  visibility: hidden;\n  position: absolute;\n  z-index: 888;\n  opacity: 0;\n  top: 100%;\n  left: 0;\n}\n.info .version-picker .options .option {\n  -webkit-transition: background-color 400ms ease;\n  -moz-transition: background-color 400ms ease;\n  -o-transition: background-color 400ms ease;\n  transition: background-color 400ms ease;\n  background-color: rgba(0, 0, 0, 0.4);\n  line-height: 40px;\n  margin: 1px 0 0 0;\n  min-width: 35px;\n  padding: 0 15px;\n  cursor: pointer;\n  height: 40px;\n}\n.info .version-picker .options .option:hover {\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.info .artists {\n  text-shadow: #000 0 2px 0, #000 0 1px 0;\n  letter-spacing: 1px;\n  text-align: center;\n  font-size: 16px;\n  color: #888;\n}\n.info .artists a {\n  text-decoration: none;\n  color: #aaa;\n}\n.info .artists a:hover {\n  text-decoration: underline;\n}\n.info .preview {\n  position: relative;\n  padding: 10px 0;\n}\n.info .preview .version {\n  -webkit-transition: opacity 400ms ease;\n  -moz-transition: opacity 400ms ease;\n  -o-transition: opacity 400ms ease;\n  transition: opacity 400ms ease;\n  text-align: center;\n  /*position: absolute;*/\n  padding: 10px 0;\n  width: 100%;\n  opacity: 0;\n  left: 0;\n  top: 0;\n}\n.info .preview .version.active {\n  opacity: 1;\n}\n.info .preview .version .icon {\n  -webkit-box-shadow: inset rgba(255, 255, 255, 0.2) 4px 5px 5px -5px, inset rgba(0, 0, 0, 0.6) -4px -5px 5px -5px, #000 0 5px 10px;\n  -moz-box-shadow: inset rgba(255, 255, 255, 0.2) 4px 5px 5px -5px, inset rgba(0, 0, 0, 0.6) -4px -5px 5px -5px, #000 0 5px 10px;\n  box-shadow: inset rgba(255, 255, 255, 0.2) 4px 5px 5px -5px, inset rgba(0, 0, 0, 0.6) -4px -5px 5px -5px, #000 0 5px 10px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  display: inline-block;\n  height: 128px;\n  width: 128px;\n  margin: 10px;\n}\n\n#instructions {\n  font-family: Trebuchet MS;\n  padding: 60px 0 100px 0;\n  color: #ccc;\n}\n#instructions h1 {\n  text-align: center;\n  font-size: 24px;\n}\n#instructions ol {\n  margin: 0 auto;\n  width: 500px;\n}\n#instructions ol li {\n  line-height: 26px;\n  font-size: 16px;\n  margin: 15px 0;\n}\n#instructions code {\n  background-color: #111;\n  display: inline-block;\n  padding: 0px 4px;\n  margin: 2px 2px;\n}\n.Mirana {\n  margin-top: -25px;\n}\n.Mirana .display {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-back.png\">http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-back.png</a>\");\n}\n.Mirana .display .front {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-front.png\">http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-front.png</a>\");\n}\n.Mirana .display:before, .Mirana .display:after {\n  background-repeat: repeat-x;\n  background-size: contain;\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 777;\n  content: \"\";\n  width: 100%;\n  top: 0;\n}\n.Mirana .display:before {\n  -webkit-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  -moz-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-clouds-back.png\">http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-clouds-back.png</a>\");\n  -webkit-animation: mirana-front 40s linear 0s infinite;\n  -moz-animation: mirana-front 40s linear 0s infinite;\n  -o-animation: mirana-front 40s linear 0s infinite;\n  animation: mirana-front 40s linear 0s infinite;\n  background-position: 0 -50px;\n}\n.Mirana .display:after {\n  -webkit-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  -moz-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-clouds-front.png\">http://timbo.kz/images/Dota-2-Icons/Mirana/mirana-clouds-front.png</a>\");\n  -webkit-animation: mirana-front 80s linear 0s infinite;\n  -moz-animation: mirana-front 80s linear 0s infinite;\n  -o-animation: mirana-front 80s linear 0s infinite;\n  animation: mirana-front 80s linear 0s infinite;\n  background-position: 0 -50px;\n}\n\n@-o-keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n@-moz-keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n@-webkit-keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n@keyframes mirana-front {\n  from {\n    background-position: 0 -50px;\n  }\n  to {\n    background-position: 794px -50px;\n  }\n}\n.Lanaya .display {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-back.png\">http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-back.png</a>\");\n}\n.Lanaya .display .front {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-front.png\">http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-front.png</a>\");\n  z-index: 777;\n}\n.Lanaya .display:before, .Lanaya .display:after {\n  background-repeat: no-repeat;\n  background-size: contain;\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 888;\n  content: \"\";\n  width: 100%;\n  top: 0;\n}\n.Lanaya .display:before {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-particles-front.png\">http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-particles-front.png</a>\");\n  -webkit-animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n  -moz-animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n  -o-animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n  animation: lanaya-front 1s ease-in-out 0s infinite alternate;\n}\n.Lanaya .display:after {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-particles-back.png\">http://timbo.kz/images/Dota-2-Icons/Lanaya/lanaya-particles-back.png</a>\");\n  -webkit-animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n  -moz-animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n  -o-animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n  animation: lanaya-front 2s ease-in-out 0s infinite alternate;\n}\n.Lanaya .info .preview .version .icon {\n  height: 100px;\n  width: 100px;\n}\n\n@-o-keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n@-moz-keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n@-webkit-keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n@keyframes lanaya-front {\n  from {\n    background-position: 0 -2px;\n  }\n  to {\n    background-position: 0 6px;\n  }\n}\n.Pugna .display {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-back.png\">http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-back.png</a>\");\n}\n.Pugna .display .front {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-front.png\">http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-front.png</a>\");\n}\n.Pugna .display:before, .Pugna .display:after {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-dust.png\">http://timbo.kz/images/Dota-2-Icons/Pugna/pugna-dust.png</a>\");\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 777;\n  content: \"\";\n  width: 50%;\n  top: 0;\n}\n.Pugna .display:before {\n  -webkit-animation: pugna-left 14s linear 0s infinite;\n  -moz-animation: pugna-left 14s linear 0s infinite;\n  -o-animation: pugna-left 14s linear 0s infinite;\n  animation: pugna-left 14s linear 0s infinite;\n  -webkit-box-shadow: inset #000 300px 0 250px -100px;\n  -moz-box-shadow: inset #000 300px 0 250px -100px;\n  box-shadow: inset #000 300px 0 250px -100px;\n  left: 0;\n}\n.Pugna .display:after {\n  -webkit-animation: pugna-right 14s linear 0s infinite;\n  -moz-animation: pugna-right 14s linear 0s infinite;\n  -o-animation: pugna-right 14s linear 0s infinite;\n  animation: pugna-right 14s linear 0s infinite;\n  -webkit-box-shadow: inset #000 -300px 0 250px -100px;\n  -moz-box-shadow: inset #000 -300px 0 250px -100px;\n  box-shadow: inset #000 -300px 0 250px -100px;\n  right: 0;\n}\n\n@-o-keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@-moz-keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@-webkit-keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@keyframes pugna-left {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -250px 0;\n  }\n}\n@-o-keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n@-moz-keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n@-webkit-keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n@keyframes pugna-right {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: 250px 0;\n  }\n}\n.Kunkka .display {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-back.png\">http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-back.png</a>\");\n  overflow: hidden;\n}\n.Kunkka .display .front {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-front.png\">http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-front.png</a>\");\n}\n.Kunkka .display:before {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-light.png\">http://timbo.kz/images/Dota-2-Icons/Kunkka/kunkka-light.png</a>\");\n  -webkit-animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  -moz-animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  -o-animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  animation: kunkka-front 5s ease-in-out 0s infinite alternate;\n  position: absolute;\n  display: block;\n  height: 670px;\n  width: 1024px;\n  z-index: 777;\n  content: \"\";\n  top: -200px;\n}\n.Kunkka .display:after {\n  -webkit-box-shadow: inset #000 -350px 0 200px -100px, inset #000 350px 0 200px -100px;\n  -moz-box-shadow: inset #000 -350px 0 200px -100px, inset #000 350px 0 200px -100px;\n  box-shadow: inset #000 -350px 0 200px -100px, inset #000 350px 0 200px -100px;\n  position: absolute;\n  display: block;\n  height: 250px;\n  z-index: 778;\n  content: \"\";\n  width: 100%;\n  top: 0;\n}\n\n@-o-keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n@-moz-keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n@-webkit-keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n@keyframes kunkka-front {\n  from {\n    -webkit-transform: rotateZ(-10deg);\n    -ms-transform: rotateZ(-10deg);\n    transform: rotateZ(-10deg);\n  }\n  to {\n    -webkit-transform: rotateZ(10deg);\n    -ms-transform: rotateZ(10deg);\n    transform: rotateZ(10deg);\n  }\n}\n.Slark .display {\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Slark/slark-back.png\">http://timbo.kz/images/Dota-2-Icons/Slark/slark-back.png</a>\");\n}\n.Slark .display .front {\n  -webkit-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  -moz-box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  box-shadow: inset #000 -200px 0 250px -100px, inset #000 200px 0 250px -100px;\n  background-image: url(\"<a href=\"http://timbo.kz/images/Dota-2-Icons/Slark/slark-rain.png\">http://timbo.kz/images/Dota-2-Icons/Slark/slark-rain.png</a>\");\n  -webkit-animation: slark-front 2s linear 0s infinite;\n  -moz-animation: slark-front 2s linear 0s infinite;\n  -o-animation: slark-front 2s linear 0s infinite;\n  animation: slark-front 2s linear 0s infinite;\n}\n\n@-o-keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n@-moz-keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n@-webkit-keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n@keyframes slark-front {\n  from {\n    background-position: 0 0;\n  }\n  to {\n    background-position: -400px 400px;\n  }\n}\n</style>\n\n<script>  \nwindow.scripts.push(function($) {  \n  $(document).ready(function(e) {\n    var style = $('#dota-style');\n    var text = style.text();\n    text = text.replace(/<a href=\".+\">/gi, '');\n    text = text.replace(/<\\/a>/gi, '');\n    style.text(text);\n  });\n});\n</script>\n\n<p></div></p>","image":"https://foxypanda-ghost.s3.amazonaws.com/2016/Sep/Mirana-1472763214979.png","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-29 22:54:32","created_by":1,"updated_at":"2016-09-01 21:45:40","updated_by":1,"published_at":"2015-01-17 21:16:00","published_by":1,"amp":null},{"id":68,"uuid":"b3a79170-a6ff-4e19-8078-af30ae37288b","title":"Reflex PHP","slug":"reflex-php-2","markdown":"# Abstract\n\nI was thinking about an easy way to simulate various APIs, and I was looking for a reusable solution that doesn't require much setup and if possible is platform/language independent. The primary application would be in development of apps that rely on some API that has not been made available yet and in testing how one's system would respond to delayed API responses.\n\n# Introducing Reflex\n\nReflex is an experimental tool that does exactly that: it sends back whatever POST request body it receives allowing the user to adjust the delay, content type, or alter the way the output is produced. You can find usage instructions on [its GitHub page](https://github.com/TimboKZ/reflex), and the tool itself is available at [https://hosting.kawaiidesu.me/reflex/](https://hosting.kawaiidesu.me/reflex/).","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>I was thinking about an easy way to simulate various APIs, and I was looking for a reusable solution that doesn't require much setup and if possible is platform/language independent. The primary application would be in development of apps that rely on some API that has not been made available yet and in testing how one's system would respond to delayed API responses.</p>\n\n<h1 id=\"introducingreflex\">Introducing Reflex</h1>\n\n<p>Reflex is an experimental tool that does exactly that: it sends back whatever POST request body it receives allowing the user to adjust the delay, content type, or alter the way the output is produced. You can find usage instructions on <a href=\"https://github.com/TimboKZ/reflex\">its GitHub page</a>, and the tool itself is available at <a href=\"https://hosting.kawaiidesu.me/reflex/\">https://hosting.kawaiidesu.me/reflex/</a>.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-10-30 19:07:28","created_by":1,"updated_at":"2016-10-30 19:15:51","updated_by":1,"published_at":"2016-10-30 19:15:51","published_by":1,"amp":null},{"id":69,"uuid":"31dd4460-78d4-4191-8f44-dfe20afed608","title":"Spotify playback and volume control using keyboard shortcuts on Linux","slug":"spotify-playback-and-volume-control-using-keyboard-shortcuts-on-linux-2","markdown":"# Abstract\n\nRecently I've been playing around with my new Ubuntu setup (using bspwm, seen below) and I needed to get my keyboard playback and volume controls working to use Spotify efficiently. While this topic has been covered extensively on the web, the knowledge is currently spread among multiple websites and this is my attempt to gather some parts of it in one place so it'll be easier for you to start off. Obviously the exact setups will vary greatly depending on your setup, but I have this article will be able to give you a starting point.\n\n![Tim's Ubuntu 16.10 setup using bspwm](https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/euql1n_dominator-1487433582686.png)\n\nA quick clarification: In this article I'll be talking about designated volume control keys, such as the ones below as they appear on my K70. That said, you can potentially map volume/playback controls to any key you want, e.g. `F11` or `Super + q`.\n\n![Corsair K70 volume control keys](https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/k70_audio_2-1487434271281.png)\n\n# Keyboard volume controls\n\nFirst of all, the keys you're interested in are `XF86AudioRaiseVolume`, `XF86AudioLowerVolume` and `XF86AudioMute`.\n\nTo find which commands to bind them to, you must know what you use for sound control in your system. I personally use [PulseAudio](https://wiki.archlinux.org/index.php/PulseAudio#Keyboard_volume_control) so in my case `pactl` does the job, while you might use something like [ALSA](https://wiki.archlinux.org/index.php/Advanced_Linux_Sound_Architecture#Keyboard_volume_control).\n\nI also use [sxhkd](https://github.com/baskerville/sxhkd) to handle all of the bindings, and below you can see what I had to add to my `sxhkdrc`. I set the volume increment to 5% but you can change it to whatever works for you.\n\n```language-bash\n# Structure is:\n# <keyboard-key>\n#     <command-to-bind>\nXF86AudioMute\n    pactl set-sink-mute 0 toggle\nXF86AudioRaiseVolume\n    pactl set-sink-volume 0 +5%\nXF86AudioLowerVolume\n    pactl set-sink-volume 0 -5%;\n```\n\nNote that this will adjust volume for the whole system, not just Spotify. I looked into adjusting Spotify volume using the approach described below, and sadly [it doesn't seem](https://community.spotify.com/t5/Desktop-Linux-Windows-Web-Player/Cannot-control-volume-using-MPRIS-D-bus/td-p/1458761) to be possible at the time of writing.\n\n# Keyboard Spotify controls\n\nThere are [several ways](https://wiki.archlinux.org/index.php/spotify) to get keyboard controls to work with Spotify Linux client, I went with MPRIS2 + D-Bus combination. I'm running Ubuntu 16.10 so I had to install a couple of dependencies (`sudo apt-get install mpdris2 mpris-remote`), but once this was out of the way this addition to my `sxhkdrc` did the trick:\n\n```language-bash\nXF86AudioPlay\n    dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause\nXF86AudioStop\n    dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Stop\nXF86AudioNext\n    dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Next\nXF86AudioPrev\n    dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Previous\n```\n\nYou can also use this little hacky command for `XF86AudioPlay` to launch Spotify when you press play and Spotify is not open (just don't spam it):\n\n```language-bash\nXF86AudioPlay\n    if ! dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause; then spotify; fi\n```\n\nAs I said before, these exact steps might not work for you but I hope I've pointed in the right direction.","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>Recently I've been playing around with my new Ubuntu setup (using bspwm, seen below) and I needed to get my keyboard playback and volume controls working to use Spotify efficiently. While this topic has been covered extensively on the web, the knowledge is currently spread among multiple websites and this is my attempt to gather some parts of it in one place so it'll be easier for you to start off. Obviously the exact setups will vary greatly depending on your setup, but I have this article will be able to give you a starting point.</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/euql1n_dominator-1487433582686.png\" alt=\"Tim's Ubuntu 16.10 setup using bspwm\" /></p>\n\n<p>A quick clarification: In this article I'll be talking about designated volume control keys, such as the ones below as they appear on my K70. That said, you can potentially map volume/playback controls to any key you want, e.g. <code>F11</code> or <code>Super + q</code>.</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/k70_audio_2-1487434271281.png\" alt=\"Corsair K70 volume control keys\" /></p>\n\n<h1 id=\"keyboardvolumecontrols\">Keyboard volume controls</h1>\n\n<p>First of all, the keys you're interested in are <code>XF86AudioRaiseVolume</code>, <code>XF86AudioLowerVolume</code> and <code>XF86AudioMute</code>.</p>\n\n<p>To find which commands to bind them to, you must know what you use for sound control in your system. I personally use <a href=\"https://wiki.archlinux.org/index.php/PulseAudio#Keyboard_volume_control\">PulseAudio</a> so in my case <code>pactl</code> does the job, while you might use something like <a href=\"https://wiki.archlinux.org/index.php/Advanced_Linux_Sound_Architecture#Keyboard_volume_control\">ALSA</a>.</p>\n\n<p>I also use <a href=\"https://github.com/baskerville/sxhkd\">sxhkd</a> to handle all of the bindings, and below you can see what I had to add to my <code>sxhkdrc</code>. I set the volume increment to 5% but you can change it to whatever works for you.</p>\n\n<pre><code class=\"language-bash\"># Structure is:\n# &lt;keyboard-key&gt;\n#     &lt;command-to-bind&gt;\nXF86AudioMute  \n    pactl set-sink-mute 0 toggle\nXF86AudioRaiseVolume  \n    pactl set-sink-volume 0 +5%\nXF86AudioLowerVolume  \n    pactl set-sink-volume 0 -5%;\n</code></pre>\n\n<p>Note that this will adjust volume for the whole system, not just Spotify. I looked into adjusting Spotify volume using the approach described below, and sadly <a href=\"https://community.spotify.com/t5/Desktop-Linux-Windows-Web-Player/Cannot-control-volume-using-MPRIS-D-bus/td-p/1458761\">it doesn't seem</a> to be possible at the time of writing.</p>\n\n<h1 id=\"keyboardspotifycontrols\">Keyboard Spotify controls</h1>\n\n<p>There are <a href=\"https://wiki.archlinux.org/index.php/spotify\">several ways</a> to get keyboard controls to work with Spotify Linux client, I went with MPRIS2 + D-Bus combination. I'm running Ubuntu 16.10 so I had to install a couple of dependencies (<code>sudo apt-get install mpdris2 mpris-remote</code>), but once this was out of the way this addition to my <code>sxhkdrc</code> did the trick:</p>\n\n<pre><code class=\"language-bash\">XF86AudioPlay  \n    dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause\nXF86AudioStop  \n    dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Stop\nXF86AudioNext  \n    dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Next\nXF86AudioPrev  \n    dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Previous\n</code></pre>\n\n<p>You can also use this little hacky command for <code>XF86AudioPlay</code> to launch Spotify when you press play and Spotify is not open (just don't spam it):</p>\n\n<pre><code class=\"language-bash\">XF86AudioPlay  \n    if ! dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause; then spotify; fi\n</code></pre>\n\n<p>As I said before, these exact steps might not work for you but I hope I've pointed in the right direction.</p>","image":"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/k70_audio_2-1487434138556.png","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":"Guide on how to get keyboard Spotify playback and volume controls working on Linux, using Corsair K70 and Ubuntu 16.10 as an example.","author_id":1,"created_at":"2017-02-18 15:56:18","created_by":1,"updated_at":"2017-02-18 17:08:44","updated_by":1,"published_at":"2017-02-18 16:39:40","published_by":1,"amp":null},{"id":70,"uuid":"e1a84a29-f134-493b-92a7-f6e80a690b95","title":"Discord Spoiler Bot","slug":"discord-spoiler-bot-2","markdown":"# Abstract\n\nI was elected as the treasurer of UCLU Anime Society 2016/17, and since I was a computer science student I was also responsible for IT in our society. Half way into the academic year we created a Discord chat for our society, and people begun requesting various features. One of said features was a bot that would somehow hide spoilers, which is how Discord Spoiler Bot was born.\n\n# Discord Spoiler Bot\n\nBelow you can see a quick demonstration of the bot in action. It deletes the original message and replaces it with a GIF that requires the user to hover over it to reveal content. If you haven't used Discord, to you this would sound like a very hacky way of hiding spoilers - well, it is! Sadly there aren't any other simple ways to achieve the same result.\n\n![Discord Spoiler Bot demonstration](https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/Spoiler_Bot_One_Line-1487990846207.gif)\n\nYou can find out more about about Discord Spoiler Bot on [its GitHub page](https://github.com/TimboKZ/discord-spoiler-bot). By the way, it also works with long strings and by default trims content of the spoiler if takes up more than 6 lines, but this limit can be adjusted.\n\n![Discord Spoiler Bot with spoiler content spanning over multiple lines](https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/Spoiler_Bot_Multiple_Lines-1487991244852.gif)\n\nFinally, you can mark messages from other users as spoilers given you have sufficient permissions.\n\n![Discord Spoiler Bot marking someone else's messages as spoilers](https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/Spoiler_Bot_Other_Messages-1488088171731.gif)","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>I was elected as the treasurer of UCLU Anime Society 2016/17, and since I was a computer science student I was also responsible for IT in our society. Half way into the academic year we created a Discord chat for our society, and people begun requesting various features. One of said features was a bot that would somehow hide spoilers, which is how Discord Spoiler Bot was born.</p>\n\n<h1 id=\"discordspoilerbot\">Discord Spoiler Bot</h1>\n\n<p>Below you can see a quick demonstration of the bot in action. It deletes the original message and replaces it with a GIF that requires the user to hover over it to reveal content. If you haven't used Discord, to you this would sound like a very hacky way of hiding spoilers - well, it is! Sadly there aren't any other simple ways to achieve the same result.</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/Spoiler_Bot_One_Line-1487990846207.gif\" alt=\"Discord Spoiler Bot demonstration\" /></p>\n\n<p>You can find out more about about Discord Spoiler Bot on <a href=\"https://github.com/TimboKZ/discord-spoiler-bot\">its GitHub page</a>. By the way, it also works with long strings and by default trims content of the spoiler if takes up more than 6 lines, but this limit can be adjusted.</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/Spoiler_Bot_Multiple_Lines-1487991244852.gif\" alt=\"Discord Spoiler Bot with spoiler content spanning over multiple lines\" /></p>\n\n<p>Finally, you can mark messages from other users as spoilers given you have sufficient permissions.</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/Spoiler_Bot_Other_Messages-1488088171731.gif\" alt=\"Discord Spoiler Bot marking someone else's messages as spoilers\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-02-25 01:02:56","created_by":1,"updated_at":"2017-02-26 05:49:40","updated_by":1,"published_at":"2017-02-25 01:11:04","published_by":1,"amp":null},{"id":71,"uuid":"8d3959bb-d881-43ce-a828-9dda854dc56c","title":"COMP207P Compilers Guidelines Part 2: Java Bytecode Optimisation","slug":"comp207p-compilers-guidelines-part-2-java-bytecode-optimisation-2","markdown":"# Abstract\n\nAs described in [the previous article](https://foxypanda.me/comp207p-compilers-coursework-guidelines/), during my time in UCL I had to work on several pieces of coursework related to the development of compilers. In this article I'll be expressing some thoughts and suggestions about the second coursework, the one concerned with altering Java bytecode to implement things like constant folding and constant propagation.\n\nIn contrast to the previous article, this one will be relatively short and won't have as many instructions. Instead, it will provide some food for thought that will hopefully help you wrap your head around this coursework. I'll talk a bit about Java bytecode and then will move on to [Byte Code Engineering Library](https://commons.apache.org/proper/commons-bcel/) (BCEL).\n\nFYI, I got [Federica Sarro](http://www0.cs.ucl.ac.uk/staff/F.Sarro/)'s permission to share this article. She asked me to remind everyone that these are just my own thoughts and this article was not reviewed by any lecturers.\n\n# Java bytecode\n\nUnderstanding how Java bytecode is interpreted by the Java Virtual Machine (JVM) is crucial for this coursework. A good place to start would be [Mastering Java Bytecode at the Core of the JVM](https://zeroturnaround.com/rebellabs/rebel-labs-report-mastering-java-bytecode-at-the-core-of-the-jvm/) by Anton Ahripov - it's quite a lengthy guide but it covers pretty much everything you'd want to know about bytecode at this stage. That said, you most likely won't need to read the whole thing, just the first couple of pages to get a basic idea of what you're working with.\n\nOnce you understand what Java bytecode is, I'd suggest you begin playing with the actual code provided as a part of the coursework. The process for preparing the project is extremely straightforward - Just install [Ant](http://ant.apache.org/), unzip the coursework archive somewhere and run `ant test` in the project root. You might notice that all tests will pass although you haven't done anything - that is because the tests only confirm that the alterations you made to the bytecode do not change the behaviour of the code but don't actually test how efficiently you've optimised the code.\n\n> Quick tip: IDEs like IntelliJ Idea usually have built-in features to decompile bytecode, which might be pretty useful when it comes to not only understanding how bytecode works but also confirming that your optimisations worked as intended.\n\nTo see what bytecode is produced from the example code in the project, you can add the snippet below to your `ConstantFolder.java`. Keep in mind that this is just a quick way to peek at the bytecode, I'd suggest coming up with a different abstraction for the actual implementation. In fact, the implementation I used differed significantly from what you see below.\n\n```language-java\npublic void optimize() {\n    ClassGen classGen = new ClassGen(original);\n    ConstantPoolGen constPoolGen = classGen.getConstantPool();\n    Method[] methods = classGen.getMethods();\n    for (Method method : methods) {\n        MethodGen methodGen = new MethodGen(method, classGen.getClassName(), constPoolGen);\n        System.out.println(classGen.getClassName() + \" > \" + method.getName());\n        System.out.println(methodGen.getInstructionList());\n    }\n    this.optimized = gen.getJavaClass();\n}\n```\n\nThe output this code will give you can be seen below. On the left you'll see decompiled bytecode of one of the dummy test classes and on the right is the list of instructions that BCEL has extracted for you.\n\n![Decompiled Java bytecode on the left, instruction list outputted by BCEL on the right](https://foxypanda-ghost.s3.amazonaws.com/2017/Mar/bytecode-1490671577694.png)\n\nI found [Java bytecode instruction listings on Wikipedia](https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings) extremely useful when trying to find how bytecode relates to the actual Java code. Once you get to a level where you're confident with logic that bytecode instructions follow, you shouldn't have any issues coming up with strategies for different optimisations.\n\nFor this coursework, you'll mostly be working `ConstantPushInstruction`, `StoreInstruction`, `LoadInstruction`, `ArithmeticInstruction`, `GotoInstruction` and the children of these classes. Sadly this is as far as I can go for Java bytecode without giving too much info away. In the next section I'll talk a bit about using BCEL.\n\n# BCEL\n\nFirst of all, [obligatory link to BCEL API manual](https://commons.apache.org/proper/commons-bcel/manual/bcel-api.html). Now BCEL is reasonably flexible and there are multiple ways in which you could design your solution. I'm going to talk a bit about the abstraction that worked reasonably well for me.\n\n","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>As described in <a href=\"https://foxypanda.me/comp207p-compilers-coursework-guidelines/\">the previous article</a>, during my time in UCL I had to work on several pieces of coursework related to the development of compilers. In this article I'll be expressing some thoughts and suggestions about the second coursework, the one concerned with altering Java bytecode to implement things like constant folding and constant propagation.</p>\n\n<p>In contrast to the previous article, this one will be relatively short and won't have as many instructions. Instead, it will provide some food for thought that will hopefully help you wrap your head around this coursework. I'll talk a bit about Java bytecode and then will move on to <a href=\"https://commons.apache.org/proper/commons-bcel/\">Byte Code Engineering Library</a> (BCEL).</p>\n\n<p>FYI, I got <a href=\"http://www0.cs.ucl.ac.uk/staff/F.Sarro/\">Federica Sarro</a>'s permission to share this article. She asked me to remind everyone that these are just my own thoughts and this article was not reviewed by any lecturers.</p>\n\n<h1 id=\"javabytecode\">Java bytecode</h1>\n\n<p>Understanding how Java bytecode is interpreted by the Java Virtual Machine (JVM) is crucial for this coursework. A good place to start would be <a href=\"https://zeroturnaround.com/rebellabs/rebel-labs-report-mastering-java-bytecode-at-the-core-of-the-jvm/\">Mastering Java Bytecode at the Core of the JVM</a> by Anton Ahripov - it's quite a lengthy guide but it covers pretty much everything you'd want to know about bytecode at this stage. That said, you most likely won't need to read the whole thing, just the first couple of pages to get a basic idea of what you're working with.</p>\n\n<p>Once you understand what Java bytecode is, I'd suggest you begin playing with the actual code provided as a part of the coursework. The process for preparing the project is extremely straightforward - Just install <a href=\"http://ant.apache.org/\">Ant</a>, unzip the coursework archive somewhere and run <code>ant test</code> in the project root. You might notice that all tests will pass although you haven't done anything - that is because the tests only confirm that the alterations you made to the bytecode do not change the behaviour of the code but don't actually test how efficiently you've optimised the code.</p>\n\n<blockquote>\n  <p>Quick tip: IDEs like IntelliJ Idea usually have built-in features to decompile bytecode, which might be pretty useful when it comes to not only understanding how bytecode works but also confirming that your optimisations worked as intended.</p>\n</blockquote>\n\n<p>To see what bytecode is produced from the example code in the project, you can add the snippet below to your <code>ConstantFolder.java</code>. Keep in mind that this is just a quick way to peek at the bytecode, I'd suggest coming up with a different abstraction for the actual implementation. In fact, the implementation I used differed significantly from what you see below.</p>\n\n<pre><code class=\"language-java\">public void optimize() {  \n    ClassGen classGen = new ClassGen(original);\n    ConstantPoolGen constPoolGen = classGen.getConstantPool();\n    Method[] methods = classGen.getMethods();\n    for (Method method : methods) {\n        MethodGen methodGen = new MethodGen(method, classGen.getClassName(), constPoolGen);\n        System.out.println(classGen.getClassName() + \" &gt; \" + method.getName());\n        System.out.println(methodGen.getInstructionList());\n    }\n    this.optimized = gen.getJavaClass();\n}\n</code></pre>\n\n<p>The output this code will give you can be seen below. On the left you'll see decompiled bytecode of one of the dummy test classes and on the right is the list of instructions that BCEL has extracted for you.</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Mar/bytecode-1490671577694.png\" alt=\"Decompiled Java bytecode on the left, instruction list outputted by BCEL on the right\" /></p>\n\n<p>I found <a href=\"https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings\">Java bytecode instruction listings on Wikipedia</a> extremely useful when trying to find how bytecode relates to the actual Java code. Once you get to a level where you're confident with logic that bytecode instructions follow, you shouldn't have any issues coming up with strategies for different optimisations.</p>\n\n<p>For this coursework, you'll mostly be working <code>ConstantPushInstruction</code>, <code>StoreInstruction</code>, <code>LoadInstruction</code>, <code>ArithmeticInstruction</code>, <code>GotoInstruction</code> and the children of these classes. Sadly this is as far as I can go for Java bytecode without giving too much info away. In the next section I'll talk a bit about using BCEL.</p>\n\n<h1 id=\"bcel\">BCEL</h1>\n\n<p>First of all, <a href=\"https://commons.apache.org/proper/commons-bcel/manual/bcel-api.html\">obligatory link to BCEL API manual</a>. Now BCEL is reasonably flexible and there are multiple ways in which you could design your solution. I'm going to talk a bit about the abstraction that worked reasonably well for me.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-03-28 02:42:28","created_by":1,"updated_at":"2017-04-06 21:52:25","updated_by":1,"published_at":"2017-04-06 21:52:25","published_by":1,"amp":null},{"id":72,"uuid":"e0f431be-154d-43f9-9389-1c8355bfdc09","title":"Envision","slug":"envision-2","markdown":"","mobiledoc":null,"html":"","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-29 22:54:26","created_by":1,"updated_at":"2016-08-29 22:54:26","updated_by":1,"published_at":null,"published_by":null,"amp":null},{"id":73,"uuid":"a5d2f6a6-b2c2-4d28-9ae3-bb76cc09db3a","title":"Hiding compiled JavaScript or CSS from GitHub diff","slug":"hiding-compiled-javascript-or-css-from-github-diff-2","markdown":"# Abstract\n\nWhile working on [Blitz](https://github.com/TimboKZ/blitz), a static site generator I'm developing, I wanted to prevent compiled JavaScript from cluttering the diffs. I was using TypeScript which was compiled into JS, so I was really only interested in the changes to TS source code.\n\n# Solution\n\nTo avoid wasting your time, let's jump into it straight away. You have to make sure that a source map is appended to any JS (or CSS) files you want to hide from your diffs. As an example, look at the source maps appended to JS files in Blitz:\n\n```language-javascript\n        // ...\n        projectPreviewer.startServer();\n    };\n    return Blitz;\n}());\nexports.Blitz = Blitz;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,[...]\n```\n\nPay attention to the inline source map that can be seen in the very end. It is likely that tool you're using to get the compiled JS/CSS has a feature that can generate such source maps, so do a quick Google search if you need it.\n\nAs you'll find out below, minifying the file should also work but I have not personally tried it. Also, remember that this **does not** actually remove the generated files from diff, it simply prevents the changes to source code from being displayed, like so:\n\n![Hiding JS and CSS changes from GitHub diff](https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/GitHubDiff-1486236578248.png)\n\nIf you want to remove the files from the diff completely, you'd probably want to use [.gitignore](https://git-scm.com/docs/gitignore).\n\n# How it works\n\nGitHub is using a tool called [Linguist](https://github.com/github/linguist) to do all of the magic related to recognising binary files, determining the language something's written in and so on.\n\nBy adding a source map to the end of your JS/CSS files, you're forcing Linguist to recognise them as generated files. According to [the code responsible for this particular feature](https://github.com/github/linguist/blob/3719214abafb6a964f1eef65acb068659f62399b/lib/linguist/generated.rb#L97-L141), Linguist can also recognise minified CSS and JS files, but I haven't personally tested this.","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>While working on <a href=\"https://github.com/TimboKZ/blitz\">Blitz</a>, a static site generator I'm developing, I wanted to prevent compiled JavaScript from cluttering the diffs. I was using TypeScript which was compiled into JS, so I was really only interested in the changes to TS source code.</p>\n\n<h1 id=\"solution\">Solution</h1>\n\n<p>To avoid wasting your time, let's jump into it straight away. You have to make sure that a source map is appended to any JS (or CSS) files you want to hide from your diffs. As an example, look at the source maps appended to JS files in Blitz:</p>\n\n<pre><code class=\"language-javascript\">        // ...\n        projectPreviewer.startServer();\n    };\n    return Blitz;\n}());\nexports.Blitz = Blitz;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,[...]\n</code></pre>\n\n<p>Pay attention to the inline source map that can be seen in the very end. It is likely that tool you're using to get the compiled JS/CSS has a feature that can generate such source maps, so do a quick Google search if you need it.</p>\n\n<p>As you'll find out below, minifying the file should also work but I have not personally tried it. Also, remember that this <strong>does not</strong> actually remove the generated files from diff, it simply prevents the changes to source code from being displayed, like so:</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/GitHubDiff-1486236578248.png\" alt=\"Hiding JS and CSS changes from GitHub diff\" /></p>\n\n<p>If you want to remove the files from the diff completely, you'd probably want to use <a href=\"https://git-scm.com/docs/gitignore\">.gitignore</a>.</p>\n\n<h1 id=\"howitworks\">How it works</h1>\n\n<p>GitHub is using a tool called <a href=\"https://github.com/github/linguist\">Linguist</a> to do all of the magic related to recognising binary files, determining the language something's written in and so on.</p>\n\n<p>By adding a source map to the end of your JS/CSS files, you're forcing Linguist to recognise them as generated files. According to <a href=\"https://github.com/github/linguist/blob/3719214abafb6a964f1eef65acb068659f62399b/lib/linguist/generated.rb#L97-L141\">the code responsible for this particular feature</a>, Linguist can also recognise minified CSS and JS files, but I haven't personally tested this.</p>","image":"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/GitHubDiff-1486236710480.png","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":"","author_id":1,"created_at":"2017-02-04 19:03:28","created_by":1,"updated_at":"2017-02-04 19:35:02","updated_by":1,"published_at":"2017-02-04 19:31:32","published_by":1,"amp":null},{"id":74,"uuid":"7cfa4271-13a8-4f14-8fcf-f01e40f1fdd1","title":"Presenting to Steve Guggenheimer, Corporate VP of Microsoft","slug":"presenting-peach-reality-to-steve-guggenheimer-corporate-vp-of-microsoft-2","markdown":"# Abstract\n\nOn December 5th, 2016, I got a chance to present the [PEACH Reality project](https://foxypanda.me/ucl-peach-reality-with-microsoft-hololens/) I've been working on to [Steve Guggenheimer](https://blogs.msdn.microsoft.com/stevengu/about/), who is (at the time of writing) the Corporate Vice President & Chief Evangelist at Microsoft.\n\n# Presentation\n\nThe presentation itself lasted around 15 minutes during which my team had a chance to describe the purpose of the project, expected outcomes and deliverables and, finally, show the prototype of our app in action. The video we've shown to Steve can be found [here](https://www.youtube.com/watch?v=V2mnBVkD-Rs) and the slides (for those interested) can be seen [here](https://drive.google.com/open?id=1VA9FE6Op9Kcw7JSJ3pLuFYOWx35cpqpuRNjGVCvJuww). Sadly the quality isn't as good as I'd want it to be but we've been given very short notice about this presentation and it turned out quite well in the end.\n\nThe picture below was taken by [Mirek Janatka](https://www.linkedin.com/in/mjanatka/), who's currently doing his PhD in Surgical Robotic Vision in UCL and is supervising our project. Steve Guggenheimer can be seen sitting on the left and I'm the one holding HoloLens right in front of the screen.\n\n![Presenting PEACH Reality project to Steve Guggenheimer, who can be seen sitting on the left](https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/15390977_10100651948190242_5979156787898816030_n-1486999498401.jpg)","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>On December 5th, 2016, I got a chance to present the <a href=\"https://foxypanda.me/ucl-peach-reality-with-microsoft-hololens/\">PEACH Reality project</a> I've been working on to <a href=\"https://blogs.msdn.microsoft.com/stevengu/about/\">Steve Guggenheimer</a>, who is (at the time of writing) the Corporate Vice President &amp; Chief Evangelist at Microsoft.</p>\n\n<h1 id=\"presentation\">Presentation</h1>\n\n<p>The presentation itself lasted around 15 minutes during which my team had a chance to describe the purpose of the project, expected outcomes and deliverables and, finally, show the prototype of our app in action. The video we've shown to Steve can be found <a href=\"https://www.youtube.com/watch?v=V2mnBVkD-Rs\">here</a> and the slides (for those interested) can be seen <a href=\"https://drive.google.com/open?id=1VA9FE6Op9Kcw7JSJ3pLuFYOWx35cpqpuRNjGVCvJuww\">here</a>. Sadly the quality isn't as good as I'd want it to be but we've been given very short notice about this presentation and it turned out quite well in the end.</p>\n\n<p>The picture below was taken by <a href=\"https://www.linkedin.com/in/mjanatka/\">Mirek Janatka</a>, who's currently doing his PhD in Surgical Robotic Vision in UCL and is supervising our project. Steve Guggenheimer can be seen sitting on the left and I'm the one holding HoloLens right in front of the screen.</p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/15390977_10100651948190242_5979156787898816030_n-1486999498401.jpg\" alt=\"Presenting PEACH Reality project to Steve Guggenheimer, who can be seen sitting on the left\" /></p>","image":"https://foxypanda-ghost.s3.amazonaws.com/2017/Feb/15390977_10100651948190242_5979156787898816030_n-1487000055663.jpg","featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-02-13 15:06:58","created_by":1,"updated_at":"2017-02-13 16:48:21","updated_by":1,"published_at":"2017-02-13 15:33:13","published_by":1,"amp":null},{"id":75,"uuid":"f452f23c-f06c-4677-b866-464cc4e46801","title":"Life PG: Technical Challenges","slug":"life-pg-technical-challenges-2","markdown":"# Abstract\n\nThis article is about challenges. Refer to another one about the concept.\n\n# Secure Social Login\n\nhttp://digitalleaves.com/blog/2014/06/building-your-own-rest-api-with-oauth-2-0-ii-the-good-the-bad-and-the-ugly/","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>This article is about challenges. Refer to another one about the concept.</p>\n\n<h1 id=\"securesociallogin\">Secure Social Login</h1>\n\n<p><a href=\"http://digitalleaves.com/blog/2014/06/building-your-own-rest-api-with-oauth-2-0-ii-the-good-the-bad-and-the-ugly/\">http://digitalleaves.com/blog/2014/06/building-your-own-rest-api-with-oauth-2-0-ii-the-good-the-bad-and-the-ugly/</a></p>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-03-28 06:38:51","created_by":1,"updated_at":"2017-03-28 06:39:52","updated_by":1,"published_at":null,"published_by":null,"amp":null},{"id":76,"uuid":"d5eca594-03e9-4cd2-b3cf-6d0f0c9e2081","title":"Useful Links","slug":"useful-links-2","markdown":"# Abstract\n\nI tend to go through quite a lot of various programming articles every day and once in a while I find something that I really want to share with the world, or at least save it for future reference. This page will serve said purpose by storing the links to materials I personally find useful.\n\nEach link is accompanied by a brief summary of the contents and why you might be interested in checking it out. Additionally, I tried to group some links together to produce short \"series\" of related articles that might help you get started with some technology or just get a better understanding of a specific topic. ~~You might have also noticed that some links have a \"Difficulty\" level associated with them - this is my personal subjective opinion so please don't be offended and in fact feel free to comment in the bottom of this page with any complaints or suggestions.~~ I decided to drop the difficulty for now as it is too subjective, instead I marked some articles which I considered to be *must-read*.\n\n# Git\n\nHere are a series of articles to help you Git right. They can cover pretty much anything related to Git and range from super basic to reasonably advanced.\n\n* [git - the simple guide](http://rogerdudler.github.io/git-guide/). **Must read** if you know nothing about Git or don't feel quite confident about its basic functionality. Very beginner-friendly.\n* [How to Write a Git Commit Message](https://chris.beams.io/posts/git-commit/). A lengthy article about how to write descriptive commit messages that will actually help other developers understand your intent. It could arguably be considered **must read** but the article is quite long, and for most people shorter things [like this post](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html) might suffice.\n* [A successful Git branching model](http://nvie.com/posts/a-successful-git-branching-model/). This posts talks about a Git branching strategy that seems to work quite well. Even if you're not going to use this particular model, it's a useful read that will show you some of the techniques that can be used.\n\n# Machine Learning and AI\n\n* [Fueling the Gold Rush: The Greatest Public Datasets for AI](https://medium.com/startup-grind/fueling-the-ai-gold-rush-7ae438505bc2). As the title suggests, a collection of datasets that can be used to train or test your neural nets.\n\n# UI, UX and Accessibility\n\n* [125 Easy Tweaks to Optimize Your Website’s UX/UI Today](https://www.nickkolenda.com/user-experience/). A reasonably long post covering different UX practices. Some are very straightforward, some are way less trivial than you would expect. Can be useful for general knowledge.\n\n","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>I tend to go through quite a lot of various programming articles every day and once in a while I find something that I really want to share with the world, or at least save it for future reference. This page will serve said purpose by storing the links to materials I personally find useful.</p>\n\n<p>Each link is accompanied by a brief summary of the contents and why you might be interested in checking it out. Additionally, I tried to group some links together to produce short \"series\" of related articles that might help you get started with some technology or just get a better understanding of a specific topic. <del>You might have also noticed that some links have a \"Difficulty\" level associated with them - this is my personal subjective opinion so please don't be offended and in fact feel free to comment in the bottom of this page with any complaints or suggestions.</del> I decided to drop the difficulty for now as it is too subjective, instead I marked some articles which I considered to be <em>must-read</em>.</p>\n\n<h1 id=\"git\">Git</h1>\n\n<p>Here are a series of articles to help you Git right. They can cover pretty much anything related to Git and range from super basic to reasonably advanced.</p>\n\n<ul>\n<li><a href=\"http://rogerdudler.github.io/git-guide/\">git - the simple guide</a>. <strong>Must read</strong> if you know nothing about Git or don't feel quite confident about its basic functionality. Very beginner-friendly.</li>\n<li><a href=\"https://chris.beams.io/posts/git-commit/\">How to Write a Git Commit Message</a>. A lengthy article about how to write descriptive commit messages that will actually help other developers understand your intent. It could arguably be considered <strong>must read</strong> but the article is quite long, and for most people shorter things <a href=\"http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\">like this post</a> might suffice.</li>\n<li><a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">A successful Git branching model</a>. This posts talks about a Git branching strategy that seems to work quite well. Even if you're not going to use this particular model, it's a useful read that will show you some of the techniques that can be used.</li>\n</ul>\n\n<h1 id=\"machinelearningandai\">Machine Learning and AI</h1>\n\n<ul>\n<li><a href=\"https://medium.com/startup-grind/fueling-the-ai-gold-rush-7ae438505bc2\">Fueling the Gold Rush: The Greatest Public Datasets for AI</a>. As the title suggests, a collection of datasets that can be used to train or test your neural nets.</li>\n</ul>\n\n<h1 id=\"uiuxandaccessibility\">UI, UX and Accessibility</h1>\n\n<ul>\n<li><a href=\"https://www.nickkolenda.com/user-experience/\">125 Easy Tweaks to Optimize Your Website’s UX/UI Today</a>. A reasonably long post covering different UX practices. Some are very straightforward, some are way less trivial than you would expect. Can be useful for general knowledge.</li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-29 22:54:13","created_by":1,"updated_at":"2017-02-14 01:04:54","updated_by":1,"published_at":"2017-02-13 16:57:22","published_by":1,"amp":null},{"id":77,"uuid":"cce6b127-a9d5-4b85-81e9-e6d7eeae9f75","title":"Foxy Panda Source","slug":"foxy-panda-source-2","markdown":"# Source code\n\nFirst of all, you can find Foxy Panda source code on [its GitHub page](https://github.com/TimboKZ/foxy-panda-ghost). If you're interested, there is also [a repo](https://github.com/TimboKZ/FoxyPanda) of an older version of Foxy Panda written on Angular 2. Below you can find some more information about the history and the purpose of this website, as well as an overview of the tools used to build it.\n\n# Foxy Panda\n\nAfter years of rewriting the source code of this blog from scratch, a handful of domain name changes ([kuzhagaliyev.kz](http://kuzhagaliyev.kz/), [timbo.kz](http://timbo.kz/), etc.) and numerous attempts of implementing something that would even remotely resemble a decent content management system I've finally overcome my [NIH syndrome](https://en.wikipedia.org/wiki/Not_invented_here) and decided to stick with [Ghost](https://ghost.org/) as my CMS and hosted the whole thing on [Heroku](https://www.heroku.com/). I couldn't help but make some significant modifications to it (which might have or might have not harmed its performance) and I hope you'll find this website unique and not just yet another Ghost blog.\n\nThe main purpose of this blog is to serve as a storage for my projects, ideas and thoughts which tend to come up at a very random rate so I cannot guarantee I will be updating this blog often. That said, I am still going to try to note down everything noteworthy so you might wanna come back once in a while and see if anything new has been posted (given you are actually interested, of course).\n\nAs for the tools and technologies used: I said a couple of words about Ghost and Heroku above, so now I will mostly focus on libraries and tools I used to customise Ghost. First of all, I used [Sass](http://sass-lang.com/) with [Compass](http://compass-style.org/) to style the pages. I came up with a simple colour palette with 5 colours and I must say it turned out quite nicely, and was a charm to use thanks to Sass variables. I found the headings and text fonts on [Google Fonts](https://fonts.google.com/), their names are Rajdhani and Assistant respectively. The fancy animation and grid on the index page were done using a tool called [Isotope](http://isotope.metafizzy.co/). For syntax highlighting, I use an amazing JS plugin called [Prism](http://prismjs.com/). Last but not least, I used [MathJax](https://www.mathjax.org/) for some $\\LaTeX$ goodness.","mobiledoc":null,"html":"<h1 id=\"sourcecode\">Source code</h1>\n\n<p>First of all, you can find Foxy Panda source code on <a href=\"https://github.com/TimboKZ/foxy-panda-ghost\">its GitHub page</a>. If you're interested, there is also <a href=\"https://github.com/TimboKZ/FoxyPanda\">a repo</a> of an older version of Foxy Panda written on Angular 2. Below you can find some more information about the history and the purpose of this website, as well as an overview of the tools used to build it.</p>\n\n<h1 id=\"foxypanda\">Foxy Panda</h1>\n\n<p>After years of rewriting the source code of this blog from scratch, a handful of domain name changes (<a href=\"http://kuzhagaliyev.kz/\">kuzhagaliyev.kz</a>, <a href=\"http://timbo.kz/\">timbo.kz</a>, etc.) and numerous attempts of implementing something that would even remotely resemble a decent content management system I've finally overcome my <a href=\"https://en.wikipedia.org/wiki/Not_invented_here\">NIH syndrome</a> and decided to stick with <a href=\"https://ghost.org/\">Ghost</a> as my CMS and hosted the whole thing on <a href=\"https://www.heroku.com/\">Heroku</a>. I couldn't help but make some significant modifications to it (which might have or might have not harmed its performance) and I hope you'll find this website unique and not just yet another Ghost blog.</p>\n\n<p>The main purpose of this blog is to serve as a storage for my projects, ideas and thoughts which tend to come up at a very random rate so I cannot guarantee I will be updating this blog often. That said, I am still going to try to note down everything noteworthy so you might wanna come back once in a while and see if anything new has been posted (given you are actually interested, of course).</p>\n\n<p>As for the tools and technologies used: I said a couple of words about Ghost and Heroku above, so now I will mostly focus on libraries and tools I used to customise Ghost. First of all, I used <a href=\"http://sass-lang.com/\">Sass</a> with <a href=\"http://compass-style.org/\">Compass</a> to style the pages. I came up with a simple colour palette with 5 colours and I must say it turned out quite nicely, and was a charm to use thanks to Sass variables. I found the headings and text fonts on <a href=\"https://fonts.google.com/\">Google Fonts</a>, their names are Rajdhani and Assistant respectively. The fancy animation and grid on the index page were done using a tool called <a href=\"http://isotope.metafizzy.co/\">Isotope</a>. For syntax highlighting, I use an amazing JS plugin called <a href=\"http://prismjs.com/\">Prism</a>. Last but not least, I used <a href=\"https://www.mathjax.org/\">MathJax</a> for some $\\LaTeX$ goodness.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-21 17:50:00","created_by":1,"updated_at":"2016-08-28 12:45:52","updated_by":1,"published_at":"2016-08-21 18:57:50","published_by":1,"amp":null},{"id":78,"uuid":"7ab47797-7f96-48c7-a079-dc745e2cab17","title":"HyperBlocks","slug":"hyperblocks-2","markdown":"# A quick overview\n\nHyperBlocks is a WYSIWYG editor for sidebar content on Reddit. Its main aim is to allow moderators to easily organise the contents of sidebars in their subreddits in a neat and well-structured way without any prior knowledge of CSS or Markdown syntax. You find a video of HyperBlocks editor in action at the bottom of this page.\n\nYou can find the live demo of the editor [here](https://hosting.kawaiidesu.me/reddit/hyper-blocks/). The source code is available on HyperBlocks' [GitHub page](https://github.com/TimboKZ/HyperBlocks). To see some discussions related to the editor you might wanna check out [this Reddit thread](https://www.reddit.com/r/reddithax/comments/30k58l/hyperblocks_editor_is_now_available_for_testing/) and [/r/HyperBlocks](https://www.reddit.com/r/HyperBlocks).\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/xedUxaGOUXw\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","mobiledoc":null,"html":"<h1 id=\"aquickoverview\">A quick overview</h1>\n\n<p>HyperBlocks is a WYSIWYG editor for sidebar content on Reddit. Its main aim is to allow moderators to easily organise the contents of sidebars in their subreddits in a neat and well-structured way without any prior knowledge of CSS or Markdown syntax. You find a video of HyperBlocks editor in action at the bottom of this page.</p>\n\n<p>You can find the live demo of the editor <a href=\"https://hosting.kawaiidesu.me/reddit/hyper-blocks/\">here</a>. The source code is available on HyperBlocks' <a href=\"https://github.com/TimboKZ/HyperBlocks\">GitHub page</a>. To see some discussions related to the editor you might wanna check out <a href=\"https://www.reddit.com/r/reddithax/comments/30k58l/hyperblocks_editor_is_now_available_for_testing/\">this Reddit thread</a> and <a href=\"https://www.reddit.com/r/HyperBlocks\">/r/HyperBlocks</a>.</p>\n\n<div class=\"video\"><iframe src=\"https://www.youtube.com/embed/xedUxaGOUXw\" frameborder=\"0\" allowfullscreen=\"\"></iframe></div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-28 02:39:14","created_by":1,"updated_at":"2016-08-30 09:56:12","updated_by":1,"published_at":"2015-03-21 03:39:00","published_by":1,"amp":null},{"id":79,"uuid":"4bab5f64-af45-4470-9916-5ec669ea66be","title":"Reddit Themes","slug":"reddit-themes-2","markdown":"# Abstract\n\nSome time around 2014 I was an avid reddit user (I mostly lurk nowadays) and I made quite a lot of themes for various subreddits. Below you can see some of the themes I have actually released. In reality, there were a bit more but I've never gotten a chance to complete them.\n\n# Public reddit themes:\n\n<p>Egoiste, <a href=\"https://www.reddit.com/r/Egoiste\">/r/Egoiste</a></p>\n\n![Egoiste Reddit theme](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/egoiste-1472395761533.png)\n\n<p>Zireael, <a href=\"https://www.reddit.com/r/Zireael\">/r/Zireael</a></p>\n\n![Zireael Reddit theme](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/zireael-1472395766853.png)\n\n<p>Aeolus, <a href=\"https://www.reddit.com/r/Aeolus\">/r/Aeolus</a></p>\n\n![Aeolus Reddit theme](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/aeolus-1472395770034.png)\n\n<p>Quantum CSS, <a href=\"https://www.reddit.com/r/QuantumCSS\">/r/QuantumCSS</a></p>\n\n![QuantumCSS Reddit theme](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/quantum-1472395775125.png)\n\n# Theme for specific subreddits:\n\n<p>BravelyDefault, <a href=\"https://www.reddit.com/r/BravelyDefaultCSS\">/r/BravelyDefaultCSS</a></p>\n\n![Bravely Default Reddit theme](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/bravely_default-1472395780306.png)\n\n<p>Queen Elsa, <a href=\"https://www.reddit.com/r/QueenElsa\">/r/QueenElsa</a></p>\n\n![Queen Elsa Reddit theme](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/queen_elsa-1472395784764.png)\n\n<p>Get Fair Share, <a href=\"https://www.reddit.com/r/GFSCSS\">/r/GFSCSS</a></p>\n\n![Get Fair Share Reddit theme](https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/gfs-1472395788453.png)","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>Some time around 2014 I was an avid reddit user (I mostly lurk nowadays) and I made quite a lot of themes for various subreddits. Below you can see some of the themes I have actually released. In reality, there were a bit more but I've never gotten a chance to complete them.</p>\n\n<h1 id=\"publicredditthemes\">Public reddit themes:</h1>\n\n<p>Egoiste, <a href=\"https://www.reddit.com/r/Egoiste\">/r/Egoiste</a></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/egoiste-1472395761533.png\" alt=\"Egoiste Reddit theme\" /></p>\n\n<p>Zireael, <a href=\"https://www.reddit.com/r/Zireael\">/r/Zireael</a></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/zireael-1472395766853.png\" alt=\"Zireael Reddit theme\" /></p>\n\n<p>Aeolus, <a href=\"https://www.reddit.com/r/Aeolus\">/r/Aeolus</a></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/aeolus-1472395770034.png\" alt=\"Aeolus Reddit theme\" /></p>\n\n<p>Quantum CSS, <a href=\"https://www.reddit.com/r/QuantumCSS\">/r/QuantumCSS</a></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/quantum-1472395775125.png\" alt=\"QuantumCSS Reddit theme\" /></p>\n\n<h1 id=\"themeforspecificsubreddits\">Theme for specific subreddits:</h1>\n\n<p>BravelyDefault, <a href=\"https://www.reddit.com/r/BravelyDefaultCSS\">/r/BravelyDefaultCSS</a></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/bravely_default-1472395780306.png\" alt=\"Bravely Default Reddit theme\" /></p>\n\n<p>Queen Elsa, <a href=\"https://www.reddit.com/r/QueenElsa\">/r/QueenElsa</a></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/queen_elsa-1472395784764.png\" alt=\"Queen Elsa Reddit theme\" /></p>\n\n<p>Get Fair Share, <a href=\"https://www.reddit.com/r/GFSCSS\">/r/GFSCSS</a></p>\n\n<p><img src=\"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/gfs-1472395788453.png\" alt=\"Get Fair Share Reddit theme\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-28 14:47:37","created_by":1,"updated_at":"2016-08-30 19:09:41","updated_by":1,"published_at":"2015-07-24 14:49:00","published_by":1,"amp":null},{"id":80,"uuid":"a2658a98-e679-46a4-ab4a-294688d27d0a","title":"Getting started with Redux (+React)","slug":"getting-started-with-redux-react-2","markdown":"# Abstract\n\nAround a week ago I, together with my coursemate [Christoph Ulshöfer](https://github.com/culshoefer), begun developing a mail app using [ElectronJS](http://electron.atom.io/). While looking for tools to use in development I stumbled over [Redux](https://github.com/reactjs/redux) and since we were already using [React](https://facebook.github.io/react/), it seemed like a perfect option for us. In this article I will talk about resources that I found very helpful in my learning process and a small calculator app I made as an exercise to learn Redux, explaining its features and how I went about implementing them.\n\n> **Note:** I'm assuming you have worked with React before and know the basic principles behind it. Technically to use Redux you don't have to know anything about React, but in this article I'll be looking at learning to use this particular combination of React + Redux.\n\n# Useful links\n\nIf you don't yet understand what Redux is and why it is useful, I'd like to point out these 2 incredibly useful resources:\n\n1. [A brilliant article](http://www.youhavetolearncomputers.com/blog/2015/9/15/a-conceptual-overview-of-redux-or-how-i-fell-in-love-with-a-javascript-state-container) about the concepts behind Redux and how it compliments React  (~10 minutes reading time)\n2. [A talk by Dan Abramov](https://www.youtube.com/watch?v=xsSnOQynTHs), the creator of Redux, at React-Europe 2015 in which he explains why he developed Redux, how it works and how it makes developers' lives easier.\n\nI strongly suggest you check out both of them, but if you only have limited in Redux either one should give you a pretty good idea of what it is about (although the talk by Dan Abramov will be a bit more informative and, well, *impressive*).\n\n## Learning by doing\n\nAfter you've understood what Redux is about, quite naturally you would want to try it in action and learn how to use it in the process. As I was searching for good examples I found out that this quite the problematic area: A lot of boilerplates out there contain tons of (arguably) unnecessary code and are completely unsuitable for learning. I suggest you start with with the official [Redux basics guide](http://redux.js.org/docs/basics/) to grasp the core concepts behind writing Redux applications. Keep in mind that this guide uses JavaScript (EcmaScript 6 to be precise) and hence some cool features of TypeScript were not used for obvious reasons. That said, I haven't had issues following along rewriting some parts in TS.","mobiledoc":null,"html":"<h1 id=\"abstract\">Abstract</h1>\n\n<p>Around a week ago I, together with my coursemate <a href=\"https://github.com/culshoefer\">Christoph Ulshöfer</a>, begun developing a mail app using <a href=\"http://electron.atom.io/\">ElectronJS</a>. While looking for tools to use in development I stumbled over <a href=\"https://github.com/reactjs/redux\">Redux</a> and since we were already using <a href=\"https://facebook.github.io/react/\">React</a>, it seemed like a perfect option for us. In this article I will talk about resources that I found very helpful in my learning process and a small calculator app I made as an exercise to learn Redux, explaining its features and how I went about implementing them.</p>\n\n<blockquote>\n  <p><strong>Note:</strong> I'm assuming you have worked with React before and know the basic principles behind it. Technically to use Redux you don't have to know anything about React, but in this article I'll be looking at learning to use this particular combination of React + Redux.</p>\n</blockquote>\n\n<h1 id=\"usefullinks\">Useful links</h1>\n\n<p>If you don't yet understand what Redux is and why it is useful, I'd like to point out these 2 incredibly useful resources:</p>\n\n<ol>\n<li><a href=\"http://www.youhavetolearncomputers.com/blog/2015/9/15/a-conceptual-overview-of-redux-or-how-i-fell-in-love-with-a-javascript-state-container\">A brilliant article</a> about the concepts behind Redux and how it compliments React  (~10 minutes reading time)  </li>\n<li><a href=\"https://www.youtube.com/watch?v=xsSnOQynTHs\">A talk by Dan Abramov</a>, the creator of Redux, at React-Europe 2015 in which he explains why he developed Redux, how it works and how it makes developers' lives easier.</li>\n</ol>\n\n<p>I strongly suggest you check out both of them, but if you only have limited in Redux either one should give you a pretty good idea of what it is about (although the talk by Dan Abramov will be a bit more informative and, well, <em>impressive</em>).</p>\n\n<h2 id=\"learningbydoing\">Learning by doing</h2>\n\n<p>After you've understood what Redux is about, quite naturally you would want to try it in action and learn how to use it in the process. As I was searching for good examples I found out that this quite the problematic area: A lot of boilerplates out there contain tons of (arguably) unnecessary code and are completely unsuitable for learning. I suggest you start with with the official <a href=\"http://redux.js.org/docs/basics/\">Redux basics guide</a> to grasp the core concepts behind writing Redux applications. Keep in mind that this guide uses JavaScript (EcmaScript 6 to be precise) and hence some cool features of TypeScript were not used for obvious reasons. That said, I haven't had issues following along rewriting some parts in TS.</p>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-09-11 13:05:40","created_by":1,"updated_at":"2016-09-12 19:30:10","updated_by":1,"published_at":null,"published_by":null,"amp":null},{"id":81,"uuid":"9bcfa4a1-2730-4947-8628-e265a2e24dd2","title":"About","slug":"about-3","markdown":"# Welcome to Foxy Panda ^_~\n\n> To get the important stuff out of the way: [Here's a copy of my CV](https://drive.google.com/open?id=0B0xy7FWLvrrsc1poczRESFAzMlU) if you'll need it for any reason.\n\nHello there, I'm Tim and this is my personal website. Here I post some of my projects and share my thoughts about various things, as well as write some guides and tutorials on topics I feel confident about. I try to stay away from fields where I only have limited knowledge so I would say most of the content on this website is scientifically accurate but you never know, so I kindly ask you to point out any mistakes I made in the comments.\n\nIn a desperate attempt to make this page a bit more informative I decided to include a couple of generic facts about me, which you can find below. Enjoy:\n\n* I originally come from Almaty, Kazakhstan\n* I study [MEng Computer Science](http://www.cs.ucl.ac.uk/degrees/meng_computer_science/) at [UCL](http://www.ucl.ac.uk/)\n* Surprisingly enough I code quite a bit, and most of my projects can be found on my [GitHub](https://github.com/TimboKZ)\n* I currently reside in London, United Kingdom\n* Last but not least, I love [TypeScript](https://www.typescriptlang.org/) and [Node](https://nodejs.org/) (among other things)\n\nIf you want to contact me, feel free to leave a comment on this page or, alternatively, drop me an email at `tim.kuzh (at) gmail.com`. Oh yes and I almost forgot, if you want to read more about the development of this blog check out [~this post here](https://foxypanda.me/foxy-panda-source/).","mobiledoc":null,"html":"<h1 id=\"welcometofoxypanda_t\">Welcome to Foxy Panda ^_~</h1>\n\n<blockquote>\n  <p>To get the important stuff out of the way: <a href=\"https://drive.google.com/open?id=0B0xy7FWLvrrsc1poczRESFAzMlU\">Here's a copy of my CV</a> if you'll need it for any reason.</p>\n</blockquote>\n\n<p>Hello there, I'm Tim and this is my personal website. Here I post some of my projects and share my thoughts about various things, as well as write some guides and tutorials on topics I feel confident about. I try to stay away from fields where I only have limited knowledge so I would say most of the content on this website is scientifically accurate but you never know, so I kindly ask you to point out any mistakes I made in the comments.</p>\n\n<p>In a desperate attempt to make this page a bit more informative I decided to include a couple of generic facts about me, which you can find below. Enjoy:</p>\n\n<ul>\n<li>I originally come from Almaty, Kazakhstan</li>\n<li>I study <a href=\"http://www.cs.ucl.ac.uk/degrees/meng_computer_science/\">MEng Computer Science</a> at <a href=\"http://www.ucl.ac.uk/\">UCL</a></li>\n<li>Surprisingly enough I code quite a bit, and most of my projects can be found on my <a href=\"https://github.com/TimboKZ\">GitHub</a></li>\n<li>I currently reside in London, United Kingdom</li>\n<li>Last but not least, I love <a href=\"https://www.typescriptlang.org/\">TypeScript</a> and <a href=\"https://nodejs.org/\">Node</a> (among other things)</li>\n</ul>\n\n<p>If you want to contact me, feel free to leave a comment on this page or, alternatively, drop me an email at <code>tim.kuzh (at) gmail.com</code>. Oh yes and I almost forgot, if you want to read more about the development of this blog check out <a href=\"https://foxypanda.me/foxy-panda-source/\">~this post here</a>.</p>","image":null,"featured":0,"page":1,"status":"published","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-08-16 22:14:20","created_by":1,"updated_at":"2016-11-19 19:14:12","updated_by":1,"published_at":"2016-08-16 22:22:07","published_by":1,"amp":null}],"users":[{"id":1,"uuid":"382b24f0-33a7-43b5-bcc0-f0f991b7b24d","name":"Timur Kuzhagaliyev","slug":"tim","password":"$2a$10$FQVAmqqJmIY6oP45obmQuu4jS9qzE6ZnK6oDJU3gdBW93HCUDgvIu","email":"tim.kuzh@gmail.com","image":"/content/images/2016/08/Tim-cropped.jpg","cover":null,"bio":"Why hello there, I'm Tim and I study MEng Computer Science in UCL. Check out my <a href=\"https://github.com/TimboKZ\">GitHub</a> to see what I'm up to.","website":"https://foxypanda.me","location":null,"facebook":null,"twitter":null,"accessibility":null,"status":"active","language":"en_US","visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_login":"2017-10-14 19:45:10","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-10-14 19:45:10","updated_by":1}],"roles":[{"id":1,"uuid":"959a3062-73fb-438c-b9bd-ba9d8d644898","name":"Administrator","description":"Administrators","created_at":"2016-08-25 22:49:25","created_by":1,"updated_at":"2016-08-25 22:49:25","updated_by":1},{"id":2,"uuid":"ce34e6cb-6eaf-4287-b579-88ab6279371b","name":"Editor","description":"Editors","created_at":"2016-08-25 22:49:25","created_by":1,"updated_at":"2016-08-25 22:49:25","updated_by":1},{"id":3,"uuid":"54f10689-7d58-40e7-95b0-43092b1fe091","name":"Author","description":"Authors","created_at":"2016-08-25 22:49:25","created_by":1,"updated_at":"2016-08-25 22:49:25","updated_by":1},{"id":4,"uuid":"593518a4-0a5c-4bb5-895f-781aefb80685","name":"Owner","description":"Blog Owner","created_at":"2016-08-25 22:49:25","created_by":1,"updated_at":"2016-08-25 22:49:25","updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1}],"permissions":[{"id":1,"uuid":"78e7c2e3-a218-421f-a668-93b51186c88e","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":"2016-08-25 22:49:25","created_by":1,"updated_at":"2016-08-25 22:49:25","updated_by":1},{"id":2,"uuid":"6fee3a33-818a-43dc-82b4-eaa64769db2d","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":"2016-08-25 22:49:25","created_by":1,"updated_at":"2016-08-25 22:49:25","updated_by":1},{"id":3,"uuid":"29ba01b9-ed7d-44a2-82ac-bba346cbe6ac","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":"2016-08-25 22:49:25","created_by":1,"updated_at":"2016-08-25 22:49:25","updated_by":1},{"id":4,"uuid":"d2ac6052-8cd9-4b8c-b2b9-500aad9bcefe","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":"2016-08-25 22:49:26","created_by":1,"updated_at":"2016-08-25 22:49:26","updated_by":1},{"id":5,"uuid":"e63c05a9-a6c8-47a0-86ff-4fc2fecd8700","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":"2016-08-25 22:49:26","created_by":1,"updated_at":"2016-08-25 22:49:26","updated_by":1},{"id":6,"uuid":"84506e0b-bded-4d64-8186-fe5362710360","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":"2016-08-25 22:49:26","created_by":1,"updated_at":"2016-08-25 22:49:26","updated_by":1},{"id":7,"uuid":"253d4243-c7e7-4dbc-ac6f-c1ef349bcc46","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":"2016-08-25 22:49:26","created_by":1,"updated_at":"2016-08-25 22:49:26","updated_by":1},{"id":8,"uuid":"64056997-9e5c-426a-b62b-aae162d80ec4","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":"2016-08-25 22:49:26","created_by":1,"updated_at":"2016-08-25 22:49:26","updated_by":1},{"id":9,"uuid":"c22e2be9-ca7b-42af-839a-65aad77c690d","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":"2016-08-25 22:49:26","created_by":1,"updated_at":"2016-08-25 22:49:26","updated_by":1},{"id":10,"uuid":"b6c30d56-f578-4f5b-b4af-4cb3d156e58e","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":"2016-08-25 22:49:26","created_by":1,"updated_at":"2016-08-25 22:49:26","updated_by":1},{"id":11,"uuid":"14b91c3e-fe80-498f-9500-c08b4212e7b3","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":"2016-08-25 22:49:26","created_by":1,"updated_at":"2016-08-25 22:49:26","updated_by":1},{"id":12,"uuid":"41c31d9e-34dc-4f0c-aff7-7650a76b6f9b","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":"2016-08-25 22:49:26","created_by":1,"updated_at":"2016-08-25 22:49:26","updated_by":1},{"id":13,"uuid":"7930c6ae-2aee-424f-8c92-0bd5796bca6a","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":"2016-08-25 22:49:27","created_by":1,"updated_at":"2016-08-25 22:49:27","updated_by":1},{"id":14,"uuid":"20ef9de9-db29-49fb-81c5-ca0fb261902f","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":"2016-08-25 22:49:27","created_by":1,"updated_at":"2016-08-25 22:49:27","updated_by":1},{"id":15,"uuid":"3bd95044-6982-49bf-808b-470cbc349197","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":"2016-08-25 22:49:27","created_by":1,"updated_at":"2016-08-25 22:49:27","updated_by":1},{"id":16,"uuid":"eb0014b6-74cf-4791-a618-71311072377f","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":"2016-08-25 22:49:27","created_by":1,"updated_at":"2016-08-25 22:49:27","updated_by":1},{"id":17,"uuid":"95ede8f5-b4ca-44c2-9086-f4339ffa8ab7","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":"2016-08-25 22:49:27","created_by":1,"updated_at":"2016-08-25 22:49:27","updated_by":1},{"id":18,"uuid":"5f80a836-ee1d-47e0-bf78-272a0b4d72c8","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":"2016-08-25 22:49:27","created_by":1,"updated_at":"2016-08-25 22:49:27","updated_by":1},{"id":19,"uuid":"09987b4b-9879-4218-88af-c2054c352ee9","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":"2016-08-25 22:49:27","created_by":1,"updated_at":"2016-08-25 22:49:27","updated_by":1},{"id":20,"uuid":"57a3ac75-737b-475b-99e0-0d3896ab42eb","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":"2016-08-25 22:49:27","created_by":1,"updated_at":"2016-08-25 22:49:27","updated_by":1},{"id":21,"uuid":"24527e64-592b-45cf-bc9c-1e5b3e9985a9","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":"2016-08-25 22:49:27","created_by":1,"updated_at":"2016-08-25 22:49:27","updated_by":1},{"id":22,"uuid":"b2468d9d-98d8-4338-b3ee-7a0ac405eca1","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":"2016-08-25 22:49:27","created_by":1,"updated_at":"2016-08-25 22:49:27","updated_by":1},{"id":23,"uuid":"ec65a35d-c4f6-444c-9c08-9d723b51db76","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":"2016-08-25 22:49:28","created_by":1,"updated_at":"2016-08-25 22:49:28","updated_by":1},{"id":24,"uuid":"12e9f33c-a65c-49ea-b643-770e029440d3","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":"2016-08-25 22:49:28","created_by":1,"updated_at":"2016-08-25 22:49:28","updated_by":1},{"id":25,"uuid":"1e11bdc7-3d6c-4d00-abea-dbc0ddb98519","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":"2016-08-25 22:49:28","created_by":1,"updated_at":"2016-08-25 22:49:28","updated_by":1},{"id":26,"uuid":"dea142fd-7cb1-4066-931d-a01a8b6d5392","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":"2016-08-25 22:49:28","created_by":1,"updated_at":"2016-08-25 22:49:28","updated_by":1},{"id":27,"uuid":"43aa5d01-3716-488b-b062-b8895a110c75","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":"2016-08-25 22:49:28","created_by":1,"updated_at":"2016-08-25 22:49:28","updated_by":1},{"id":28,"uuid":"485d4a18-c9e0-4cde-b2c3-a03915fd3851","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":"2016-08-25 22:49:28","created_by":1,"updated_at":"2016-08-25 22:49:28","updated_by":1},{"id":29,"uuid":"0b40d5f4-8cba-4e4e-b90e-9910f9778a27","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":"2016-08-25 22:49:28","created_by":1,"updated_at":"2016-08-25 22:49:28","updated_by":1},{"id":30,"uuid":"422a8629-4bc1-4ab1-8b10-f344c637126f","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":"2016-08-25 22:49:28","created_by":1,"updated_at":"2016-08-25 22:49:28","updated_by":1},{"id":31,"uuid":"a3b9ebf1-ab13-45d5-b9fb-5eef16a8332b","name":"Browse clients","object_type":"client","action_type":"browse","object_id":null,"created_at":"2016-08-25 22:49:28","created_by":1,"updated_at":"2016-08-25 22:49:28","updated_by":1},{"id":32,"uuid":"45a7f51b-e3db-472f-bbb7-278c9250468c","name":"Read clients","object_type":"client","action_type":"read","object_id":null,"created_at":"2016-08-25 22:49:29","created_by":1,"updated_at":"2016-08-25 22:49:29","updated_by":1},{"id":33,"uuid":"8e01d784-c7aa-4f58-8711-f786bf292662","name":"Edit clients","object_type":"client","action_type":"edit","object_id":null,"created_at":"2016-08-25 22:49:29","created_by":1,"updated_at":"2016-08-25 22:49:29","updated_by":1},{"id":34,"uuid":"ac4de9e0-2985-4faa-97cd-b03095e5d1fe","name":"Add clients","object_type":"client","action_type":"add","object_id":null,"created_at":"2016-08-25 22:49:29","created_by":1,"updated_at":"2016-08-25 22:49:29","updated_by":1},{"id":35,"uuid":"008a7859-d00f-40f6-8857-567be8ce5d12","name":"Delete clients","object_type":"client","action_type":"destroy","object_id":null,"created_at":"2016-08-25 22:49:29","created_by":1,"updated_at":"2016-08-25 22:49:29","updated_by":1},{"id":36,"uuid":"561ea079-2737-499c-b855-fdd1154c887c","name":"Browse subscribers","object_type":"subscriber","action_type":"browse","object_id":null,"created_at":"2016-08-25 22:49:29","created_by":1,"updated_at":"2016-08-25 22:49:29","updated_by":1},{"id":37,"uuid":"9fddc082-c418-4373-a8f0-2843839293e1","name":"Read subscribers","object_type":"subscriber","action_type":"read","object_id":null,"created_at":"2016-08-25 22:49:29","created_by":1,"updated_at":"2016-08-25 22:49:29","updated_by":1},{"id":38,"uuid":"7e29c11d-0865-42a3-8001-05c6236bd138","name":"Edit subscribers","object_type":"subscriber","action_type":"edit","object_id":null,"created_at":"2016-08-25 22:49:29","created_by":1,"updated_at":"2016-08-25 22:49:29","updated_by":1},{"id":39,"uuid":"91f4638a-f6fd-4eac-870f-9cea46483667","name":"Add subscribers","object_type":"subscriber","action_type":"add","object_id":null,"created_at":"2016-08-25 22:49:29","created_by":1,"updated_at":"2016-08-25 22:49:29","updated_by":1},{"id":40,"uuid":"be4526f7-8518-416b-9c58-11fda3272eca","name":"Delete subscribers","object_type":"subscriber","action_type":"destroy","object_id":null,"created_at":"2016-08-25 22:49:29","created_by":1,"updated_at":"2016-08-25 22:49:29","updated_by":1},{"id":41,"uuid":"56271425-416d-44d9-9c0f-b53033ec1695","name":"Upload themes","object_type":"theme","action_type":"add","object_id":null,"created_at":"2017-06-20 15:09:12","created_by":1,"updated_at":"2017-06-20 15:09:12","updated_by":1},{"id":42,"uuid":"8e74eb49-2534-4bcd-9c02-64ec1b4258c6","name":"Download themes","object_type":"theme","action_type":"read","object_id":null,"created_at":"2017-06-20 15:09:12","created_by":1,"updated_at":"2017-06-20 15:09:12","updated_by":1},{"id":43,"uuid":"fd3834ea-5518-4ab4-b190-c645c4b9000b","name":"Delete themes","object_type":"theme","action_type":"destroy","object_id":null,"created_at":"2017-06-20 15:09:12","created_by":1,"updated_at":"2017-06-20 15:09:12","updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3},{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":1,"permission_id":31},{"id":32,"role_id":1,"permission_id":32},{"id":33,"role_id":1,"permission_id":33},{"id":34,"role_id":1,"permission_id":34},{"id":35,"role_id":1,"permission_id":35},{"id":36,"role_id":1,"permission_id":36},{"id":37,"role_id":1,"permission_id":37},{"id":38,"role_id":1,"permission_id":38},{"id":39,"role_id":1,"permission_id":39},{"id":40,"role_id":1,"permission_id":40},{"id":41,"role_id":2,"permission_id":8},{"id":42,"role_id":2,"permission_id":9},{"id":43,"role_id":2,"permission_id":10},{"id":44,"role_id":2,"permission_id":11},{"id":45,"role_id":2,"permission_id":12},{"id":46,"role_id":2,"permission_id":13},{"id":47,"role_id":2,"permission_id":14},{"id":48,"role_id":2,"permission_id":16},{"id":49,"role_id":2,"permission_id":17},{"id":50,"role_id":2,"permission_id":18},{"id":51,"role_id":2,"permission_id":19},{"id":52,"role_id":2,"permission_id":20},{"id":53,"role_id":2,"permission_id":21},{"id":54,"role_id":2,"permission_id":24},{"id":55,"role_id":2,"permission_id":25},{"id":56,"role_id":2,"permission_id":26},{"id":57,"role_id":2,"permission_id":27},{"id":58,"role_id":2,"permission_id":28},{"id":59,"role_id":2,"permission_id":29},{"id":60,"role_id":2,"permission_id":30},{"id":61,"role_id":2,"permission_id":31},{"id":62,"role_id":2,"permission_id":32},{"id":63,"role_id":2,"permission_id":33},{"id":64,"role_id":2,"permission_id":34},{"id":65,"role_id":2,"permission_id":35},{"id":66,"role_id":2,"permission_id":39},{"id":67,"role_id":3,"permission_id":8},{"id":68,"role_id":3,"permission_id":9},{"id":69,"role_id":3,"permission_id":11},{"id":70,"role_id":3,"permission_id":13},{"id":71,"role_id":3,"permission_id":14},{"id":72,"role_id":3,"permission_id":16},{"id":73,"role_id":3,"permission_id":17},{"id":74,"role_id":3,"permission_id":18},{"id":75,"role_id":3,"permission_id":20},{"id":76,"role_id":3,"permission_id":24},{"id":77,"role_id":3,"permission_id":25},{"id":78,"role_id":3,"permission_id":30},{"id":79,"role_id":3,"permission_id":31},{"id":80,"role_id":3,"permission_id":32},{"id":81,"role_id":3,"permission_id":33},{"id":82,"role_id":3,"permission_id":34},{"id":83,"role_id":3,"permission_id":35},{"id":84,"role_id":3,"permission_id":39},{"id":85,"role_id":1,"permission_id":41},{"id":86,"role_id":1,"permission_id":42},{"id":87,"role_id":1,"permission_id":43}],"permissions_apps":[],"settings":[{"id":1,"uuid":"1f9a6ddd-dc22-437b-b190-5633bb4d4341","key":"databaseVersion","value":"009","type":"core","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-06-20 15:09:13","updated_by":1},{"id":2,"uuid":"29f7abcd-9c89-4193-bf29-6c409176b9c4","key":"dbHash","value":"33384388-2f2d-4b7f-bd24-af9e490ee50e","type":"core","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-06-20 15:09:13","updated_by":1},{"id":3,"uuid":"65310349-28a3-4b5d-9c4b-23f94c1659ff","key":"nextUpdateCheck","value":"1508094842","type":"core","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-10-14 19:14:01","updated_by":1},{"id":4,"uuid":"c806dd9a-c497-4f95-b8fd-cb1a0adb3f8d","key":"displayUpdateNotification","value":"0.11.11","type":"core","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-07-24 19:11:07","updated_by":1},{"id":5,"uuid":"4fbc823e-c83a-4afa-8c45-f2bd56bf6177","key":"seenNotifications","value":"[]","type":"core","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-06-20 15:09:13","updated_by":1},{"id":6,"uuid":"9d181d51-c531-4ad6-8728-854574af00d6","key":"migrations","value":"{\"006/01\":\"2017-06-20T15:09:13Z\"}","type":"core","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-06-20 15:09:13","updated_by":1},{"id":7,"uuid":"4fd16179-d4d5-4ff2-a0d3-ecf9f1291917","key":"title","value":"Foxy Panda ~","type":"blog","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-07-24 19:11:38","updated_by":1},{"id":8,"uuid":"68fcc481-e5e7-4719-9449-ee51ebecf71e","key":"description","value":"A small personal blog run by Timur Kuzhagaliyev of UCL.","type":"blog","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-07-24 19:11:38","updated_by":1},{"id":9,"uuid":"2f0f32a5-67a4-4c28-9b4c-876aa9ce5959","key":"logo","value":"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/foxy_panda-1472401959735.png","type":"blog","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-07-24 19:11:38","updated_by":1},{"id":10,"uuid":"e762245e-6cd2-4481-bccc-0dd8b9382d5a","key":"cover","value":"https://foxypanda-ghost.s3.amazonaws.com/2016/Aug/foxy_panda-1472404412268.png","type":"blog","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-07-24 19:11:38","updated_by":1},{"id":11,"uuid":"cd494a08-45d0-46a2-ab67-26692915d063","key":"defaultLang","value":"en_US","type":"blog","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-07-24 19:11:38","updated_by":1},{"id":12,"uuid":"7d265df1-a592-4f55-aa7a-c82692ae2b5f","key":"postsPerPage","value":"500","type":"blog","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-07-24 19:11:38","updated_by":1},{"id":13,"uuid":"ea927994-605c-4cea-84d0-634b16c42655","key":"activeTimezone","value":"UTC","type":"blog","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-07-24 19:11:38","updated_by":1},{"id":14,"uuid":"63e3f6c5-0556-40e5-9848-b76fb0dbc2c4","key":"forceI18n","value":"true","type":"blog","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-07-24 19:11:38","updated_by":1},{"id":15,"uuid":"d1a3c43f-979f-43da-a30b-fd5d02f2b756","key":"permalinks","value":"/:slug/","type":"blog","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-07-24 19:11:38","updated_by":1},{"id":16,"uuid":"7a067612-a53c-481f-ac3b-cadce04d2d9b","key":"ghost_head","value":"","type":"blog","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-07-24 19:11:38","updated_by":1},{"id":17,"uuid":"84d1e50e-5790-4483-9d0d-77b7b9153c19","key":"ghost_foot","value":"","type":"blog","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-07-24 19:11:38","updated_by":1},{"id":18,"uuid":"4bb45ad6-a6f4-4cc1-a210-7bcfd0ec6c2c","key":"facebook","value":"","type":"blog","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-07-24 19:11:38","updated_by":1},{"id":19,"uuid":"8b397255-d644-4605-9b50-e022035a3504","key":"twitter","value":"","type":"blog","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-07-24 19:11:38","updated_by":1},{"id":20,"uuid":"a1888978-176f-4007-9c9e-32a15e2baa2b","key":"labs","value":"{}","type":"blog","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-07-24 19:11:38","updated_by":1},{"id":21,"uuid":"4b72e216-e128-4121-a77d-8c289d50ee0d","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"https://foxypanda.me/\"},{\"label\":\"About\",\"url\":\"https://foxypanda.me/about/\"},{\"label\":\"Admin\",\"url\":\"https://foxypanda.me/ghost/\"}]","type":"blog","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-07-24 19:11:38","updated_by":1},{"id":22,"uuid":"9e082a53-6de7-49fe-941b-8d8df057086d","key":"slack","value":"[{\"url\":\"\"}]","type":"blog","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-07-24 19:11:38","updated_by":1},{"id":23,"uuid":"c3d4d2e2-1342-48b2-ab61-201fc169d4bd","key":"activeApps","value":"[\"foxy-panda-ghost-app\"]","type":"app","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-07-24 19:11:38","updated_by":1},{"id":24,"uuid":"fca50fcf-2f7e-4a0d-bd10-bd5b49f5db3e","key":"installedApps","value":"[\"foxy-panda-ghost-app\"]","type":"app","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-10-14 19:48:04","updated_by":1},{"id":25,"uuid":"5ee7908f-e6fe-4f59-be42-2590d87997f1","key":"isPrivate","value":"false","type":"private","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-07-24 19:11:38","updated_by":1},{"id":26,"uuid":"bd115a22-af6f-4ccb-91ed-283ed8d07d9f","key":"password","value":"","type":"private","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-07-24 19:11:38","updated_by":1},{"id":27,"uuid":"36bf3d54-124f-45f5-b35a-9e0e2a8c013f","key":"activeTheme","value":"foxy-panda","type":"theme","created_at":"2016-08-25 22:49:41","created_by":1,"updated_at":"2017-06-20 15:09:13","updated_by":1},{"id":28,"uuid":"5b3ffc0a-c1ff-415a-95cc-e619f36c44b9","key":"amp","value":"true","type":"blog","created_at":"2017-06-20 15:09:12","created_by":1,"updated_at":"2017-07-24 19:11:38","updated_by":1},{"id":29,"uuid":"f597af9e-acb3-41f6-b4ee-8bc531954804","key":"notifications","value":"[]","type":"core","created_at":"2017-10-14 19:13:08","created_by":1,"updated_at":"2017-10-14 19:13:08","updated_by":1}],"tags":[{"id":1,"uuid":"029a2dae-c8fb-4c06-b29f-26852558e547","name":"Getting Started","slug":"getting-started","description":null,"image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-08-25 22:49:24","created_by":1,"updated_at":"2016-08-25 22:49:24","updated_by":1},{"id":2,"uuid":"f1c2fd0f-7ebd-4458-a1c5-c85f1e0f38ad","name":"Projects","slug":"projects","description":null,"image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-08-27 19:26:32","created_by":1,"updated_at":"2016-08-27 19:26:32","updated_by":1},{"id":3,"uuid":"6f391291-1025-41e9-a2a9-484aecf688bb","name":"Blog","slug":"blog","description":null,"image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-08-27 19:26:50","created_by":1,"updated_at":"2016-08-28 13:21:39","updated_by":1}],"posts_tags":[{"id":1,"post_id":1,"tag_id":1,"sort_order":0},{"id":2,"post_id":9,"tag_id":3,"sort_order":0},{"id":3,"post_id":5,"tag_id":2,"sort_order":0},{"id":4,"post_id":8,"tag_id":3,"sort_order":0},{"id":5,"post_id":6,"tag_id":3,"sort_order":0},{"id":6,"post_id":4,"tag_id":2,"sort_order":0},{"id":7,"post_id":3,"tag_id":2,"sort_order":0},{"id":8,"post_id":12,"tag_id":2,"sort_order":0},{"id":9,"post_id":19,"tag_id":2,"sort_order":0},{"id":10,"post_id":20,"tag_id":2,"sort_order":0},{"id":11,"post_id":22,"tag_id":3,"sort_order":0},{"id":12,"post_id":24,"tag_id":2,"sort_order":0},{"id":13,"post_id":13,"tag_id":2,"sort_order":0},{"id":14,"post_id":16,"tag_id":2,"sort_order":0},{"id":15,"post_id":30,"tag_id":3,"sort_order":0},{"id":16,"post_id":31,"tag_id":3,"sort_order":0},{"id":17,"post_id":32,"tag_id":2,"sort_order":0},{"id":18,"post_id":33,"tag_id":3,"sort_order":0},{"id":19,"post_id":34,"tag_id":3,"sort_order":0},{"id":20,"post_id":35,"tag_id":3,"sort_order":0},{"id":21,"post_id":37,"tag_id":2,"sort_order":0},{"id":22,"post_id":38,"tag_id":3,"sort_order":0},{"id":23,"post_id":39,"tag_id":3,"sort_order":0},{"id":24,"post_id":40,"tag_id":3,"sort_order":0},{"id":25,"post_id":41,"tag_id":3,"sort_order":0},{"id":26,"post_id":42,"tag_id":3,"sort_order":0},{"id":27,"post_id":14,"tag_id":3,"sort_order":0},{"id":28,"post_id":27,"tag_id":3,"sort_order":0},{"id":29,"post_id":28,"tag_id":2,"sort_order":0},{"id":30,"post_id":26,"tag_id":3,"sort_order":0},{"id":31,"post_id":25,"tag_id":2,"sort_order":0},{"id":32,"post_id":15,"tag_id":2,"sort_order":0},{"id":33,"post_id":18,"tag_id":2,"sort_order":0},{"id":34,"post_id":44,"tag_id":3,"sort_order":0},{"id":35,"post_id":45,"tag_id":3,"sort_order":0},{"id":36,"post_id":48,"tag_id":3,"sort_order":0},{"id":37,"post_id":49,"tag_id":3,"sort_order":0},{"id":38,"post_id":46,"tag_id":3,"sort_order":0},{"id":39,"post_id":50,"tag_id":2,"sort_order":0},{"id":40,"post_id":53,"tag_id":3,"sort_order":0},{"id":41,"post_id":57,"tag_id":2,"sort_order":0},{"id":42,"post_id":58,"tag_id":3,"sort_order":0},{"id":43,"post_id":60,"tag_id":3,"sort_order":0},{"id":44,"post_id":61,"tag_id":3,"sort_order":0},{"id":45,"post_id":63,"tag_id":2,"sort_order":0},{"id":46,"post_id":64,"tag_id":3,"sort_order":0},{"id":47,"post_id":65,"tag_id":3,"sort_order":0},{"id":48,"post_id":66,"tag_id":2,"sort_order":0},{"id":49,"post_id":67,"tag_id":2,"sort_order":0},{"id":50,"post_id":68,"tag_id":2,"sort_order":0},{"id":51,"post_id":69,"tag_id":3,"sort_order":0},{"id":52,"post_id":70,"tag_id":2,"sort_order":0},{"id":53,"post_id":71,"tag_id":3,"sort_order":0},{"id":54,"post_id":73,"tag_id":3,"sort_order":0},{"id":55,"post_id":74,"tag_id":3,"sort_order":0},{"id":56,"post_id":76,"tag_id":3,"sort_order":0},{"id":57,"post_id":77,"tag_id":3,"sort_order":0},{"id":58,"post_id":78,"tag_id":2,"sort_order":0},{"id":59,"post_id":79,"tag_id":2,"sort_order":0},{"id":60,"post_id":80,"tag_id":3,"sort_order":0},{"id":61,"post_id":52,"tag_id":3,"sort_order":0},{"id":62,"post_id":51,"tag_id":2,"sort_order":0},{"id":63,"post_id":55,"tag_id":3,"sort_order":0},{"id":64,"post_id":56,"tag_id":2,"sort_order":0},{"id":65,"post_id":59,"tag_id":2,"sort_order":0},{"id":66,"post_id":54,"tag_id":2,"sort_order":0}],"apps":[],"app_settings":[],"app_fields":[],"subscribers":[]}}